{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fundamentos de JavaScript Moderno (ES6+)","text":""},{"location":"#objetivo-de-esta-guia","title":"\ud83c\udfaf Objetivo de esta gu\u00eda","text":"<p>Comprender y aplicar las caracter\u00edsticas principales de JavaScript moderno (ES6 en adelante), las cuales son esenciales para desarrollar interfaces modernas. Esta base permitir\u00e1 escribir c\u00f3digo m\u00e1s limpio, legible y mantenible, adem\u00e1s de facilitar la transici\u00f3n hacia el desarrollo con componentes funcionales y hooks en frameworks modernos.</p>"},{"location":"#1-const-y-let","title":"1. <code>const</code> y <code>let</code>","text":""},{"location":"#definicion-tecnica-detallada","title":"Definici\u00f3n t\u00e9cnica detallada","text":"<p><code>const</code> y <code>let</code> son declaradores de variables introducidos en ECMAScript 2015 (ES6) que resuelven problemas fundamentales del declarador <code>var</code>:</p> <ul> <li> <p>Alcance de bloque (Block Scope): A diferencia de <code>var</code> que tiene alcance de funci\u00f3n, <code>const</code> y <code>let</code> respetan el alcance delimitado por llaves <code>{}</code>. Esto significa que solo existen dentro del bloque donde fueron declaradas.</p> </li> <li> <p>Hoisting modificado: Aunque t\u00e9cnicamente <code>const</code> y <code>let</code> son \"elevados\" (hoisted), permanecen en la \"Temporal Dead Zone\" (TDZ) hasta su declaraci\u00f3n real en el c\u00f3digo, generando un error si intentas acceder a ellas antes.</p> </li> <li> <p><code>const</code>: Define una referencia inmutable a un valor. Una vez asignada, la variable no puede ser reasignada (apuntar a otro valor), pero si el valor es un objeto o array, sus propiedades internas s\u00ed pueden modificarse porque <code>const</code> no hace inmutable el valor, solo la referencia.</p> </li> <li> <p><code>let</code>: Define una variable que puede ser reasignada. Similar a <code>var</code> en flexibilidad, pero con alcance de bloque.</p> </li> </ul>"},{"location":"#comparacion-detallada-var-vs-let-y-const","title":"Comparaci\u00f3n detallada: <code>var</code> vs <code>let</code> y <code>const</code>","text":"Caracter\u00edstica <code>var</code> <code>let</code> <code>const</code> Alcance Funci\u00f3n Bloque Bloque Reasignaci\u00f3n \u2713 \u2713 \u2717 Redeclaraci\u00f3n en el mismo \u00e1mbito \u2713 \u2717 \u2717 Elevaci\u00f3n (Hoisting) Completa, con <code>undefined</code> Parcial, con TDZ Parcial, con TDZ Propiedad global (window) \u2713 \u2717 \u2717 En bucles for Una variable compartida Nueva variable por iteraci\u00f3n No recomendado (requiere reasignaci\u00f3n)"},{"location":"#ejemplos-clave","title":"Ejemplos clave","text":"<pre><code>// 1. Alcance de bloque vs alcance de funci\u00f3n\nfunction ejemploAlcance() {\n  var x = 10;\n  let y = 20;\n  const z = 30;\n\n  if (true) {\n    var x = 1;  // Sobreescribe la x anterior (misma variable)\n    let y = 2;  // Nueva variable y, solo en este bloque\n    const z = 3;  // Nueva variable z, solo en este bloque\n    console.log(x, y, z);  // 1, 2, 3\n  }\n\n  console.log(x, y, z);  // 1, 20, 30\n}\n\n// 2. Temporal Dead Zone\nfunction ejemploTDZ() {\n  console.log(a);  // undefined (hoisting completo)\n  // console.log(b);  // Error: Cannot access 'b' before initialization\n  // console.log(c);  // Error: Cannot access 'c' before initialization\n\n  var a = 1;\n  let b = 2;\n  const c = 3;\n}\n\n// 3. Mutabilidad vs Inmutabilidad\nconst persona = { nombre: \"Ana\" };\npersona.nombre = \"Mar\u00eda\";  // \u2713 V\u00e1lido (mutaci\u00f3n)\npersona.edad = 30;         // \u2713 V\u00e1lido (mutaci\u00f3n)\n// persona = { nombre: \"Luis\" };  // \u2717 Error: reasignaci\u00f3n prohibida\n\nconst numeros = [1, 2, 3];\nnumeros.push(4);           // \u2713 V\u00e1lido (mutaci\u00f3n)\n// numeros = [5, 6, 7];    // \u2717 Error: reasignaci\u00f3n prohibida\n</code></pre>"},{"location":"#ejemplo-practico-carrito-de-compras","title":"Ejemplo pr\u00e1ctico: Carrito de compras","text":"<pre><code>// Constantes que nunca cambiar\u00e1n\nconst IMPUESTO = 0.19;\nconst ENVIO_GRATIS_DESDE = 100000;\n\n// Variables que cambiar\u00e1n\nlet totalCarrito = 0;\nlet cantidadProductos = 0;\n\nfunction agregarProducto(precio, cantidad) {\n  // Actualizar variables\n  cantidadProductos += cantidad;\n  totalCarrito += precio * cantidad;\n\n  // Mostrar informaci\u00f3n actual\n  console.log(`Productos en carrito: ${cantidadProductos}`);\n  console.log(`Subtotal: $${totalCarrito}`);\n\n  // C\u00e1lculos con constantes\n  const impuestoCalculado = totalCarrito * IMPUESTO;\n  const envioGratis = totalCarrito &gt;= ENVIO_GRATIS_DESDE;\n\n  console.log(`Impuesto: $${impuestoCalculado}`);\n  console.log(`Env\u00edo gratis: ${envioGratis ? 'S\u00ed' : 'No'}`);\n}\n\n// Probemos la funci\u00f3n\nagregarProducto(20000, 2);  // Agregar 2 productos de $20.000\n</code></pre>"},{"location":"#errores-comunes-y-como-evitarlos","title":"Errores comunes y c\u00f3mo evitarlos","text":"<ol> <li> <p>Confundir inmutabilidad de referencia con inmutabilidad de valor <pre><code>// ERROR COM\u00daN\nconst config = { api: \"v1\", timeout: 3000 };\nconfig.api = \"v2\";  // Muchos piensan que esto dar\u00eda error, pero es v\u00e1lido\n\n// SOLUCI\u00d3N: Si necesitas inmutabilidad real, usa Object.freeze()\nconst configInmutable = Object.freeze({ api: \"v1\", timeout: 3000 });\n// configInmutable.api = \"v2\";  // Error en strict mode, silencioso en no-strict\n</code></pre></p> </li> <li> <p>Redeclarar variables en el mismo \u00e1mbito <pre><code>// ERROR COM\u00daN\nlet contador = 1;\nlet contador = 2;  // SyntaxError: redeclaraci\u00f3n de variable\n\n// CORRECTO: Usar diferentes nombres o \u00e1mbitos\nlet contador = 1;\nif (true) {\n  let contador = 2;  // Variable diferente en otro \u00e1mbito\n}\n</code></pre></p> </li> <li> <p>Usar <code>const</code> para valores que necesitan cambiar <pre><code>// ERROR COM\u00daN\nconst total = 0;\nfor (const item of items) {\n  // total += item.precio;  // Error: no se puede reasignar una constante\n}\n\n// CORRECTO: Usar let para acumuladores\nlet total = 0;\nfor (const item of items) {\n  total += item.precio;  // Correcto\n}\n</code></pre></p> </li> </ol>"},{"location":"#limitaciones","title":"Limitaciones","text":"<ol> <li> <p><code>const</code> no garantiza inmutabilidad completa</p> <ul> <li>Solo impide reasignaci\u00f3n, pero no la mutaci\u00f3n de objetos o arrays</li> <li>Para inmutabilidad real, usa Object.freeze() (aunque solo en primer nivel)</li> </ul> </li> <li> <p>Polyfills y soporte en navegadores antiguos</p> <ul> <li>IE11 y anteriores no soportan <code>let</code>/<code>const</code> nativamente</li> <li>Requiere transpiladores como Babel para compatibilidad</li> </ul> </li> <li> <p>Bucles <code>for-of</code> y <code>const</code></p> <ul> <li>En bucles con colecciones, <code>const</code> funciona bien para cada elemento</li> <li>Pero para contadores incrementales, debes usar <code>let</code></li> </ul> </li> </ol>"},{"location":"#mejores-practicas","title":"Mejores pr\u00e1cticas","text":"<ol> <li>Usa <code>const</code> por defecto para todo</li> <li>Usa <code>let</code> solo cuando necesites reasignar valores</li> <li>Evita completamente <code>var</code> en c\u00f3digo moderno</li> <li>Declara variables en el \u00e1mbito m\u00e1s peque\u00f1o posible</li> <li>Prefiere crear nuevas constantes en lugar de reasignar variables</li> </ol>"},{"location":"#2-arrow-functions-funciones-flecha","title":"2. Arrow Functions (Funciones Flecha)","text":""},{"location":"#definicion","title":"Definici\u00f3n","text":"<p>Las Arrow Functions (funciones flecha) son una sintaxis concisa para declarar funciones en JavaScript, introducida en ES6. Sus caracter\u00edsticas t\u00e9cnicas fundamentales son:</p> <ul> <li> <p>Sintaxis reducida: Eliminan la palabra clave <code>function</code>, y si solo hay un par\u00e1metro, los par\u00e9ntesis son opcionales. Si el cuerpo es una expresi\u00f3n simple, las llaves y <code>return</code> son opcionales.</p> </li> <li> <p>No tienen <code>this</code> propio: A diferencia de las funciones tradicionales, las arrow functions heredan autom\u00e1ticamente el valor de <code>this</code> del contexto enclosing (l\u00e9xico) donde fueron definidas, no del contexto de ejecuci\u00f3n. Esto resuelve uno de los problemas m\u00e1s comunes en JavaScript.</p> </li> <li> <p>Ausencia de otros objetos impl\u00edcitos: No tienen <code>arguments</code>, <code>super</code> ni <code>new.target</code>. No pueden acceder al objeto <code>arguments</code> como las funciones tradicionales.</p> </li> <li> <p>No pueden ser constructores: No se pueden usar con <code>new</code> porque no tienen un m\u00e9todo <code>[[Construct]]</code> interno.</p> </li> <li> <p>No tienen propiedad <code>prototype</code>: Al no poder usarse como constructores, no tiene sentido una propiedad prototype.</p> </li> <li> <p>No pueden usarse como generadores: No pueden contener la palabra clave <code>yield</code> dentro de su cuerpo.</p> </li> <li> <p>No son adecuadas para m\u00e9todos de objetos cuando necesitan referenciar el objeto contenedor mediante <code>this</code>.</p> </li> </ul>"},{"location":"#comparacion-detallada-funciones-tradicionales-vs-arrow-functions","title":"Comparaci\u00f3n detallada: Funciones tradicionales vs Arrow Functions","text":"Caracter\u00edstica Funci\u00f3n Tradicional Arrow Function Sintaxis <code>function(a, b) { return a + b; }</code> <code>(a, b) =&gt; a + b</code> <code>this</code> Din\u00e1mico (depende de la invocaci\u00f3n) L\u00e9xico (heredado del contexto) <code>arguments</code> \u2713 Disponible \u2717 No disponible Objeto <code>prototype</code> \u2713 Tiene \u2717 No tiene Uso con <code>new</code> \u2713 Puede usarse como constructor \u2717 No puede usarse <code>yield</code> \u2713 Puede usarse como generador \u2717 No puede usarse <code>return</code> impl\u00edcito \u2717 Siempre expl\u00edcito \u2713 Opcional con expresi\u00f3n \u00fanica"},{"location":"#ejemplos-clave_1","title":"Ejemplos clave","text":"<pre><code>// 1. Diferencias de sintaxis\n// Funci\u00f3n tradicional\nfunction sumar(a, b) {\n  return a + b;\n}\n\n// Arrow function - versi\u00f3n corta con return impl\u00edcito\nconst sumar = (a, b) =&gt; a + b;\n\n// Arrow function - versi\u00f3n con cuerpo\nconst sumar = (a, b) =&gt; {\n  const resultado = a + b;\n  return resultado;\n};\n\n// Arrow function con un par\u00e1metro (par\u00e9ntesis opcionales)\nconst duplicar = x =&gt; x * 2;\nconst duplicar = (x) =&gt; x * 2;  // Tambi\u00e9n v\u00e1lido\n\n// Sin par\u00e1metros (par\u00e9ntesis obligatorios)\nconst saludar = () =&gt; \"Hola mundo\";\n\n// 2. Diferencias con this\nconst usuario = {\n  nombre: \"Carlos\",\n  amigos: [\"Ana\", \"Luis\", \"Mar\u00eda\"],\n\n  // Problema con funci\u00f3n tradicional\n  imprimirAmigosFuncionTradicional: function() {\n    this.amigos.forEach(function(amigo) {\n      // 'this' aqu\u00ed no es 'usuario', es undefined o global\n      console.log(this.nombre + \" es amigo de \" + amigo);  // ERROR\n    });\n  },\n\n  // Soluci\u00f3n tradicional: bind, that, o self\n  imprimirAmigosSolucionTradicional: function() {\n    const that = this;  // Guardar referencia a 'this'\n    this.amigos.forEach(function(amigo) {\n      console.log(that.nombre + \" es amigo de \" + amigo);  // OK\n    });\n  },\n\n  // Soluci\u00f3n moderna con arrow function\n  imprimirAmigosArrow: function() {\n    this.amigos.forEach(amigo =&gt; {\n      // 'this' aqu\u00ed sigue siendo 'usuario'\n      console.log(this.nombre + \" es amigo de \" + amigo);  // OK\n    });\n  }\n};\n</code></pre>"},{"location":"#ejemplo-practico-filtrar-y-transformar-datos","title":"Ejemplo pr\u00e1ctico: Filtrar y transformar datos","text":"<pre><code>// Lista de productos\nconst productos = [\n  { nombre: \"Camisa\", precio: 25000, disponible: true },\n  { nombre: \"Pantal\u00f3n\", precio: 35000, disponible: false },\n  { nombre: \"Zapatos\", precio: 80000, disponible: true },\n  { nombre: \"Gorra\", precio: 15000, disponible: true }\n];\n\n// Filtrar productos disponibles (con arrow function)\nconst disponibles = productos.filter(producto =&gt; producto.disponible);\nconsole.log(\"Productos disponibles:\", disponibles);\n\n// Obtener solo los nombres (con arrow function)\nconst nombres = productos.map(producto =&gt; producto.nombre);\nconsole.log(\"Nombres de productos:\", nombres);\n\n// Calcular precios con descuento (10%)\nconst preciosConDescuento = productos.map(producto =&gt; {\n  const descuento = producto.precio * 0.1;\n  return {\n    nombre: producto.nombre,\n    precioOriginal: producto.precio,\n    precioConDescuento: producto.precio - descuento\n  };\n});\nconsole.log(\"Productos con descuento:\", preciosConDescuento);\n</code></pre>"},{"location":"#errores-comunes-y-como-evitarlos_1","title":"Errores comunes y c\u00f3mo evitarlos","text":"<ol> <li> <p>Usar arrow functions como m\u00e9todos de objetos <pre><code>// ERROR COM\u00daN\nconst contador = {\n  valor: 0,\n  incrementar: () =&gt; {\n    this.valor++;  // 'this' NO se refiere a contador\n  }\n};\n\n// CORRECTO\nconst contador = {\n  valor: 0,\n  incrementar() {  // M\u00e9todo conciso (ES6)\n    this.valor++;  // 'this' se refiere a contador\n  }\n};\n</code></pre></p> </li> <li> <p>Intentar usar <code>arguments</code> dentro de arrow functions <pre><code>// ERROR COM\u00daN\nconst sumarTodos = () =&gt; {\n  return Array.from(arguments).reduce((a, b) =&gt; a + b, 0);  // Error: arguments no definido\n};\n\n// CORRECTO: Usar par\u00e1metro rest\nconst sumarTodos = (...args) =&gt; {\n  return args.reduce((a, b) =&gt; a + b, 0);\n};\n</code></pre></p> </li> <li> <p>Intentar usar arrow functions como constructores <pre><code>// ERROR COM\u00daN\nconst Persona = (nombre) =&gt; {\n  this.nombre = nombre;  // 'this' no funciona como esperamos\n};\nconst juan = new Persona(\"Juan\");  // TypeError: Persona is not a constructor\n\n// CORRECTO: Usar funci\u00f3n tradicional o clase\nfunction Persona(nombre) {\n  this.nombre = nombre;\n}\n// O mejor a\u00fan, usar clases de ES6\nclass Persona {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n}\n</code></pre></p> </li> <li> <p>Omitir par\u00e9ntesis cuando se necesitan <pre><code>// ERROR COM\u00daN\nconst obtenerObjeto = () =&gt; { prop: \"valor\" };  // Interpreta { como inicio de funci\u00f3n\n\n// CORRECTO: Envolver el objeto entre par\u00e9ntesis\nconst obtenerObjeto = () =&gt; ({ prop: \"valor\" });  // Devuelve el objeto\n</code></pre></p> </li> </ol>"},{"location":"#limitaciones_1","title":"Limitaciones","text":"<ol> <li> <p>No son adecuadas para todas las situaciones</p> <ul> <li>No sirven para m\u00e9todos de objetos (cuando necesitan <code>this</code> del objeto)</li> <li>No sirven para constructores de clases</li> <li>No sirven para funciones generadoras</li> </ul> </li> <li> <p>No controlan el valor de <code>this</code></p> <ul> <li>No se pueden usar con <code>.call()</code>, <code>.apply()</code> o <code>.bind()</code> para cambiar <code>this</code></li> <li>Siempre mantienen el <code>this</code> del contexto donde fueron creadas</li> </ul> </li> <li> <p>No tienen el objeto <code>arguments</code></p> <ul> <li>Deben usar el operador rest (<code>...args</code>) en su lugar</li> </ul> </li> <li> <p>Readability en funciones complejas</p> <ul> <li>Muy \u00fatiles para funciones cortas, pero pueden reducir la legibilidad en funciones grandes</li> </ul> </li> </ol>"},{"location":"#mejores-practicas_1","title":"Mejores pr\u00e1cticas","text":"<ol> <li>Usa arrow functions para callbacks cortos y funciones inline</li> <li>Usa funciones tradicionales para m\u00e9todos de objetos y clases</li> <li>Aprovecha las arrow functions para evitar el problema de <code>this</code> en callbacks</li> <li>Evita arrow functions de una l\u00ednea demasiado complejas (prioriza legibilidad)</li> </ol>"},{"location":"#3-destructuring-desestructuracion","title":"3. Destructuring (Desestructuraci\u00f3n)","text":""},{"location":"#definicion_1","title":"Definici\u00f3n","text":"<p>La desestructuraci\u00f3n es una expresi\u00f3n de JavaScript que permite extraer valores de arrays o propiedades de objetos y asignarlos a variables individuales de forma declarativa. Introducida en ES6, esta caracter\u00edstica:</p> <ul> <li>Crea enlaces (bindings) entre propiedades de origen y variables destino</li> <li>Permite extracci\u00f3n selectiva sin necesidad de acceder a propiedades o \u00edndices repetidamente</li> <li>Soporta patrones anidados para estructuras de datos complejas</li> <li>Incluye valores por defecto para casos donde la propiedad o elemento no existe</li> <li>Permite renombrar variables durante la extracci\u00f3n</li> <li>Funciona con patrones rest para capturar elementos o propiedades restantes</li> </ul> <p>La desestructuraci\u00f3n opera en el lado izquierdo de una asignaci\u00f3n y sigue un \"patr\u00f3n de asignaci\u00f3n\" que refleja la estructura de los datos que se est\u00e1n extrayendo.</p>"},{"location":"#tipos-de-desestructuracion","title":"Tipos de desestructuraci\u00f3n","text":""},{"location":"#1-desestructuracion-de-objetos","title":"1. Desestructuraci\u00f3n de objetos","text":"<p>Utiliza la sintaxis de llaves <code>{}</code> para extraer propiedades de un objeto bas\u00e1ndose en los nombres de las propiedades.</p>"},{"location":"#2-desestructuracion-de-arrays","title":"2. Desestructuraci\u00f3n de arrays","text":"<p>Utiliza la sintaxis de corchetes <code>[]</code> para extraer elementos de un array bas\u00e1ndose en su posici\u00f3n.</p>"},{"location":"#comparacion-detallada-acceso-tradicional-vs-desestructuracion","title":"Comparaci\u00f3n detallada: Acceso tradicional vs Desestructuraci\u00f3n","text":"Operaci\u00f3n M\u00e9todo Tradicional Con Desestructuraci\u00f3n Extraer m\u00faltiples propiedades <code>const name = user.name; const age = user.age;</code> <code>const { name, age } = user;</code> Renombrar variables <code>const userName = user.name;</code> <code>const { name: userName } = user;</code> Valores por defecto <code>const role = user.role || 'user';</code> <code>const { role = 'user' } = user;</code> Extracci\u00f3n anidada <code>const city = user.address.city;</code> <code>const { address: { city } } = user;</code> Extraer de arrays <code>const first = items[0]; const second = items[1];</code> <code>const [first, second] = items;</code> Omitir elementos <code>const third = items[2];</code> <code>const [, , third] = items;</code> Capturar el resto Requiere slice o loops <code>const [first, ...rest] = items;</code>"},{"location":"#ejemplos-clave_2","title":"Ejemplos clave","text":"<pre><code>// 1. Desestructuraci\u00f3n b\u00e1sica de objetos\nconst persona = { nombre: \"Elena\", edad: 28, ciudad: \"Valencia\" };\n\n// Forma tradicional\nconst nombre = persona.nombre;\nconst edad = persona.edad;\n\n// Con desestructuraci\u00f3n\nconst { nombre, edad } = persona;\nconsole.log(nombre, edad);  // \"Elena\", 28\n\n// 2. Renombrar variables\nconst { nombre: nombreCompleto, ciudad: ubicacion } = persona;\nconsole.log(nombreCompleto, ubicacion);  // \"Elena\", \"Valencia\"\n\n// 3. Valores por defecto\nconst { nombre, profesion = \"Desconocida\" } = persona;\nconsole.log(nombre, profesion);  // \"Elena\", \"Desconocida\"\n\n// 4. Desestructuraci\u00f3n anidada de objetos\nconst usuario = {\n  id: 123,\n  nombre: \"Carlos\",\n  direccion: {\n    calle: \"Av. Principal 123\",\n    ciudad: \"Madrid\",\n    pais: \"Espa\u00f1a\"\n  }\n};\n\nconst { nombre, direccion: { ciudad, pais } } = usuario;\nconsole.log(nombre, ciudad, pais);  // \"Carlos\", \"Madrid\", \"Espa\u00f1a\"\n\n// 5. Desestructuraci\u00f3n b\u00e1sica de arrays\nconst colores = [\"rojo\", \"verde\", \"azul\", \"amarillo\"];\n\n// Forma tradicional\nconst primero = colores[0];\nconst segundo = colores[1];\n\n// Con desestructuraci\u00f3n\nconst [primero, segundo] = colores;\nconsole.log(primero, segundo);  // \"rojo\", \"verde\"\n\n// 6. Omitir elementos\nconst [primero, , tercero] = colores;\nconsole.log(primero, tercero);  // \"rojo\", \"azul\"\n\n// 7. Operador rest en desestructuraci\u00f3n\nconst [primero, segundo, ...resto] = colores;\nconsole.log(resto);  // [\"azul\", \"amarillo\"]\n\nconst { nombre, ...otrosDatos } = persona;\nconsole.log(otrosDatos);  // { edad: 28, ciudad: \"Valencia\" }\n\n// 8. Desestructuraci\u00f3n en par\u00e1metros de funci\u00f3n\nfunction mostrarInfo({ nombre, edad = 25 }) {\n  console.log(`${nombre} tiene ${edad} a\u00f1os`);\n}\n\nmostrarInfo(persona);  // \"Elena tiene 28 a\u00f1os\"\nmostrarInfo({ nombre: \"Luis\" });  // \"Luis tiene 25 a\u00f1os\"\n</code></pre>"},{"location":"#ejemplo-practico-datos-de-formulario","title":"Ejemplo pr\u00e1ctico: Datos de formulario","text":"<pre><code>// Datos recibidos de un formulario\nconst datosFormulario = {\n  nombreCompleto: \"Ana Mar\u00eda G\u00f3mez\",\n  email: \"ana@ejemplo.com\",\n  telefono: \"3101234567\",\n  direccion: {\n    calle: \"Calle 123\",\n    ciudad: \"Medell\u00edn\",\n    codigoPostal: \"050001\"\n  }\n};\n\n// Extraer datos b\u00e1sicos\nconst { nombreCompleto, email, telefono } = datosFormulario;\nconsole.log(`Nombre: ${nombreCompleto}`);\nconsole.log(`Contacto: ${email}, ${telefono}`);\n\n// Desestructuraci\u00f3n anidada (para objetos dentro de objetos)\nconst { direccion: { ciudad, calle } } = datosFormulario;\nconsole.log(`Ubicaci\u00f3n: ${ciudad}, ${calle}`);\n\n// Renombrar variables al desestructurar\nconst { nombreCompleto: nombre, email: correo } = datosFormulario;\nconsole.log(`Usuario: ${nombre}`);\nconsole.log(`Correo: ${correo}`);\n\n// Valores por defecto (si la propiedad no existe)\nconst { pais = \"Colombia\" } = datosFormulario;\nconsole.log(`Pa\u00eds: ${pais}`);  // \"Colombia\" (aunque no existe en el objeto)\n</code></pre>"},{"location":"#errores-comunes-y-como-evitarlos_2","title":"Errores comunes y c\u00f3mo evitarlos","text":"<ol> <li> <p>Desestructurar valores null o undefined <pre><code>// ERROR COM\u00daN\nconst { propiedad } = null;  // TypeError: Cannot destructure property of null\n\n// CORRECTO: Verificar primero o usar valores por defecto a nivel de objeto\nconst { propiedad } = objeto || {};  // Objeto vac\u00edo como fallback\n</code></pre></p> </li> <li> <p>Confundir la sintaxis de objetos y arrays <pre><code>// ERROR COM\u00daN\nconst { 0: primero } = [\"a\", \"b\", \"c\"];  // Intenta usar sintaxis de array con objetos\n\n// CORRECTO: Usar la sintaxis apropiada\nconst [primero] = [\"a\", \"b\", \"c\"];  // Para arrays\nconst { propiedad } = { propiedad: \"valor\" };  // Para objetos\n</code></pre></p> </li> <li> <p>Olvidar los par\u00e9ntesis en desestructuraci\u00f3n de objetos sueltos <pre><code>// ERROR COM\u00daN\n// { a, b } = { a: 1, b: 2 };  // SyntaxError: las llaves se interpretan como bloque\n\n// CORRECTO: Envolver en par\u00e9ntesis\n({ a, b } = { a: 1, b: 2 });  // OK\n</code></pre></p> </li> <li> <p>Intentar desestructurar propiedades profundamente anidadas que pueden no existir <pre><code>// ERROR COM\u00daN\nconst { a: { b: { c } } } = obj;  // Error si 'a' o 'b' no existen\n\n// CORRECTO: Verificar cada nivel o usar desestructuraci\u00f3n en varios pasos\nconst { a } = obj;\nconst { b } = a || {};\nconst { c } = b || {};\n\n// O usar bibliotecas como lodash get: _.get(obj, 'a.b.c')\n</code></pre></p> </li> </ol>"},{"location":"#limitaciones_2","title":"Limitaciones","text":"<ol> <li> <p>Complejidad con estructuras muy anidadas</p> <ul> <li>La desestructuraci\u00f3n de estructuras profundamente anidadas puede volverse dif\u00edcil de leer</li> <li>Recomendable limitar la profundidad a 2-3 niveles m\u00e1ximo</li> </ul> </li> <li> <p>Problemas con propiedades din\u00e1micas</p> <ul> <li>No permite extraer propiedades con nombres calculados en tiempo de ejecuci\u00f3n</li> <li>Para propiedades din\u00e1micas, primero debes calcular el nombre y luego usar notaci\u00f3n de corchetes</li> </ul> </li> <li> <p>Desestructuraci\u00f3n de propiedades con caracteres especiales</p> <ul> <li>Requiere usar notaci\u00f3n especial para propiedades con nombres no est\u00e1ndar</li> <li>Ejemplo: <code>const { 'special-name': specialName } = obj;</code></li> </ul> </li> <li> <p>Compatibilidad con navegadores antiguos</p> </li> <li>Requiere transpilaci\u00f3n para navegadores que no soportan ES6</li> </ol>"},{"location":"#mejores-practicas_2","title":"Mejores pr\u00e1cticas","text":"<ol> <li>Usa desestructuraci\u00f3n para extraer m\u00faltiples propiedades/elementos</li> <li>Aprovecha los valores por defecto para manejar propiedades ausentes</li> <li>Usa la desestructuraci\u00f3n en par\u00e1metros de funciones para mayor claridad</li> <li>Evita patrones excesivamente complejos que puedan reducir la legibilidad</li> <li>Considera usar <code>try/catch</code> al desestructurar datos externos no confiables</li> </ol>"},{"location":"#4-spread-y-rest-operators","title":"4. Spread y Rest Operators (...)","text":""},{"location":"#definicion_2","title":"Definici\u00f3n","text":"<p>El operador <code>...</code> (tres puntos) fue introducido en ES6 y tiene dos usos principales que, aunque similares en sintaxis, cumplen funciones opuestas:</p> <ul> <li>Operador Spread (expandir): Permite expandir un iterable (array, string) o un objeto en sus elementos o propiedades individuales. Se usa principalmente para:</li> <li>Expandir elementos de un array en argumentos para funciones</li> <li>Crear copias superficiales (shallow copy) de arrays u objetos</li> <li> <p>Combinar m\u00faltiples arrays u objetos</p> </li> <li> <p>Operador Rest (agrupar): Permite recolectar m\u00faltiples elementos y empaquetarlos en un array o las propiedades restantes en un objeto. Se usa principalmente para:</p> </li> <li>Capturar m\u00faltiples argumentos en funciones</li> <li>Recoger elementos sobrantes en desestructuraci\u00f3n</li> </ul> <p>T\u00e9cnicamente, la diferencia entre ambos est\u00e1 en el contexto de uso: - Rest aparece en el lado izquierdo de una asignaci\u00f3n o en la definici\u00f3n de par\u00e1metros - Spread aparece en el lado derecho de una asignaci\u00f3n o en llamadas a funciones</p>"},{"location":"#contextos-de-uso-principales","title":"Contextos de uso principales","text":""},{"location":"#spread","title":"Spread (...)","text":"<ol> <li>En llamadas a funciones: <code>funcion(...array)</code></li> <li>En arrays literales: <code>[1, 2, ...otroArray]</code></li> <li>En objetos literales (ES2018): <code>{ ...objeto1, propiedad: valor }</code></li> </ol>"},{"location":"#rest","title":"Rest (...)","text":"<ol> <li>En par\u00e1metros de funci\u00f3n: <code>function miFunc(...args) {}</code></li> <li>En desestructuraci\u00f3n de arrays: <code>const [primero, ...resto] = array</code></li> <li>En desestructuraci\u00f3n de objetos: <code>const { a, ...resto } = objeto</code></li> </ol>"},{"location":"#comparacion-detallada-metodos-tradicionales-vs-spreadrest","title":"Comparaci\u00f3n detallada: M\u00e9todos tradicionales vs Spread/Rest","text":"Operaci\u00f3n M\u00e9todo Tradicional Con Spread/Rest Concatenar arrays <code>array1.concat(array2)</code> <code>[...array1, ...array2]</code> Copiar array <code>array.slice()</code> <code>[...array]</code> Convertir string a array <code>str.split('')</code> <code>[...str]</code> Pasar array como args <code>func.apply(null, array)</code> <code>func(...array)</code> Capturar argumentos variables <code>arguments</code> objeto <code>function f(...args)</code> Recoger elementos restantes Loops, slices <code>const [a, ...resto] = array</code> Combinar objetos <code>Object.assign({}, obj1, obj2)</code> <code>{ ...obj1, ...obj2 }</code>"},{"location":"#ejemplos-clave_3","title":"Ejemplos clave","text":"<pre><code>// 1. SPREAD OPERATOR\n\n// 1.1. Expandir arrays en argumentos de funci\u00f3n\nconst numeros = [5, 8, 3, 1, 9];\n\n// Forma tradicional\nconsole.log(Math.max.apply(null, numeros));  // 9\n\n// Con spread\nconsole.log(Math.max(...numeros));  // 9\n\n// 1.2. Crear copias de arrays\n// Forma tradicional\nconst copiaTradicional = numeros.slice();\n\n// Con spread\nconst copiaConSpread = [...numeros];\ncopiaConSpread.push(10);  // No afecta al original\n\n// 1.3. Combinar arrays\nconst array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\n\n// Forma tradicional\nconst combinadoTradicional = array1.concat(array2);\n\n// Con spread (m\u00e1s flexible)\nconst combinadoConSpread = [...array1, ...array2];\nconst combinadoConElementos = [...array1, 7, 8, ...array2];  // [1, 2, 3, 7, 8, 4, 5, 6]\n\n// 1.4. Spread con strings\nconst letras = [...\"Hola\"];  // [\"H\", \"o\", \"l\", \"a\"]\n\n// 1.5. Spread con objetos (ES2018)\nconst persona = { nombre: \"David\", edad: 31 };\nconst detalles = { profesion: \"Desarrollador\", ciudad: \"Barcelona\" };\n\n// Forma tradicional\nconst personaCompletaTradicional = Object.assign({}, persona, detalles);\n\n// Con spread\nconst personaCompletaSpread = { ...persona, ...detalles };\nconst personaConCambios = { ...persona, edad: 32, ...detalles };  // Sobrescribe edad\n\n// 2. REST OPERATOR\n\n// 2.1. Rest en par\u00e1metros de funci\u00f3n\n// Forma tradicional\nfunction sumarTradicional() {\n  let suma = 0;\n  for (let i = 0; i &lt; arguments.length; i++) {\n    suma += arguments[i];\n  }\n  return suma;\n}\n\n// Con rest (m\u00e1s claro y funcional)\nfunction sumar(...numeros) {\n  return numeros.reduce((total, num) =&gt; total + num, 0);\n}\n\nconsole.log(sumar(1, 2, 3, 4, 5));  // 15\n\n// 2.2. Rest con par\u00e1metros espec\u00edficos\nfunction procesar(primero, segundo, ...resto) {\n  console.log(`Los dos primeros: ${primero}, ${segundo}`);\n  console.log(`El resto: ${resto}`);\n}\n\nprocesar(\"a\", \"b\", \"c\", \"d\", \"e\");\n// Los dos primeros: a, b\n// El resto: c,d,e\n\n// 2.3. Rest en desestructuraci\u00f3n de arrays\nconst [ganador, segundo, ...otros] = [\"Ana\", \"Luis\", \"Carlos\", \"Mar\u00eda\", \"Pedro\"];\nconsole.log(ganador);  // \"Ana\"\nconsole.log(segundo);  // \"Luis\"\nconsole.log(otros);    // [\"Carlos\", \"Mar\u00eda\", \"Pedro\"]\n\n// 2.4. Rest en desestructuraci\u00f3n de objetos\nconst { nombre, edad, ...otraInfo } = {\n  nombre: \"Elena\",\n  edad: 28,\n  profesion: \"Ingeniera\",\n  ciudad: \"Madrid\",\n  hobby: \"Pintura\"\n};\n\nconsole.log(nombre);     // \"Elena\"\nconsole.log(edad);       // 28\nconsole.log(otraInfo);   // { profesion: \"Ingeniera\", ciudad: \"Madrid\", hobby: \"Pintura\" }\n</code></pre>"},{"location":"#ejemplo-practico-funcion-con-parametros-rest-y-formulario","title":"Ejemplo pr\u00e1ctico: Funci\u00f3n con par\u00e1metros REST y formulario","text":"<pre><code>// Funci\u00f3n que acepta un n\u00famero indefinido de argumentos\nfunction sumarTodos(...numeros) {\n  return numeros.reduce((total, num) =&gt; total + num, 0);\n}\n\nconsole.log(sumarTodos(1, 2));            // 3\nconsole.log(sumarTodos(1, 2, 3, 4, 5));   // 15\nconsole.log(sumarTodos(10, 20, 30, 40));  // 100\n\n// Actualizar datos de formulario (caso com\u00fan)\nconst datosUsuario = {\n  nombre: \"Juliana\",\n  email: \"juliana@ejemplo.com\",\n  preferencias: {\n    tema: \"claro\",\n    notificaciones: true\n  }\n};\n\n// Actualizar solo algunas propiedades sin modificar el resto\nfunction actualizarPerfil(usuario, cambios) {\n  return {\n    ...usuario,  // Mantener todas las propiedades existentes\n    ...cambios,  // Sobrescribir con los cambios\n    fechaActualizacion: new Date()  // A\u00f1adir propiedad nueva\n  };\n}\n\nconst usuarioActualizado = actualizarPerfil(datosUsuario, {\n  email: \"juliana.nueva@ejemplo.com\",\n  telefono: \"3209876543\"  // Propiedad nueva\n});\n\nconsole.log(usuarioActualizado);\n// Resultado: el objeto original con email actualizado, tel\u00e9fono a\u00f1adido \n// y la nueva fecha de actualizaci\u00f3n\n</code></pre>"},{"location":"#errores-comunes-y-como-evitarlos_3","title":"Errores comunes y c\u00f3mo evitarlos","text":"<ol> <li> <p>Confundir shallow copy con deep copy <pre><code>// ERROR COM\u00daN\nconst original = { datos: { a: 1, b: 2 } };\nconst copia = { ...original };\ncopia.datos.a = 5;  // \u00a1Tambi\u00e9n modifica original.datos.a!\n\n// CORRECTO para deep copy\nconst copiaReal = JSON.parse(JSON.stringify(original));  // Para objetos simples\n// O usar bibliotecas como lodash _.cloneDeep()\n</code></pre></p> </li> <li> <p>Usar rest en posici\u00f3n incorrecta <pre><code>// ERROR COM\u00daN\nfunction error(...resto, ultimo) {}  // SyntaxError\n\n// CORRECTO\nfunction correcto(primero, ...resto) {}  // Rest siempre al final\n</code></pre></p> </li> <li> <p>Spread de null o undefined <pre><code>// ERROR COM\u00daN\nconst obj = { ...null };  // TypeError en algunos entornos\n\n// CORRECTO\nconst obj = { ...(data || {}) };  // Garantizar un objeto\n</code></pre></p> </li> <li> <p>Orden de propiedades al combinar objetos <pre><code>// ERROR COM\u00daN: Propiedades sobrescritas sin darse cuenta\nconst resultado = { ...defaults, ...config, debug: true };\n// Si config tiene su propio debug: false, sobrescribe el true\n\n// CORRECTO: Considerar cuidadosamente el orden\nconst resultado = { ...defaults, debug: true, ...config };  // config tiene la \u00faltima palabra\n</code></pre></p> </li> </ol>"},{"location":"#limitaciones_3","title":"Limitaciones","text":"<ol> <li> <p>Copia superficial (shallow copy)</p> <ul> <li>Los operadores spread solo crean copias superficiales</li> <li>Los objetos anidados siguen siendo referencias al original</li> </ul> </li> <li> <p>Rendimiento con objetos grandes</p> <ul> <li>Spread en objetos grandes puede tener impacto en rendimiento</li> <li>Para operaciones cr\u00edticas en rendimiento, considerar m\u00e9todos alternativos</li> </ul> </li> <li> <p>No funciona con objetos que no sean iterables</p> <ul> <li>Spread solo funciona con objetos iterables (arrays, strings, Maps, Sets)</li> <li>No funciona con objetos normales a menos que sea en contexto de objeto literal</li> </ul> </li> <li> <p>Rest agrupa todo en un array</p> <ul> <li>Los par\u00e1metros rest siempre crean un array, incluso si no se pasan argumentos (array vac\u00edo)</li> <li>Esto puede causar inconsistencias si esperas otro tipo de dato</li> </ul> </li> </ol>"},{"location":"#mejores-practicas_3","title":"Mejores pr\u00e1cticas","text":"<ol> <li>Usa spread para crear copias no destructivas de arrays y objetos</li> <li>Usa rest en funciones que necesitan manejar un n\u00famero variable de argumentos</li> <li>Coloca el par\u00e1metro rest siempre al final</li> <li>Para copias profundas, complementa con soluciones espec\u00edficas (estructuradamente o con bibliotecas)</li> <li>Considera el rendimiento al trabajar con estructuras de datos muy grandes</li> </ol>"},{"location":"#5-template-literals","title":"5. Template Literals","text":""},{"location":"#definicion_3","title":"Definici\u00f3n","text":"<p>Los template literals (literales de plantilla) son una nueva forma de trabajar con strings en JavaScript introducida en ES6 que permite expresiones incrustadas y strings multil\u00ednea. Se definen usando backticks (<code>`</code>) en lugar de comillas simples o dobles. Sus caracter\u00edsticas principales son:</p> <ul> <li> <p>Interpolaci\u00f3n de expresiones: Permite incrustar expresiones JavaScript directamente en el string usando la sintaxis <code>${expresi\u00f3n}</code>. La expresi\u00f3n se eval\u00faa y su resultado se convierte a string.</p> </li> <li> <p>Strings multil\u00ednea: Permiten escribir texto en varias l\u00edneas sin necesidad de caracteres de escape especiales (<code>\\n</code>) o concatenaci\u00f3n.</p> </li> <li> <p>Tagged Templates: Una caracter\u00edstica avanzada que permite procesar el template literal con una funci\u00f3n (el \"tag\") para manipulaci\u00f3n personalizada. Es el fundamento de bibliotecas como styled-components y graphql-tag.</p> </li> <li> <p>Raw Strings: Acceso a la representaci\u00f3n \"cruda\" del string sin procesar escapes usando <code>String.raw</code>.</p> </li> </ul> <p>A nivel del motor de JavaScript, los template literals son convertidos a strings regulares despu\u00e9s de evaluar las expresiones incrustadas. El proceso implica:</p> <ol> <li>Identificar todas las expresiones dentro de <code>${ }</code></li> <li>Evaluar cada expresi\u00f3n en el contexto actual</li> <li>Convertir los resultados a string (usando toString() impl\u00edcitamente)</li> <li>Concatenar las partes literales con los resultados</li> </ol>"},{"location":"#comparacion-detallada-strings-tradicionales-vs-template-literals","title":"Comparaci\u00f3n detallada: Strings tradicionales vs Template Literals","text":"Caracter\u00edstica Strings tradicionales Template Literals Delimitador <code>''</code> o <code>\"\"</code> <code>` `</code> (backticks) Multil\u00ednea Requiere <code>\\n</code> Soporte nativo Interpolaci\u00f3n Concatenaci\u00f3n con <code>+</code> Integrada con <code>${}</code> Expresiones Fuera del string Dentro del string Caracteres especiales Requiere escapes Menos escapes necesarios Procesamiento personalizado No soportado Soportado (tagged templates)"},{"location":"#ejemplos-clave_4","title":"Ejemplos clave","text":"<pre><code>// 1. Interpolaci\u00f3n b\u00e1sica de variables\nconst nombre = \"Mar\u00eda\";\nconst edad = 28;\n\n// Forma tradicional\nconst mensajeTradicional = \"Hola, mi nombre es \" + nombre + \" y tengo \" + edad + \" a\u00f1os.\";\n\n// Con template literals\nconst mensajeModerno = `Hola, mi nombre es ${nombre} y tengo ${edad} a\u00f1os.`;\n\n// 2. Expresiones dentro de la interpolaci\u00f3n\nconst precio = 19.99;\nconst cantidad = 3;\n\nconst total = `El total es $${(precio * cantidad).toFixed(2)}`;\nconsole.log(total);  // \"El total es $59.97\"\n\n// 3. Strings multil\u00ednea\n// Forma tradicional\nconst htmlTradicional = \"&lt;div&gt;\\n\" +\n                        \"  &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\\n\" +\n                        \"  &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\\n\" +\n                        \"&lt;/div&gt;\";\n\n// Con template literals\nconst htmlModerno = `&lt;div&gt;\n  &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n  &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n&lt;/div&gt;`;\n\n// 4. Plantillas anidadas\nconst autores = [\"Ana\", \"Luis\", \"Carlos\"];\nconst categoria = \"Tecnolog\u00eda\";\n\nconst listaHTML = `\n&lt;h2&gt;Art\u00edculos de ${categoria}&lt;/h2&gt;\n&lt;ul&gt;\n  ${autores.map(autor =&gt; `&lt;li&gt;${autor}&lt;/li&gt;`).join('')}\n&lt;/ul&gt;\n`;\n\n// 5. Tagged templates (avanzado)\nfunction resaltar(strings, ...valores) {\n  return strings.reduce((resultado, str, i) =&gt; {\n    const valor = valores[i] || '';\n    return resultado + str + (valor ? `&lt;strong&gt;${valor}&lt;/strong&gt;` : '');\n  }, '');\n}\n\nconst producto = \"Laptop\";\nconst precio = 1299.99;\n\nconst mensaje = resaltar`El producto ${producto} cuesta $${precio}`;\nconsole.log(mensaje);  // \"El producto &lt;strong&gt;Laptop&lt;/strong&gt; cuesta $&lt;strong&gt;1299.99&lt;/strong&gt;\"\n\n// 6. String.raw (caracteres de escape sin procesar)\nconsole.log(`Salto de l\u00ednea:\\n`);  // Muestra un salto de l\u00ednea real\nconsole.log(String.raw`Salto de l\u00ednea:\\n`);  // Muestra \"\\n\" como texto\n</code></pre>"},{"location":"#ejemplo-practico-generacion-de-html","title":"Ejemplo pr\u00e1ctico: Generaci\u00f3n de HTML","text":"<pre><code>// Datos de un producto\nconst producto = {\n  nombre: \"Smartwatch XYZ\",\n  precio: 250000,\n  caracteristicas: [\"Resistente al agua\", \"Monitor card\u00edaco\", \"GPS\"],\n  imagen: \"watch.jpg\",\n  disponible: true\n};\n\n// Generar HTML para mostrar el producto (com\u00fan en desarrollo web)\nconst plantillaProducto = `\n  &lt;div class=\"producto ${producto.disponible ? 'en-stock' : 'agotado'}\"&gt;\n    &lt;img src=\"img/${producto.imagen}\" alt=\"${producto.nombre}\"&gt;\n    &lt;h2&gt;${producto.nombre}&lt;/h2&gt;\n    &lt;p class=\"precio\"&gt;$${producto.precio.toLocaleString('es-CO')}&lt;/p&gt;\n\n    &lt;h3&gt;Caracter\u00edsticas:&lt;/h3&gt;\n    &lt;ul&gt;\n      ${producto.caracteristicas.map(c =&gt; `&lt;li&gt;${c}&lt;/li&gt;`).join('')}\n    &lt;/ul&gt;\n\n    &lt;button ${!producto.disponible ? 'disabled' : ''}&gt;\n      ${producto.disponible ? 'Comprar ahora' : 'Agotado'}\n    &lt;/button&gt;\n  &lt;/div&gt;\n`;\n\nconsole.log(plantillaProducto);\n// HTML formateado con todos los datos del producto\n</code></pre>"},{"location":"#errores-comunes-y-como-evitarlos_4","title":"Errores comunes y c\u00f3mo evitarlos","text":"<ol> <li> <p>Usar interpolaci\u00f3n en strings normales <pre><code>// ERROR COM\u00daN\nconst nombre = \"Ana\";\nconst mensaje = \"Hola ${nombre}\";  // Resultado literal: \"Hola ${nombre}\"\n\n// CORRECTO\nconst mensaje = `Hola ${nombre}`;  // \"Hola Ana\"\n</code></pre></p> </li> <li> <p>Olvidar convertir valores no string <pre><code>// ERROR COM\u00daN (aunque no siempre visible)\nconst obj = { clave: \"valor\" };\nconsole.log(`Objeto: ${obj}`);  // \"Objeto: [object Object]\" (no muy \u00fatil)\n\n// CORRECTO\nconsole.log(`Objeto: ${JSON.stringify(obj)}`);  // \"Objeto: {\"clave\":\"valor\"}\"\n</code></pre></p> </li> <li> <p>Espacios inesperados en multil\u00ednea <pre><code>// ERROR COM\u00daN: espacios/indentaci\u00f3n incluidos en el resultado\nconst sql = `SELECT *\n             FROM usuarios\n             WHERE id = 1`;  // Los espacios antes de \"FROM\" y \"WHERE\" est\u00e1n en el string\n\n// CORRECTO: usar trim() o cuidar la indentaci\u00f3n\nconst sql = `\n  SELECT *\n  FROM usuarios\n  WHERE id = 1\n`.trim().replace(/^\\s+/gm, '');\n</code></pre></p> </li> <li> <p>Confusi\u00f3n con backticks anidados <pre><code>// ERROR COM\u00daN\nconst html = `&lt;button onclick=\"alert(`Hola`)\"&gt;Click&lt;/button&gt;`;  // Error de sintaxis\n\n// CORRECTO\nconst html = `&lt;button onclick=\"alert('Hola')\"&gt;Click&lt;/button&gt;`;  // Usar comillas diferentes\nconst html = `&lt;button onclick=\"alert(\\`Hola\\`)\"&gt;Click&lt;/button&gt;`;  // Escapar backticks\n</code></pre></p> </li> </ol>"},{"location":"#limitaciones_4","title":"Limitaciones","text":"<ol> <li> <p>No existe interpolaci\u00f3n \"cruda\"</p> <ul> <li>No hay sintaxis nativa para insertar texto sin procesar/escapar</li> <li>Las expresiones siempre se convierten a string</li> </ul> </li> <li> <p>Tagged templates no est\u00e1ndar entre frameworks</p> <ul> <li>Cada biblioteca implementa sus propios \"tags\" de manera diferente</li> <li>No hay un est\u00e1ndar para pasar metadatos o configuraciones</li> </ul> </li> <li> <p>Rendimiento con muchas interpolaciones</p> <ul> <li>Un exceso de expresiones <code>${}</code> puede afectar rendimiento</li> <li>El uso excesivo puede generar garbage collection</li> </ul> </li> <li> <p>Posibles problemas de seguridad</p> <ul> <li>Interpolaci\u00f3n directa de datos de usuario puede provocar XSS si se usa en HTML</li> </ul> </li> </ol>"},{"location":"#mejores-practicas_4","title":"Mejores pr\u00e1cticas","text":"<ol> <li>Usa template literals para cualquier string que contenga valores din\u00e1micos</li> <li>Aprovecha la capacidad multil\u00ednea para c\u00f3digo HTML, SQL o texto largo</li> <li>Considera el uso de tagged templates para casos especiales (HTML sanitization, SQL escaping)</li> <li>Usa <code>JSON.stringify()</code> para interpolar objetos de forma legible</li> <li>Mant\u00e9n la legibilidad cuidando la indentaci\u00f3n, especialmente en strings largos</li> </ol>"},{"location":"#6-metodos-modernos-de-arrays","title":"6. M\u00e9todos Modernos de Arrays","text":""},{"location":"#definicion_4","title":"Definici\u00f3n","text":"<p>Los m\u00e9todos modernos de arrays son un conjunto de m\u00e9todos de alto nivel que permiten manipular arrays de manera m\u00e1s declarativa, con c\u00f3digo m\u00e1s conciso y funcional. Estos m\u00e9todos son funciones integradas que operan en cada elemento del array, devolviendo un nuevo resultado basado en una funci\u00f3n callback proporcionada.</p> <p>Caracter\u00edsticas fundamentales:</p> <ul> <li>Higher-order functions: Reciben funciones como argumentos (callbacks)</li> <li>Funciones puras (la mayor\u00eda): No modifican el array original (excepto <code>sort()</code> y <code>splice()</code>)</li> <li>Declarativas: Expresan \"qu\u00e9\" se quiere hacer en lugar de \"c\u00f3mo\" hacerlo paso a paso</li> <li>Encadenables: Permiten crear \"pipelines\" de transformaci\u00f3n de datos</li> <li>Reducen la mutabilidad: Ayudan a mantener un estilo de programaci\u00f3n m\u00e1s inmutable</li> <li>Evitan loops expl\u00edcitos: Menos propensos a errores de \u00edndices y condiciones de salida</li> </ul> <p>El callback recibe t\u00edpicamente tres argumentos:</p> <ol> <li><code>elemento</code>: El elemento actual que se est\u00e1 procesando</li> <li><code>\u00edndice</code> (opcional): La posici\u00f3n del elemento en el array</li> <li><code>array</code> (opcional): El array completo sobre el que se llam\u00f3 al m\u00e9todo</li> </ol>"},{"location":"#comparacion-detallada-de-los-metodos-principales","title":"Comparaci\u00f3n detallada de los m\u00e9todos principales","text":""},{"location":"#metodos-de-iteracion-y-transformacion","title":"M\u00e9todos de iteraci\u00f3n y transformaci\u00f3n","text":"M\u00e9todo Prop\u00f3sito Devuelve Modifica el original <code>map()</code> Transformar cada elemento Nuevo array transformado No <code>filter()</code> Seleccionar elementos que cumplan condici\u00f3n Nuevo array filtrado No <code>find()</code> Encontrar el primer elemento que cumpla condici\u00f3n Elemento o undefined No <code>findIndex()</code> Encontrar posici\u00f3n del primer elemento \u00cdndice o -1 No <code>forEach()</code> Ejecutar c\u00f3digo para cada elemento undefined No (pero el callback puede modificar) <code>some()</code> Verificar si alg\u00fan elemento cumple condici\u00f3n Boolean No <code>every()</code> Verificar si todos los elementos cumplen condici\u00f3n Boolean No <code>reduce()</code> Acumular valores de array en un solo resultado Valor acumulado No <code>includes()</code> Verificar si array contiene un valor Boolean No <code>indexOf()</code> Encontrar primera posici\u00f3n de un valor \u00cdndice o -1 No"},{"location":"#ejemplos-detallados-de-cada-metodo-clave","title":"Ejemplos detallados de cada m\u00e9todo clave","text":"<pre><code>const productos = [\n  { id: 1, nombre: \"Laptop\", precio: 1200, stock: 5, categorias: [\"electr\u00f3nica\", \"computaci\u00f3n\"] },\n  { id: 2, nombre: \"Celular\", precio: 800, stock: 10, categorias: [\"electr\u00f3nica\", \"m\u00f3viles\"] },\n  { id: 3, nombre: \"Auriculares\", precio: 100, stock: 20, categorias: [\"electr\u00f3nica\", \"audio\"] },\n  { id: 4, nombre: \"Monitor\", precio: 300, stock: 3, categorias: [\"electr\u00f3nica\", \"computaci\u00f3n\"] },\n  { id: 5, nombre: \"Teclado\", precio: 80, stock: 0, categorias: [\"electr\u00f3nica\", \"computaci\u00f3n\", \"perif\u00e9ricos\"] }\n];\n\n// 1. map() - Transformar cada elemento\n// Obtener solo nombres y precios\nconst catalogoSimplificado = productos.map(producto =&gt; ({\n  nombre: producto.nombre,\n  precio: producto.precio\n}));\nconsole.log(catalogoSimplificado);\n// [{nombre: \"Laptop\", precio: 1200}, {nombre: \"Celular\", precio: 800}, ...]\n\n// Aplicar formato de precios\nconst preciosFormateados = productos.map(producto =&gt; \n  `${producto.nombre}: $${producto.precio.toLocaleString('es-CO')}`\n);\nconsole.log(preciosFormateados);\n// [\"Laptop: $1.200\", \"Celular: $800\", ...]\n\n// 2. filter() - Seleccionar elementos seg\u00fan condici\u00f3n\n// Productos en stock\nconst productosDisponibles = productos.filter(producto =&gt; producto.stock &gt; 0);\nconsole.log(productosDisponibles.length);  // 4\n\n// Productos de una categor\u00eda espec\u00edfica\nconst productosComputacion = productos.filter(producto =&gt; \n  producto.categorias.includes(\"computaci\u00f3n\")\n);\nconsole.log(productosComputacion.length);  // 3\n\n// Productos en oferta (precio &lt; 100)\nconst productosBaratos = productos.filter(producto =&gt; producto.precio &lt; 100);\nconsole.log(productosBaratos.length);  // 1\n\n// 3. find() - Encontrar un elemento espec\u00edfico\n// Buscar por ID\nconst productoID3 = productos.find(producto =&gt; producto.id === 3);\nconsole.log(productoID3.nombre);  // \"Auriculares\"\n\n// Buscar primer producto agotado\nconst primerAgotado = productos.find(producto =&gt; producto.stock === 0);\nconsole.log(primerAgotado?.nombre);  // \"Teclado\"\n\n// Si no existe\nconst productoInexistente = productos.find(producto =&gt; producto.precio &gt; 2000);\nconsole.log(productoInexistente);  // undefined\n\n// 4. findIndex() - Encontrar posici\u00f3n\n// Encontrar \u00edndice para actualizaci\u00f3n\nconst indiceTeclado = productos.findIndex(producto =&gt; producto.nombre === \"Teclado\");\nconsole.log(indiceTeclado);  // 4\n\n// Producto no encontrado\nconst indiceInexistente = productos.findIndex(producto =&gt; producto.nombre === \"Mouse\");\nconsole.log(indiceInexistente);  // -1\n\n// Actualizar elemento encontrado\nif (indiceTeclado !== -1) {\n  const productosActualizados = [...productos];  // Copia para inmutabilidad\n  productosActualizados[indiceTeclado] = {\n    ...productos[indiceTeclado],\n    stock: 5\n  };\n  // productosActualizados tendr\u00eda el teclado con stock actualizado\n}\n\n// 5. some() - \u00bfAlguno cumple la condici\u00f3n?\n// Verificar si hay productos agotados\nconst hayAgotados = productos.some(producto =&gt; producto.stock === 0);\nconsole.log(hayAgotados);  // true\n\n// Verificar si hay productos muy caros\nconst hayProductosCaros = productos.some(producto =&gt; producto.precio &gt; 1500);\nconsole.log(hayProductosCaros);  // false\n\n// Verificar si hay productos de categor\u00eda espec\u00edfica\nconst hayAudio = productos.some(producto =&gt; \n  producto.categorias.includes(\"audio\")\n);\nconsole.log(hayAudio);  // true\n\n// 6. every() - \u00bfTodos cumplen la condici\u00f3n?\n// Verificar si todos tienen precio\nconst todosTienenPrecio = productos.every(producto =&gt; producto.precio &gt; 0);\nconsole.log(todosTienenPrecio);  // true\n\n// Verificar si todos est\u00e1n en stock\nconst todosDisponibles = productos.every(producto =&gt; producto.stock &gt; 0);\nconsole.log(todosDisponibles);  // false\n\n// Verificar si todos pertenecen a electr\u00f3nica\nconst todosElectronica = productos.every(producto =&gt; \n  producto.categorias.includes(\"electr\u00f3nica\")\n);\nconsole.log(todosElectronica);  // true\n\n// 7. reduce() - Acumular resultados\n// Calcular valor total del inventario\nconst valorTotal = productos.reduce((total, producto) =&gt; \n  total + (producto.precio * producto.stock), 0\n);\nconsole.log(valorTotal);  // 1200*5 + 800*10 + 100*20 + 300*3 + 80*0 = 14900\n\n// Agrupar por categor\u00eda (m\u00e1s avanzado)\nconst porCategoria = productos.reduce((agrupado, producto) =&gt; {\n  producto.categorias.forEach(categoria =&gt; {\n    if (!agrupado[categoria]) {\n      agrupado[categoria] = [];\n    }\n    agrupado[categoria].push(producto);\n  });\n  return agrupado;\n}, {});\nconsole.log(Object.keys(porCategoria));  // [\"electr\u00f3nica\", \"computaci\u00f3n\", \"m\u00f3viles\", \"audio\", \"perif\u00e9ricos\"]\n\n// 8. forEach() - Iterar sin transformar\n// Mostrar inventario\nproductos.forEach(producto =&gt; {\n  console.log(`${producto.nombre}: ${producto.stock} unidades disponibles`);\n});\n</code></pre>"},{"location":"#ejemplo-practico-lista-de-tareas","title":"Ejemplo pr\u00e1ctico: Lista de tareas","text":"<pre><code>// Lista de tareas pendientes\nconst tareas = [\n  { id: 1, descripcion: \"Hacer compras\", completada: false, prioridad: \"alta\" },\n  { id: 2, descripcion: \"Estudiar JavaScript\", completada: false, prioridad: \"alta\" },\n  { id: 3, descripcion: \"Hacer ejercicio\", completada: true, prioridad: \"media\" },\n  { id: 4, descripcion: \"Llamar al m\u00e9dico\", completada: false, prioridad: \"baja\" },\n  { id: 5, descripcion: \"Limpiar casa\", completada: true, prioridad: \"media\" }\n];\n\n// 1. Filtrar tareas pendientes (no completadas)\nconst tareasPendientes = tareas.filter(tarea =&gt; !tarea.completada);\nconsole.log(\"Tareas pendientes:\", tareasPendientes);\n\n// 2. Filtrar tareas completadas\nconst tareasCompletadas = tareas.filter(tarea =&gt; tarea.completada);\nconsole.log(\"Tareas completadas:\", tareasCompletadas);\n\n// 3. Encontrar una tarea espec\u00edfica\nconst tareaEstudiar = tareas.find(tarea =&gt; \n  tarea.descripcion.includes(\"Estudiar\")\n);\nconsole.log(\"Tarea de estudio:\", tareaEstudiar);\n\n// 4. Verificar si hay tareas de alta prioridad pendientes\nconst hayPrioritarias = tareas.some(tarea =&gt; \n  tarea.prioridad === \"alta\" &amp;&amp; !tarea.completada\n);\nconsole.log(\"\u00bfHay tareas prioritarias pendientes?\", hayPrioritarias);\n\n// 5. Verificar si todas las tareas est\u00e1n completadas\nconst todasCompletadas = tareas.every(tarea =&gt; tarea.completada);\nconsole.log(\"\u00bfTodas las tareas est\u00e1n completadas?\", todasCompletadas);\n\n// 6. Crear array con solo las descripciones\nconst descripciones = tareas.map(tarea =&gt; tarea.descripcion);\nconsole.log(\"Lista de descripciones:\", descripciones);\n\n// 7. Encontrar la posici\u00f3n de una tarea para actualizarla\nconst posicionLlamada = tareas.findIndex(tarea =&gt; \n  tarea.descripcion.includes(\"Llamar\")\n);\n\nif (posicionLlamada !== -1) {\n  // Copia del array para no modificar el original\n  const tareasActualizadas = [...tareas];\n  // Actualizar la tarea encontrada\n  tareasActualizadas[posicionLlamada].completada = true;\n  console.log(\"Tareas despu\u00e9s de actualizar:\", tareasActualizadas);\n}\n</code></pre>"},{"location":"#casos-de-uso-combinados","title":"Casos de uso combinados","text":"<pre><code>// Ejemplo de e-commerce: filtrar, transformar y calcular\n// 1. Filtrar productos en stock y en oferta\n// 2. Calcular precio con impuesto\n// 3. Obtener total\n\nconst productosEnOferta = productos\n  .filter(p =&gt; p.stock &gt; 0 &amp;&amp; p.precio &lt; 500)  // Solo disponibles y en oferta\n  .map(p =&gt; ({                                 // A\u00f1adir c\u00e1lculos\n    ...p,\n    impuesto: p.precio * 0.19,\n    precioFinal: p.precio * 1.19\n  }))\n  .sort((a, b) =&gt; a.precioFinal - b.precioFinal);  // Ordenar por precio\n\nconst totalImpuestos = productosEnOferta.reduce((sum, p) =&gt; sum + p.impuesto, 0);\nconst totalInventarioOferta = productosEnOferta.reduce(\n  (sum, p) =&gt; sum + (p.precioFinal * p.stock), 0\n);\n</code></pre>"},{"location":"#errores-comunes-y-como-evitarlos_5","title":"Errores comunes y c\u00f3mo evitarlos","text":"<ol> <li> <p>Intentar modificar el array original con m\u00e9todos inmutables <pre><code>// ERROR COM\u00daN\nconst numeros = [1, 2, 3];\nnumeros.map(n =&gt; n * 2);  // No guarda el resultado\nconsole.log(numeros);  // Sigue siendo [1, 2, 3]\n\n// CORRECTO\nconst numeros = [1, 2, 3];\nconst duplicados = numeros.map(n =&gt; n * 2);\nconsole.log(duplicados);  // [2, 4, 6]\n</code></pre></p> </li> <li> <p>Olvidar el return en funciones con cuerpo <pre><code>// ERROR COM\u00daN\nconst filtrados = numeros.filter(n =&gt; {\n  n &gt; 5;  // Sin return, siempre devuelve undefined (evaluado como false)\n});\n\n// CORRECTO\nconst filtrados = numeros.filter(n =&gt; {\n  return n &gt; 5;  // Con return expl\u00edcito\n});\n// O mejor a\u00fan\nconst filtrados = numeros.filter(n =&gt; n &gt; 5);  // Impl\u00edcito sin llaves\n</code></pre></p> </li> <li> <p>Uso incorrecto de <code>forEach</code> para crear un nuevo array <pre><code>// ERROR COM\u00daN\nlet transformados = [];\nnumeros.forEach(n =&gt; {\n  transformados.push(n * 2);  // Mutaci\u00f3n, efectos secundarios\n});\n\n// CORRECTO: Usar map que ya devuelve un array\nconst transformados = numeros.map(n =&gt; n * 2);\n</code></pre></p> </li> <li> <p>Encadenar m\u00e9todos sin considerar rendimiento <pre><code>// ERROR COM\u00daN: M\u00faltiples iteraciones innecesarias\nconst resultado = datos\n  .filter(d =&gt; d.activo)\n  .map(d =&gt; d.valor)\n  .filter(v =&gt; v &gt; 0)\n  .map(v =&gt; v.toFixed(2));\n\n// MEJOR: Consolidar operaciones\nconst resultado = datos\n  .reduce((acc, d) =&gt; {\n    if (d.activo &amp;&amp; d.valor &gt; 0) {\n      acc.push(d.valor.toFixed(2));\n    }\n    return acc;\n  }, []);\n</code></pre></p> </li> <li> <p>Confundir <code>find</code> con <code>filter</code> <pre><code>// ERROR COM\u00daN: Usar find y esperar array\nconst usuarios = [{id: 1, nombre: \"Ana\"}, {id: 2, nombre: \"Luis\"}];\nconst ana = usuarios.find(u =&gt; u.nombre.includes(\"A\"));\nana.forEach(u =&gt; console.log(u));  // Error: ana no es un array\n\n// CORRECTO\n// Usar find para UN elemento\nconst ana = usuarios.find(u =&gt; u.nombre.includes(\"A\"));\n// Usar filter para m\u00faltiples\nconst usuariosConA = usuarios.filter(u =&gt; u.nombre.includes(\"A\"));\n</code></pre></p> </li> </ol>"},{"location":"#limitaciones_5","title":"Limitaciones","text":"<ol> <li> <p>Rendimiento con arrays grandes</p> <ul> <li>Para operaciones complejas con arrays muy grandes, los m\u00e9todos funcionales pueden ser m\u00e1s lentos que los bucles tradicionales</li> <li><code>reduce</code> puede ser especialmente problem\u00e1tico si se usa incorrectamente</li> </ul> </li> <li> <p>Debugging m\u00e1s complejo</p> <ul> <li>Las cadenas de m\u00e9todos pueden ser dif\u00edciles de depurar</li> <li>Dif\u00edcil identificar en qu\u00e9 paso ocurri\u00f3 un error</li> </ul> </li> <li> <p>No modifican el array original</p> <ul> <li>Aunque generalmente es una ventaja, puede requerir asignaciones adicionales cuando se necesita modificaci\u00f3n in-place</li> </ul> </li> <li> <p>Interrupci\u00f3n temprana limitada</p> <ul> <li>A diferencia de los bucles <code>for</code> con <code>break</code>, la mayor\u00eda de m\u00e9todos (excepto <code>some</code>, <code>find</code>, etc.) siempre procesan todo el array</li> </ul> </li> </ol>"},{"location":"#mejores-practicas_5","title":"Mejores pr\u00e1cticas","text":"<ol> <li>Usar <code>map</code> para transformaciones, <code>filter</code> para filtrado, <code>find</code> para b\u00fasquedas</li> <li>Preferir m\u00e9todos de array sobre bucles for/while para c\u00f3digo m\u00e1s declarativo</li> <li>Mantener funciones callback peque\u00f1as y legibles</li> <li>Para operaciones complejas, considerar <code>reduce</code> o separar en pasos</li> <li>Evaluar el rendimiento con arrays muy grandes (&gt;10,000 elementos)</li> <li>Encadenar m\u00e9todos en l\u00edneas separadas para mejor legibilidad</li> </ol>"},{"location":"#ejercicios-de-practica","title":"\ud83d\udcdd Ejercicios de Pr\u00e1ctica","text":""},{"location":"#ejercicio-1-lista-de-estudiantes","title":"Ejercicio 1: Lista de Estudiantes","text":"<pre><code>const estudiantes = [\n    { nombre: \"Ana\", calificacion: 4, asistencia: 90 },\n    { nombre: \"Luis\", calificacion: 3, asistencia: 85 },\n    { nombre: \"Mar\u00eda\", calificacion: 5, asistencia: 95 },\n    { nombre: \"Carlos\", calificacion: 2, asistencia: 80 }\n];\n\n// TODO: \n// 1. Obt\u00e9n solo los nombres de los estudiantes\n// 2. Filtra estudiantes con calificaci\u00f3n mayor a 3\n// 3. Encuentra al estudiante \"Mar\u00eda\"\n// 4. \u00bfTodos tienen asistencia mayor a 75%?\n// 5. \u00bfHay alg\u00fan estudiante reprobado (calificaci\u00f3n &lt; 3)?\n</code></pre>"},{"location":"#ejercicio-2-inventario-de-tienda","title":"Ejercicio 2: Inventario de Tienda","text":"<pre><code>const inventario = [\n    { codigo: \"A001\", nombre: \"Camisa\", precio: 25, stock: 50 },\n    { codigo: \"A002\", nombre: \"Pantal\u00f3n\", precio: 40, stock: 0 },\n    { codigo: \"A003\", nombre: \"Zapatos\", precio: 60, stock: 20 },\n    { codigo: \"A004\", nombre: \"Gorra\", precio: 15, stock: 0 }\n];\n\n// TODO:\n// 1. Crea un array con los precios con 10% de descuento\n// 2. Filtra productos sin stock\n// 3. Encuentra la posici\u00f3n del producto \"Zapatos\"\n// 4. \u00bfTodos los productos cuestan menos de $100?\n// 5. \u00bfHay alg\u00fan producto sin stock?\n</code></pre>"},{"location":"#consejos-finales-para-javascript-moderno","title":"\ud83d\ude80 Consejos finales para JavaScript moderno","text":"<ol> <li> <p>Preferir declaraciones const/let sobre var</p> <ul> <li>Usar const por defecto, let solo cuando sea necesario, evitar var</li> </ul> </li> <li> <p>Adoptar un estilo m\u00e1s funcional y declarativo</p> <ul> <li>Preferir m\u00e9todos de array como map/filter/reduce sobre loops imperativos</li> </ul> </li> <li> <p>Usar destructuring para extraer datos</p> <ul> <li>Especialmente \u00fatil en par\u00e1metros de funci\u00f3n y resultados de APIs</li> </ul> </li> <li> <p>Aprovechar arrow functions para callbacks y funciones peque\u00f1as</p> <ul> <li>Mejoran la legibilidad y solucionan problemas con this</li> </ul> </li> <li> <p>Mantener la inmutabilidad cuando sea posible</p> <ul> <li>Usar spread para crear copias en lugar de modificar objetos o arrays</li> </ul> </li> <li> <p>Utilizar template literals para strings din\u00e1micos</p> <ul> <li>Especialmente \u00fatiles para generar HTML o mensajes con variables</li> </ul> </li> <li> <p>Organizar el c\u00f3digo en m\u00f3dulos ES6</p> <ul> <li>Usar import/export para mejor organizaci\u00f3n y mantenibilidad</li> </ul> </li> <li> <p>Aprovechar valores por defecto en par\u00e1metros</p> <ul> <li>Mejora la robustez sin necesidad de verificaciones adicionales</li> </ul> </li> <li> <p>Considerar async/await para c\u00f3digo as\u00edncrono</p> <ul> <li>M\u00e1s f\u00e1cil de leer y mantener que cadenas de promesas</li> </ul> </li> <li> <p>Pensar en t\u00e9rminos de transformaciones de datos</p> <ul> <li>El flujo de datos moderno se basa en transformar, no en modificar</li> </ul> </li> </ol>"},{"location":"ejemplo_01/","title":"\ud83d\udcbb Ejemplo del mundo real: Lista de tareas (sin React)","text":""},{"location":"ejemplo_01/#que-vamos-a-construir","title":"\ud83c\udfaf \u00bfQu\u00e9 vamos a construir?","text":"<p>Vamos a crear una aplicaci\u00f3n de lista de tareas completamente funcional usando solo HTML y JavaScript moderno. Esta es una aplicaci\u00f3n cl\u00e1sica para aprender porque incluye las operaciones m\u00e1s comunes en desarrollo web:</p> <ul> <li>CREATE (Crear): Agregar nuevas tareas</li> <li>READ (Leer): Mostrar las tareas existentes</li> <li>UPDATE (Actualizar): Marcar tareas como completadas/pendientes</li> <li>UI Din\u00e1mica: Actualizar la interfaz cuando cambian los datos</li> </ul>"},{"location":"ejemplo_01/#vista-previa-del-funcionamiento","title":"\ud83d\uddbc\ufe0f Vista previa del funcionamiento:","text":"<pre><code>\ud83d\udcdd Lista de Tareas\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Nueva tarea...    [Agregar] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u2610 Comprar leche\n\u2611 Hacer ejercicio (tachado)\n\u2610 Estudiar JavaScript\n</code></pre>"},{"location":"ejemplo_01/#estructura-de-archivos-explicada","title":"\ud83d\udcc1 Estructura de archivos explicada","text":"<pre><code>hora-1-js-modern/\n\u251c\u2500\u2500 index.html    # La estructura visual (esqueleto)\n\u2514\u2500\u2500 app.js        # El cerebro de la aplicaci\u00f3n (l\u00f3gica)\n</code></pre> <p>\u00bfPor qu\u00e9 separar HTML y JavaScript? - Separaci\u00f3n de responsabilidades: HTML define QU\u00c9 mostrar, JS define C\u00d3MO funciona - Mantenibilidad: Es m\u00e1s f\u00e1cil encontrar y modificar c\u00f3digo - Buenas pr\u00e1cticas: Es el est\u00e1ndar en desarrollo web profesional</p>"},{"location":"ejemplo_01/#indexhtml-analisis-linea-por-linea","title":"\ud83d\udcc4 index.html - An\u00e1lisis l\u00ednea por l\u00ednea","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\n  &lt;title&gt;Gestor de Tareas&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;\ud83d\udcdd Lista de Tareas&lt;/h1&gt;\n\n  &lt;!-- Formulario para agregar tareas --&gt;\n  &lt;form id=\"taskForm\"&gt;\n    &lt;input \n      type=\"text\" \n      id=\"taskInput\" \n      placeholder=\"Nueva tarea...\" \n      required \n    /&gt;\n    &lt;button type=\"submit\"&gt;Agregar&lt;/button&gt;\n  &lt;/form&gt;\n\n  &lt;!-- Contenedor para la lista de tareas --&gt;\n  &lt;ul id=\"taskList\"&gt;&lt;/ul&gt;\n\n  &lt;!-- Conexi\u00f3n con JavaScript --&gt;\n  &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ejemplo_01/#explicacion-detallada-de-cada-elemento","title":"\ud83d\udd0d Explicaci\u00f3n detallada de cada elemento:","text":""},{"location":"ejemplo_01/#1-metadatos-del-documento","title":"1. Metadatos del documento","text":"<p><pre><code>&lt;meta charset=\"UTF-8\" /&gt;\n</code></pre> - Define la codificaci\u00f3n de caracteres (permite usar \u00f1, tildes, emojis)</p> <p><pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\n</code></pre> - Hace que la p\u00e1gina se vea bien en m\u00f3viles</p>"},{"location":"ejemplo_01/#2-el-formulario","title":"2. El formulario","text":"<p><pre><code>&lt;form id=\"taskForm\"&gt;\n</code></pre> - <code>id=\"taskForm\"</code>: Identificador \u00fanico para acceder desde JavaScript - Los formularios agrupan campos de entrada y manejan el env\u00edo</p>"},{"location":"ejemplo_01/#3-campo-de-entrada","title":"3. Campo de entrada","text":"<p><pre><code>&lt;input type=\"text\" id=\"taskInput\" placeholder=\"Nueva tarea...\" required /&gt;\n</code></pre> - <code>type=\"text\"</code>: Campo de texto simple - <code>id=\"taskInput\"</code>: Para accederlo desde JS - <code>placeholder</code>: Texto de ayuda que desaparece al escribir - <code>required</code>: No permite enviar el formulario vac\u00edo</p>"},{"location":"ejemplo_01/#4-lista-vacia","title":"4. Lista vac\u00eda","text":"<p><pre><code>&lt;ul id=\"taskList\"&gt;&lt;/ul&gt;\n</code></pre> - Inicialmente vac\u00eda - JavaScript agregar\u00e1 <code>&lt;li&gt;</code> din\u00e1micamente aqu\u00ed - <code>&lt;ul&gt;</code> = Unordered List (lista sin numerar)</p>"},{"location":"ejemplo_01/#5-conexion-con-javascript","title":"5. Conexi\u00f3n con JavaScript","text":"<p><pre><code>&lt;script src=\"app.js\"&gt;&lt;/script&gt;\n</code></pre> - IMPORTANTE: Va al final del <code>&lt;body&gt;</code> - Esto asegura que el HTML se cargue ANTES que el JavaScript - Si lo pones en el <code>&lt;head&gt;</code>, el JS no encontrar\u00e1 los elementos</p>"},{"location":"ejemplo_01/#appjs","title":"\ud83d\udcc4 app.js","text":""},{"location":"ejemplo_01/#estructura-general-del-codigo","title":"\ud83c\udfd7\ufe0f Estructura general del c\u00f3digo","text":"<pre><code>// 1. DATOS - Donde guardamos la informaci\u00f3n\nconst tasks = []\n\n// 2. REFERENCIAS - Conexiones con el HTML\nconst form = document.getElementById('taskForm')\nconst input = document.getElementById('taskInput')\nconst list = document.getElementById('taskList')\n\n// 3. EVENTOS - Qu\u00e9 hacer cuando el usuario interact\u00faa\nform.addEventListener('submit', (e) =&gt; {\n  // c\u00f3digo...\n})\n\n// 4. FUNCIONES - Acciones que puede realizar la app\nfunction addTask(title) { /* ... */ }\nfunction toggleTask(id) { /* ... */ }\nfunction renderTasks() { /* ... */ }\n</code></pre>"},{"location":"ejemplo_01/#1-almacenamiento-de-datos","title":"\ud83d\udcca 1. Almacenamiento de datos","text":"<pre><code>const tasks = []\n</code></pre> <p>\u00bfQu\u00e9 es esto? - Un array vac\u00edo que actuar\u00e1 como nuestra \"base de datos\" temporal - Aqu\u00ed guardaremos TODAS las tareas - Al recargar la p\u00e1gina, se pierde (m\u00e1s adelante aprenderemos localStorage)</p> <p>\u00bfC\u00f3mo se ver\u00e1 con datos? <pre><code>// Despu\u00e9s de agregar algunas tareas:\nconst tasks = [\n  { id: 1699123456789, title: \"Comprar leche\", completed: false },\n  { id: 1699123467890, title: \"Hacer ejercicio\", completed: true },\n  { id: 1699123478901, title: \"Estudiar JavaScript\", completed: false }\n]\n</code></pre></p>"},{"location":"ejemplo_01/#2-referencias-al-dom","title":"\ud83d\udd17 2. Referencias al DOM","text":"<pre><code>const form = document.getElementById('taskForm')\nconst input = document.getElementById('taskInput')\nconst list = document.getElementById('taskList')\n</code></pre> <p>\u00bfQu\u00e9 es el DOM? - Document Object Model: Representaci\u00f3n del HTML en JavaScript - <code>document</code>: Objeto que representa toda la p\u00e1gina - <code>getElementById()</code>: Busca un elemento por su atributo <code>id</code></p> <p>Analog\u00eda simple: <pre><code>// Es como tener \"atajos\" a partes del HTML\nconst form = /* referencia a &lt;form id=\"taskForm\"&gt; */\nconst input = /* referencia a &lt;input id=\"taskInput\"&gt; */\nconst list = /* referencia a &lt;ul id=\"taskList\"&gt; */\n</code></pre></p> <p>\u00bfPor qu\u00e9 guardar las referencias? <pre><code>// MAL - Busca el elemento CADA VEZ (lento)\ndocument.getElementById('taskInput').value = ''\ndocument.getElementById('taskInput').focus()\n\n// BIEN - Busca UNA VEZ y reutiliza (r\u00e1pido)\nconst input = document.getElementById('taskInput')\ninput.value = ''\ninput.focus()\n</code></pre></p>"},{"location":"ejemplo_01/#3-manejo-de-eventos","title":"\ud83c\udfae 3. Manejo de eventos","text":"<pre><code>form.addEventListener('submit', (e) =&gt; {\n  e.preventDefault()\n  const title = input.value.trim()\n  if (title !== '') {\n    addTask(title)\n    input.value = ''\n  }\n})\n</code></pre> <p>Desglose l\u00ednea por l\u00ednea:</p>"},{"location":"ejemplo_01/#formaddeventlistenersubmit-e","title":"<code>form.addEventListener('submit', (e) =&gt; {</code>","text":"<ul> <li>addEventListener: \"Escucha\" cuando algo pasa</li> <li>'submit': El evento que escuchamos (enviar formulario)</li> <li>(e) =&gt;: Funci\u00f3n que se ejecuta cuando pasa el evento</li> <li>e: Objeto con informaci\u00f3n del evento</li> </ul>"},{"location":"ejemplo_01/#epreventdefault","title":"<code>e.preventDefault()</code>","text":"<ul> <li>Problema: Por defecto, los formularios recargan la p\u00e1gina</li> <li>Soluci\u00f3n: <code>preventDefault()</code> cancela ese comportamiento</li> <li>Sin esto: La p\u00e1gina se recargar\u00eda y perder\u00edamos todo</li> </ul> <p>Ejemplo visual del flujo: <pre><code>Usuario escribe \"Comprar pan\" \u2192 Presiona Enter o click en \"Agregar\"\n                                            \u2193\n                                    Evento 'submit' se dispara\n                                            \u2193\n                                    Se ejecuta nuestra funci\u00f3n\n                                            \u2193\n                        preventDefault() evita que se recargue la p\u00e1gina\n                                            \u2193\n                            Obtenemos el texto del input\n                                            \u2193\n                            Si no est\u00e1 vac\u00edo, agregamos la tarea\n</code></pre></p>"},{"location":"ejemplo_01/#const-title-inputvaluetrim","title":"<code>const title = input.value.trim()</code>","text":"<ul> <li>input.value: Obtiene el texto que escribi\u00f3 el usuario</li> <li>.trim(): Elimina espacios al inicio y final</li> <li>Ejemplo: <code>\"  Hola  \"</code> \u2192 <code>\"Hola\"</code></li> </ul>"},{"location":"ejemplo_01/#if-title","title":"<code>if (title !== '')</code>","text":"<ul> <li>Verifica que no est\u00e9 vac\u00edo despu\u00e9s de quitar espacios</li> <li>Evita agregar tareas vac\u00edas o solo con espacios</li> </ul>"},{"location":"ejemplo_01/#inputvalue","title":"<code>input.value = ''</code>","text":"<ul> <li>Limpia el campo despu\u00e9s de agregar la tarea</li> <li>Mejor experiencia de usuario (UX)</li> </ul>"},{"location":"ejemplo_01/#4-funcion-addtask-agregar-tareas","title":"\u2795 4. Funci\u00f3n addTask - Agregar tareas","text":"<pre><code>function addTask(title) {\n  const task = {\n    id: Date.now(),\n    title,\n    completed: false\n  }\n  tasks.push(task)\n  renderTasks()\n}\n</code></pre> <p>An\u00e1lisis detallado:</p>"},{"location":"ejemplo_01/#crear-objeto-tarea","title":"Crear objeto tarea","text":"<pre><code>const task = {\n  id: Date.now(),        // Genera ID \u00fanico basado en timestamp\n  title,                 // Shorthand para title: title\n  completed: false       // Todas empiezan como pendientes\n}\n</code></pre> <p>\u00bfPor qu\u00e9 <code>Date.now()</code> para el ID? - Devuelve los milisegundos desde 1970 - Es \u00fanico (pr\u00e1cticamente imposible que se repita) - Ejemplo: <code>1699123456789</code></p> <p>Shorthand property: <pre><code>// Forma larga\nconst task = {\n  title: title\n}\n\n// Forma corta (ES6) - cuando la propiedad y variable tienen el mismo nombre\nconst task = {\n  title\n}\n</code></pre></p>"},{"location":"ejemplo_01/#agregar-al-array","title":"Agregar al array","text":"<p><pre><code>tasks.push(task)\n</code></pre> - <code>push()</code>: Agrega un elemento al FINAL del array - Modifica el array original</p> <p>Ejemplo del estado: <pre><code>// Antes\ntasks = []\n\n// Despu\u00e9s de addTask(\"Comprar pan\")\ntasks = [\n  { id: 1699123456789, title: \"Comprar pan\", completed: false }\n]\n\n// Despu\u00e9s de otra llamada\ntasks = [\n  { id: 1699123456789, title: \"Comprar pan\", completed: false },\n  { id: 1699123467890, title: \"Estudiar\", completed: false }\n]\n</code></pre></p>"},{"location":"ejemplo_01/#5-funcion-toggletask-cambiar-estado","title":"\u2705 5. Funci\u00f3n toggleTask - Cambiar estado","text":"<pre><code>function toggleTask(id) {\n  const task = tasks.find(t =&gt; t.id === id)\n  if (task) task.completed = !task.completed\n  renderTasks()\n}\n</code></pre> <p>Desglose del proceso:</p>"},{"location":"ejemplo_01/#buscar-la-tarea","title":"Buscar la tarea","text":"<p><pre><code>const task = tasks.find(t =&gt; t.id === id)\n</code></pre> - <code>find()</code>: Busca el PRIMER elemento que cumple la condici\u00f3n - <code>t =&gt; t.id === id</code>: Funci\u00f3n que retorna true cuando encuentra la tarea - Si no encuentra nada, devuelve <code>undefined</code></p> <p>Ejemplo paso a paso: <pre><code>// Si toggleTask(1699123456789) y tasks es:\ntasks = [\n  { id: 1699123456789, title: \"Comprar pan\", completed: false },\n  { id: 1699123467890, title: \"Estudiar\", completed: true }\n]\n\n// find() revisa cada elemento:\n// 1. \u00bf1699123456789 === 1699123456789? S\u00cd \u2192 Devuelve ese objeto\n</code></pre></p>"},{"location":"ejemplo_01/#cambiar-el-estado","title":"Cambiar el estado","text":"<p><pre><code>if (task) task.completed = !task.completed\n</code></pre> - <code>if (task)</code>: Solo si encontr\u00f3 la tarea - <code>!task.completed</code>: Invierte el valor booleano   - Si era <code>true</code> \u2192 pasa a <code>false</code>   - Si era <code>false</code> \u2192 pasa a <code>true</code></p> <p>Tabla de verdad del operador NOT (!): | Valor original | !Valor | |---------------|--------| | true          | false  | | false         | true   |</p>"},{"location":"ejemplo_01/#6-funcion-rendertasks-mostrar-en-pantalla","title":"\ud83c\udfa8 6. Funci\u00f3n renderTasks - Mostrar en pantalla","text":"<pre><code>function renderTasks() {\n  list.innerHTML = ''\n  tasks.forEach(({ id, title, completed }) =&gt; {\n    const li = document.createElement('li')\n    li.innerHTML = `\n      &lt;input type=\"checkbox\" ${completed ? 'checked' : ''} onchange=\"toggleTask(${id})\" /&gt;\n      &lt;span style=\"text-decoration: ${completed ? 'line-through' : 'none'}\"&gt;${title}&lt;/span&gt;\n    `\n    list.appendChild(li)\n  })\n}\n</code></pre> <p>Esta es la funci\u00f3n m\u00e1s compleja. Vamos parte por parte:</p>"},{"location":"ejemplo_01/#limpiar-la-lista","title":"Limpiar la lista","text":"<p><pre><code>list.innerHTML = ''\n</code></pre> - Borra TODO el contenido HTML dentro de <code>&lt;ul&gt;</code> - Empezamos desde cero cada vez que renderizamos</p> <p>\u00bfPor qu\u00e9 limpiar todo? - Es m\u00e1s simple que actualizar elementos individuales - Evita duplicados - Garantiza que la vista refleje exactamente el array</p>"},{"location":"ejemplo_01/#recorrer-las-tareas","title":"Recorrer las tareas","text":"<p><pre><code>tasks.forEach(({ id, title, completed }) =&gt; {\n</code></pre> - <code>forEach</code>: Ejecuta una funci\u00f3n para CADA elemento - Desestructuraci\u00f3n en el par\u00e1metro (extrae las propiedades)</p> <p>Equivalente sin desestructuraci\u00f3n: <pre><code>tasks.forEach((task) =&gt; {\n  const id = task.id\n  const title = task.title\n  const completed = task.completed\n  // ...\n})\n</code></pre></p>"},{"location":"ejemplo_01/#crear-elemento-html","title":"Crear elemento HTML","text":"<p><pre><code>const li = document.createElement('li')\n</code></pre> - Crea un nuevo elemento <code>&lt;li&gt;</code> en memoria - A\u00fan no est\u00e1 en la p\u00e1gina</p>"},{"location":"ejemplo_01/#construir-el-contenido","title":"Construir el contenido","text":"<pre><code>li.innerHTML = `\n  &lt;input type=\"checkbox\" ${completed ? 'checked' : ''} onchange=\"toggleTask(${id})\" /&gt;\n  &lt;span style=\"text-decoration: ${completed ? 'line-through' : 'none'}\"&gt;${title}&lt;/span&gt;\n`\n</code></pre> <p>An\u00e1lisis del template literal:</p> <ol> <li>Checkbox din\u00e1mico: <pre><code>${completed ? 'checked' : ''}\n</code></pre></li> <li>Si <code>completed</code> es true \u2192 agrega atributo <code>checked</code></li> <li>Si es false \u2192 no agrega nada</li> </ol> <p>Resultado HTML: <pre><code>&lt;!-- Tarea completada --&gt;\n&lt;input type=\"checkbox\" checked onchange=\"toggleTask(1699123456789)\" /&gt;\n\n&lt;!-- Tarea pendiente --&gt;\n&lt;input type=\"checkbox\" onchange=\"toggleTask(1699123456789)\" /&gt;\n</code></pre></p> <ol> <li>Evento onchange: <pre><code>onchange=\"toggleTask(${id})\"\n</code></pre></li> <li>Cuando el usuario marca/desmarca el checkbox</li> <li> <p>Llama a <code>toggleTask</code> con el ID de esa tarea</p> </li> <li> <p>Estilo condicional: <pre><code>style=\"text-decoration: ${completed ? 'line-through' : 'none'}\"\n</code></pre></p> </li> <li>Tarea completada \u2192 texto tachado</li> <li>Tarea pendiente \u2192 texto normal</li> </ol>"},{"location":"ejemplo_01/#agregar-a-la-pagina","title":"Agregar a la p\u00e1gina","text":"<p><pre><code>list.appendChild(li)\n</code></pre> - <code>appendChild</code>: Agrega el <code>&lt;li&gt;</code> al final de la lista - Ahora S\u00cd aparece en la p\u00e1gina</p>"},{"location":"ejemplo_01/#flujo-completo-de-la-aplicacion","title":"\ud83d\udd04 Flujo completo de la aplicaci\u00f3n","text":""},{"location":"ejemplo_01/#ejemplo-agregar-una-tarea","title":"Ejemplo: Agregar una tarea","text":"<pre><code>1. Usuario escribe \"Comprar leche\" y presiona Enter\n                        \u2193\n2. Se dispara evento 'submit' del formulario\n                        \u2193\n3. preventDefault() evita recarga de p\u00e1gina\n                        \u2193\n4. Se obtiene el texto: \"Comprar leche\"\n                        \u2193\n5. addTask(\"Comprar leche\") se ejecuta:\n   - Crea objeto: { id: 1699123456789, title: \"Comprar leche\", completed: false }\n   - Lo agrega al array tasks\n   - Llama a renderTasks()\n                        \u2193\n6. renderTasks() se ejecuta:\n   - Limpia el &lt;ul&gt;\n   - Para cada tarea en el array:\n     - Crea un &lt;li&gt;\n     - Le pone checkbox y texto\n     - Lo agrega al &lt;ul&gt;\n                        \u2193\n7. La tarea aparece en pantalla\n</code></pre>"},{"location":"ejemplo_01/#ejemplo-marcar-tarea-como-completada","title":"Ejemplo: Marcar tarea como completada","text":"<pre><code>1. Usuario hace click en el checkbox de \"Comprar leche\"\n                        \u2193\n2. Se ejecuta onchange=\"toggleTask(1699123456789)\"\n                        \u2193\n3. toggleTask busca la tarea con ese ID\n                        \u2193\n4. Cambia completed de false a true\n                        \u2193\n5. Llama a renderTasks()\n                        \u2193\n6. renderTasks() redibuja toda la lista\n   - Ahora el checkbox est\u00e1 marcado\n   - El texto aparece tachado\n</code></pre>"},{"location":"ejemplo_01/#problemas-comunes-y-soluciones","title":"\ud83d\udc1b Problemas comunes y soluciones","text":""},{"location":"ejemplo_01/#1-no-funciona-nada","title":"1. \"No funciona nada\"","text":"<ul> <li>Causa: El script est\u00e1 en el <code>&lt;head&gt;</code></li> <li>Soluci\u00f3n: Moverlo al final del <code>&lt;body&gt;</code> o usar <code>defer</code></li> </ul>"},{"location":"ejemplo_01/#2-se-recarga-la-pagina-al-agregar-tarea","title":"2. \"Se recarga la p\u00e1gina al agregar tarea\"","text":"<ul> <li>Causa: Falta <code>e.preventDefault()</code></li> <li>Soluci\u00f3n: Agregarlo al inicio del evento submit</li> </ul>"},{"location":"ejemplo_01/#3-el-checkbox-no-funciona","title":"3. \"El checkbox no funciona\"","text":"<ul> <li>Causa: Error en el nombre de la funci\u00f3n o ID incorrecto</li> <li>Soluci\u00f3n: Verificar que <code>toggleTask</code> est\u00e9 definida globalmente</li> </ul>"},{"location":"ejemplo_01/#4-se-agregan-tareas-vacias","title":"4. \"Se agregan tareas vac\u00edas\"","text":"<ul> <li>Causa: No se valida el input</li> <li>Soluci\u00f3n: Usar <code>.trim()</code> y verificar que no est\u00e9 vac\u00edo</li> </ul>"},{"location":"ejemplo_01/#conceptos-clave-aplicados","title":"\ud83c\udfaf Conceptos clave aplicados","text":"<p>Este ejemplo utiliza TODOS los conceptos de JavaScript moderno que aprendimos:</p> <ol> <li><code>const</code> y <code>let</code>: Para declarar variables</li> <li>Arrow functions: En eventos y callbacks</li> <li>Destructuring: En el forEach de renderTasks</li> <li>Template literals: Para construir HTML din\u00e1mico</li> <li>M\u00e9todos de arrays: <code>find()</code>, <code>forEach()</code>, <code>push()</code></li> <li>Operador ternario: Para condicionales en l\u00ednea</li> </ol>"},{"location":"ejemplo_02/","title":"\ud83d\udcdd Lista de Tareas con React","text":""},{"location":"ejemplo_02/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>\u00bfQu\u00e9 vamos a construir?</li> <li>Configuraci\u00f3n inicial paso a paso</li> <li>Estructura del proyecto explicada</li> <li>Construyendo cada archivo</li> <li>Conceptos clave de React aplicados</li> <li>Flujo de datos completo</li> <li>Ejercicios pr\u00e1cticos</li> <li>Errores comunes y soluciones</li> </ol>"},{"location":"ejemplo_02/#que-vamos-a-construir","title":"\ud83c\udfaf \u00bfQu\u00e9 vamos a construir?","text":""},{"location":"ejemplo_02/#vista-previa-del-resultado-final","title":"Vista previa del resultado final","text":"<pre><code>\ud83d\udcdd Lista de Tareas\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2022 Estudiar React\n\u2022 Hacer ejercicio (tachado)\n\u2022 Leer documentaci\u00f3n\n</code></pre>"},{"location":"ejemplo_02/#caracteristicas-de-esta-version","title":"Caracter\u00edsticas de esta versi\u00f3n","text":"<ul> <li>\u2705 Versi\u00f3n est\u00e1tica: Sin botones ni interacciones (por ahora)</li> <li>\u2705 Componentes modulares: C\u00f3digo organizado y reutilizable</li> <li>\u2705 Props en acci\u00f3n: Pasando datos entre componentes</li> <li>\u2705 Renderizado condicional: Estilos diferentes seg\u00fan el estado</li> </ul>"},{"location":"ejemplo_02/#por-que-empezar-con-una-version-estatica","title":"Por qu\u00e9 empezar con una versi\u00f3n est\u00e1tica","text":"<ol> <li>Enfoque en la estructura: Primero dise\u00f1amos, luego agregamos funcionalidad</li> <li>Menos complejidad: Sin estado ni eventos para confundirnos</li> <li>Base s\u00f3lida: Sobre esto agregaremos interactividad despu\u00e9s</li> </ol>"},{"location":"ejemplo_02/#configuracion-inicial","title":"\ud83d\ude80 Configuraci\u00f3n Inicial","text":""},{"location":"ejemplo_02/#1-crear-el-proyecto-con-vite","title":"1. Crear el proyecto con Vite","text":"<pre><code>npm create vite@latest tarea-react -- --template react\n</code></pre> <p>Desglose del comando: - <code>npm create vite@latest</code>: Usa la \u00faltima versi\u00f3n de Vite - <code>tarea-react</code>: Nombre de tu proyecto - <code>--</code>: Separa el nombre de las opciones - <code>--template react</code>: Usa la plantilla de React (no vanilla JS)</p>"},{"location":"ejemplo_02/#2-entrar-al-proyecto-e-instalar","title":"2. Entrar al proyecto e instalar","text":"<pre><code>cd tarea-react\nnpm install\n</code></pre> <p>\u00bfQu\u00e9 hace <code>npm install</code>? - Lee el archivo <code>package.json</code> - Descarga React, ReactDOM y otras dependencias - Las guarda en <code>node_modules/</code> - Crea <code>package-lock.json</code> con versiones exactas</p>"},{"location":"ejemplo_02/#3-iniciar-el-servidor-de-desarrollo","title":"3. Iniciar el servidor de desarrollo","text":"<pre><code>npm run dev\n</code></pre> <p>Resultado esperado: <pre><code>  VITE v4.4.0  ready in 500 ms\n\n  \u279c  Local:   http://localhost:5173/\n  \u279c  Network: use --host to expose\n</code></pre></p>"},{"location":"ejemplo_02/#4-limpiar-archivos-innecesarios","title":"4. Limpiar archivos innecesarios","text":"<p>Antes de empezar, limpiemos el proyecto de Vite:</p> <pre><code># Eliminar archivos de ejemplo\nrm src/App.css\nrm src/index.css\nrm src/assets/react.svg\nrm public/vite.svg\n</code></pre>"},{"location":"ejemplo_02/#estructura-del-proyecto","title":"\ud83d\udcc1 Estructura del Proyecto","text":""},{"location":"ejemplo_02/#vista-general","title":"Vista general","text":"<pre><code>tarea-react/\n\u251c\u2500\u2500 \ud83d\udcc4 index.html          # Punto de entrada HTML\n\u251c\u2500\u2500 \ud83d\udcc1 public/             # Archivos est\u00e1ticos\n\u251c\u2500\u2500 \ud83d\udcc1 src/                # C\u00f3digo fuente\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 main.jsx       # Punto de entrada React\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 App.jsx        # Componente principal\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 components/    # Componentes reutilizables\n\u2502       \u2514\u2500\u2500 \ud83d\udcc4 TaskItem.jsx\n\u251c\u2500\u2500 \ud83d\udcc4 package.json        # Configuraci\u00f3n del proyecto\n\u2514\u2500\u2500 \ud83d\udcc4 vite.config.js      # Configuraci\u00f3n de Vite\n</code></pre>"},{"location":"ejemplo_02/#por-que-esta-estructura","title":"\u00bfPor qu\u00e9 esta estructura?","text":"<ol> <li>Separaci\u00f3n de responsabilidades: Cada archivo tiene un prop\u00f3sito</li> <li>Escalabilidad: F\u00e1cil agregar m\u00e1s componentes</li> <li>Convenci\u00f3n est\u00e1ndar: Otros desarrolladores la reconocer\u00e1n</li> </ol>"},{"location":"ejemplo_02/#construyendo-cada-archivo","title":"\ud83d\udee0\ufe0f Construyendo Cada Archivo","text":""},{"location":"ejemplo_02/#1-indexhtml-la-base-html","title":"\ud83d\udcc4 1. index.html - La base HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Lista de Tareas&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script type=\"module\" src=\"/src/main.jsx\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n l\u00ednea por l\u00ednea:</p> <ol> <li><code>&lt;!DOCTYPE html&gt;</code>: Le dice al navegador que es HTML5</li> <li><code>&lt;html lang=\"es\"&gt;</code>: Idioma espa\u00f1ol para accesibilidad</li> <li><code>&lt;meta charset=\"UTF-8\"&gt;</code>: Soporta caracteres especiales (\u00f1, \u00e1, \u00e9, etc.)</li> <li><code>&lt;meta name=\"viewport\"...</code>: Dise\u00f1o responsive para m\u00f3viles</li> <li><code>&lt;title&gt;</code>: Lo que aparece en la pesta\u00f1a del navegador</li> <li><code>&lt;div id=\"root\"&gt;</code>: Contenedor vac\u00edo donde React vivir\u00e1</li> <li><code>&lt;script type=\"module\"...</code>: Carga main.jsx como m\u00f3dulo ES6</li> </ol>"},{"location":"ejemplo_02/#2-mainjsx-el-punto-de-entrada","title":"\ud83d\udcc4 2. main.jsx - El punto de entrada","text":"<pre><code>import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  &lt;React.StrictMode&gt;\n    &lt;App /&gt;\n  &lt;/React.StrictMode&gt;\n)\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <pre><code>// 1. Importaciones necesarias\nimport React from 'react'           // La librer\u00eda React\nimport ReactDOM from 'react-dom/client'  // Para interactuar con el DOM\nimport App from './App'             // Nuestro componente principal\n\n// 2. Encontrar el div root\nconst rootElement = document.getElementById('root')\n\n// 3. Crear una ra\u00edz React\nconst root = ReactDOM.createRoot(rootElement)\n\n// 4. Renderizar la app\nroot.render(\n  &lt;React.StrictMode&gt;    {/* Modo estricto para desarrollo */}\n    &lt;App /&gt;             {/* Nuestro componente principal */}\n  &lt;/React.StrictMode&gt;\n)\n</code></pre> <p>\u00bfQu\u00e9 es StrictMode? - Herramienta de desarrollo - Detecta problemas potenciales - No afecta la producci\u00f3n - Puede causar doble renderizado en desarrollo (normal)</p>"},{"location":"ejemplo_02/#3-appjsx-el-componente-principal","title":"\ud83d\udcc4 3. App.jsx - El componente principal","text":"<pre><code>import TaskItem from './components/TaskItem'\n\nfunction App() {\n  const tareas = [\n    { id: 1, titulo: \"Estudiar React\", completado: false },\n    { id: 2, titulo: \"Hacer ejercicio\", completado: true },\n    { id: 3, titulo: \"Leer documentaci\u00f3n\", completado: false }\n  ]\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\ud83d\udcdd Lista de Tareas&lt;/h1&gt;\n      &lt;ul&gt;\n        {tareas.map((tarea) =&gt; (\n          &lt;TaskItem\n            key={tarea.id}\n            titulo={tarea.titulo}\n            completado={tarea.completado}\n          /&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>Desglose conceptual:</p>"},{"location":"ejemplo_02/#1-los-datos-array-de-tareas","title":"1. Los datos (array de tareas)","text":"<pre><code>const tareas = [\n  { \n    id: 1,                          // Identificador \u00fanico\n    titulo: \"Estudiar React\",       // Texto de la tarea\n    completado: false               // Estado: pendiente\n  },\n  // ... m\u00e1s tareas\n]\n</code></pre>"},{"location":"ejemplo_02/#2-el-metodo-map","title":"2. El m\u00e9todo map()","text":"<pre><code>{tareas.map((tarea) =&gt; (\n  &lt;TaskItem ... /&gt;\n))}\n</code></pre> <p>\u00bfQu\u00e9 hace map? - Recorre cada elemento del array - Transforma cada objeto en un componente - Devuelve un nuevo array de componentes</p> <p>Visualizaci\u00f3n del proceso: <pre><code>Array de datos          \u2192  map()  \u2192     Array de componentes\n[                                        [\n  {id:1, titulo:\"...\"}      \u2192            &lt;TaskItem ... /&gt;\n  {id:2, titulo:\"...\"}      \u2192            &lt;TaskItem ... /&gt;\n  {id:3, titulo:\"...\"}      \u2192            &lt;TaskItem ... /&gt;\n]                                        ]\n</code></pre></p>"},{"location":"ejemplo_02/#3-la-prop-key","title":"3. La prop key","text":"<pre><code>key={tarea.id}\n</code></pre> <p>\u00bfPor qu\u00e9 necesitamos key? - React la usa para identificar elementos \u00fanicos - Optimiza el renderizado - Evita bugs al reordenar listas - DEBE ser \u00fanica entre hermanos</p> <p>Error com\u00fan sin key: <pre><code>Warning: Each child in a list should have a unique \"key\" prop.\n</code></pre></p>"},{"location":"ejemplo_02/#4-taskitemjsx-componente-de-tarea","title":"\ud83d\udcc4 4. TaskItem.jsx - Componente de tarea","text":"<pre><code>function TaskItem({ titulo, completado }) {\n  return (\n    &lt;li&gt;\n      &lt;span style={{ textDecoration: completado ? 'line-through' : 'none' }}&gt;\n        {titulo}\n      &lt;/span&gt;\n    &lt;/li&gt;\n  )\n}\n\nexport default TaskItem\n</code></pre> <p>Conceptos aplicados:</p>"},{"location":"ejemplo_02/#1-destructuring-de-props","title":"1. Destructuring de props","text":"<pre><code>// Recibimos props desestructuradas\nfunction TaskItem({ titulo, completado }) {\n  // En lugar de:\n  // function TaskItem(props) {\n  //   props.titulo\n  //   props.completado\n}\n</code></pre>"},{"location":"ejemplo_02/#2-estilo-condicional","title":"2. Estilo condicional","text":"<pre><code>style={{ textDecoration: completado ? 'line-through' : 'none' }}\n</code></pre> <p>Desglose del operador ternario: <pre><code>completado ? 'line-through' : 'none'\n//   \u2191              \u2191            \u2191\n// condici\u00f3n    si true      si false\n</code></pre></p> <p>Casos: - Si <code>completado = true</code> \u2192 texto tachado - Si <code>completado = false</code> \u2192 texto normal</p>"},{"location":"ejemplo_02/#3-estilos-inline-en-react","title":"3. Estilos inline en React","text":"<pre><code>// HTML normal\n&lt;span style=\"text-decoration: line-through\"&gt;\n\n// React JSX (objeto JavaScript)\n&lt;span style={{ textDecoration: 'line-through' }}&gt;\n</code></pre> <p>Nota las diferencias: - Doble llave <code>{{ }}</code> - camelCase: <code>text-decoration</code> \u2192 <code>textDecoration</code> - Valores como strings: <code>'line-through'</code></p>"},{"location":"ejemplo_02/#flujo-de-datos-completo","title":"\ud83d\udd04 Flujo de Datos Completo","text":""},{"location":"ejemplo_02/#visualizacion-del-flujo","title":"Visualizaci\u00f3n del flujo","text":"<pre><code>App.jsx (Padre)\n    \u2193\ntiene array de tareas\n    \u2193\nmap() sobre cada tarea\n    \u2193\n&lt;TaskItem                    \u2190 Crea componente hijo\n  key={1}\n  titulo=\"Estudiar React\"    \u2190 Pasa props\n  completado={false}\n/&gt;\n    \u2193\nTaskItem.jsx (Hijo)\n    \u2193\nrecibe props\n    \u2193\nrenderiza &lt;li&gt; con estilo condicional\n</code></pre>"},{"location":"ejemplo_02/#diagrama-de-componentes","title":"Diagrama de componentes","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           App                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  &lt;h1&gt;Lista de Tareas&lt;/h1&gt; \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502         &lt;ul&gt;              \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502  \u2502\n\u2502  \u2502  \u2502   TaskItem #1     \u2502    \u2502  \u2502\n\u2502  \u2502  \u2502 Estudiar React    \u2502    \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502  \u2502\n\u2502  \u2502  \u2502   TaskItem #2     \u2502    \u2502  \u2502\n\u2502  \u2502  \u2502 Hacer ejercicio   \u2502    \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502  \u2502\n\u2502  \u2502  \u2502   TaskItem #3     \u2502    \u2502  \u2502\n\u2502  \u2502  \u2502 Leer docs         \u2502    \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ejemplo_02/#conceptos-clave-de-react-aplicados","title":"\ud83c\udfaf Conceptos Clave de React Aplicados","text":""},{"location":"ejemplo_02/#1-componentes-funcionales","title":"1. Componentes Funcionales","text":"<pre><code>function TaskItem(props) {\n  return &lt;elemento&gt;\n}\n</code></pre> <ul> <li>Son funciones que retornan JSX</li> <li>Reciben props como par\u00e1metro</li> <li>No tienen estado (en esta versi\u00f3n)</li> </ul>"},{"location":"ejemplo_02/#2-props-propiedades","title":"2. Props (Propiedades)","text":"<pre><code>// Padre env\u00eda\n&lt;TaskItem titulo=\"Mi tarea\" completado={true} /&gt;\n\n// Hijo recibe\nfunction TaskItem({ titulo, completado }) {\n  // Usa titulo y completado\n}\n</code></pre> <p>Caracter\u00edsticas de las props: - Son de solo lectura (inmutables) - Fluyen de padre a hijo - Pueden ser cualquier tipo de dato</p>"},{"location":"ejemplo_02/#3-jsx-y-expresiones","title":"3. JSX y Expresiones","text":"<pre><code>{/* Esto es un comentario en JSX */}\n\n{/* Expresi\u00f3n JavaScript */}\n&lt;h1&gt;Tengo {tareas.length} tareas&lt;/h1&gt;\n\n{/* Renderizado condicional */}\n{completado &amp;&amp; &lt;span&gt;\u2713&lt;/span&gt;}\n\n{/* Mapeo de arrays */}\n{tareas.map(t =&gt; &lt;TaskItem {...t} /&gt;)}\n</code></pre>"},{"location":"ejemplo_02/#4-listas-y-keys","title":"4. Listas y Keys","text":"<pre><code>{items.map(item =&gt; (\n  &lt;Component key={item.id} /&gt;\n))}\n</code></pre> <p>Reglas para keys: - \u00danicas entre hermanos - Estables (no usar Math.random()) - No usar \u00edndice si el orden puede cambiar</p>"},{"location":"ejemplo_02/#ejercicios-practicos","title":"\ud83d\udcbb Ejercicios Pr\u00e1cticos","text":""},{"location":"ejemplo_02/#ejercicio-1-crear-archivo-de-datos","title":"Ejercicio 1: Crear archivo de datos","text":"<p>Crear <code>src/data.js</code>: <pre><code>export const tareas = [\n  { id: 1, titulo: \"Estudiar React\", completado: false },\n  { id: 2, titulo: \"Hacer ejercicio\", completado: true },\n  { id: 3, titulo: \"Leer documentaci\u00f3n\", completado: false },\n  // Agrega m\u00e1s tareas aqu\u00ed\n  { id: 4, titulo: \"Practicar c\u00f3digo\", completado: false },\n  { id: 5, titulo: \"Ver tutoriales\", completado: true }\n]\n</code></pre></p> <p>Modificar <code>App.jsx</code>: <pre><code>import TaskItem from './components/TaskItem'\nimport { tareas } from './data'  // Nueva importaci\u00f3n\n\nfunction App() {\n  // Ya no necesitas const tareas = [...]\n\n  return (\n    // ... resto del c\u00f3digo igual\n  )\n}\n</code></pre></p>"},{"location":"ejemplo_02/#ejercicio-2-agregar-contador-de-tareas","title":"Ejercicio 2: Agregar contador de tareas","text":"<pre><code>function App() {\n  const tareasCompletadas = tareas.filter(t =&gt; t.completado).length\n  const tareasPendientes = tareas.filter(t =&gt; !t.completado).length\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\ud83d\udcdd Lista de Tareas&lt;/h1&gt;\n      &lt;p&gt;\n        Completadas: {tareasCompletadas} | \n        Pendientes: {tareasPendientes}\n      &lt;/p&gt;\n      {/* ... resto del c\u00f3digo */}\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"ejemplo_02/#ejercicio-3-agregar-iconos-de-estado","title":"Ejercicio 3: Agregar iconos de estado","text":"<pre><code>function TaskItem({ titulo, completado }) {\n  return (\n    &lt;li&gt;\n      &lt;span&gt;{completado ? '\u2705' : '\u2b55'}&lt;/span&gt;\n      &lt;span style={{ \n        textDecoration: completado ? 'line-through' : 'none',\n        marginLeft: '8px'\n      }}&gt;\n        {titulo}\n      &lt;/span&gt;\n    &lt;/li&gt;\n  )\n}\n</code></pre>"},{"location":"ejemplo_02/#ejercicio-4-anadir-categorias","title":"Ejercicio 4: A\u00f1adir categor\u00edas","text":"<pre><code>// En data.js\nexport const tareas = [\n  { \n    id: 1, \n    titulo: \"Estudiar React\", \n    completado: false,\n    categoria: \"estudio\" \n  },\n  // ... m\u00e1s tareas con categor\u00edas\n]\n\n// En TaskItem.jsx\nfunction TaskItem({ titulo, completado, categoria }) {\n  const coloresCategorias = {\n    estudio: '#3498db',\n    ejercicio: '#2ecc71',\n    trabajo: '#e74c3c'\n  }\n\n  return (\n    &lt;li&gt;\n      &lt;span style={{ \n        color: coloresCategorias[categoria] || '#000',\n        marginRight: '8px'\n      }}&gt;\n        \u25cf\n      &lt;/span&gt;\n      {/* ... resto del componente */}\n    &lt;/li&gt;\n  )\n}\n</code></pre>"},{"location":"ejemplo_02/#errores-comunes-y-soluciones","title":"\u274c Errores Comunes y Soluciones","text":""},{"location":"ejemplo_02/#error-1-cannot-read-property-map-of-undefined","title":"Error 1: \"Cannot read property 'map' of undefined\"","text":"<p>Causa: <code>tareas</code> no est\u00e1 definido o es null</p> <p>Soluci\u00f3n: <pre><code>// Agregar valor por defecto\nconst tareas = datosExternos || []\n\n// O verificar antes de mapear\n{tareas &amp;&amp; tareas.map(...)}\n</code></pre></p>"},{"location":"ejemplo_02/#error-2-each-child-should-have-unique-key","title":"Error 2: \"Each child should have unique key\"","text":"<p>Causa: Falta la prop <code>key</code> en elementos de lista</p> <p>Soluci\u00f3n: <pre><code>{tareas.map((tarea) =&gt; (\n  &lt;TaskItem\n    key={tarea.id}  // \u2190 Siempre agregar key \u00fanica\n    {...tarea}\n  /&gt;\n))}\n</code></pre></p>"},{"location":"ejemplo_02/#error-3-module-not-found","title":"Error 3: \"Module not found\"","text":"<p>Causa: Ruta de importaci\u00f3n incorrecta</p> <p>Soluci\u00f3n: <pre><code>// \u274c Mal\nimport TaskItem from 'TaskItem'\nimport TaskItem from './TaskItem'\n\n// \u2705 Bien\nimport TaskItem from './components/TaskItem'\n</code></pre></p>"},{"location":"ejemplo_02/#error-4-cambios-no-se-reflejan","title":"Error 4: Cambios no se reflejan","text":"<p>Causa: Servidor no est\u00e1 corriendo o necesita reinicio</p> <p>Soluci\u00f3n: 1. Verifica que el terminal muestre \"ready\" 2. Guarda todos los archivos (Ctrl+S) 3. Si persiste, reinicia con Ctrl+C y <code>npm run dev</code></p>"},{"location":"ejemplo_02/#proximos-pasos","title":"\ud83d\ude80 Pr\u00f3ximos Pasos","text":"<p>Esta versi\u00f3n est\u00e1tica es la base perfecta para:</p> <ol> <li>Agregar interactividad (useState)</li> <li>Marcar tareas como completadas</li> <li>Agregar nuevas tareas</li> <li> <p>Eliminar tareas</p> </li> <li> <p>Persistencia de datos (localStorage)</p> </li> <li>Guardar tareas al cerrar</li> <li> <p>Cargar tareas al abrir</p> </li> <li> <p>Filtros y b\u00fasqueda</p> </li> <li>Mostrar solo completadas/pendientes</li> <li> <p>Buscar por t\u00edtulo</p> </li> <li> <p>Estilos mejorados</p> </li> <li>CSS modules o styled-components</li> <li>Animaciones con Framer Motion</li> <li>Dise\u00f1o responsive</li> </ol>"},{"location":"ejemplo_02/#resumen","title":"\ud83c\udfaf Resumen","text":"<p>Has aprendido a:</p> <ul> <li>\u2705 Estructurar una aplicaci\u00f3n React</li> <li>\u2705 Crear componentes reutilizables</li> <li>\u2705 Pasar datos con props</li> <li>\u2705 Renderizar listas con map()</li> <li>\u2705 Aplicar estilos condicionales</li> <li>\u2705 Organizar c\u00f3digo de forma profesional</li> </ul>"},{"location":"ejemplo_03/","title":"\ud83d\udcdd Lista de Tareas Din\u00e1mica","text":""},{"location":"ejemplo_03/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>Vista general del proyecto</li> <li>Arquitectura y flujo de datos</li> <li>Construyendo App.jsx paso a paso</li> <li>Construyendo TaskForm.jsx</li> <li>Construyendo TaskItem.jsx</li> <li>Flujo completo de la aplicaci\u00f3n</li> <li>Debugging y herramientas</li> <li>Extensiones y mejoras</li> <li>Errores comunes</li> </ol>"},{"location":"ejemplo_03/#vista-general-del-proyecto","title":"\ud83c\udfaf Vista General del Proyecto","text":""},{"location":"ejemplo_03/#que-vamos-a-construir","title":"\u00bfQu\u00e9 vamos a construir?","text":"<p>Una aplicaci\u00f3n de lista de tareas completamente funcional que: - \u2705 Permite agregar nuevas tareas - \u2705 Muestra todas las tareas en una lista - \u2705 Maneja estado con <code>useState</code> - \u2705 Usa formularios controlados - \u2705 Implementa comunicaci\u00f3n entre componentes</p>"},{"location":"ejemplo_03/#vista-previa-del-resultado","title":"Vista previa del resultado","text":"<pre><code>\ud83d\udcdd Lista de Tareas\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [Nueva tarea...] [Agregar]      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u2022 Comprar leche\n\u2022 Estudiar React\n\u2022 Hacer ejercicio\n</code></pre>"},{"location":"ejemplo_03/#diferencias-con-la-version-estatica","title":"Diferencias con la versi\u00f3n est\u00e1tica","text":"Versi\u00f3n Est\u00e1tica (Hora 2) Versi\u00f3n Din\u00e1mica (Hora 3) Datos hardcodeados Estado con <code>useState</code> Sin interacci\u00f3n Formulario funcional Props de solo lectura Props con funciones Sin re-renderizado Re-render autom\u00e1tico"},{"location":"ejemplo_03/#arquitectura-y-flujo-de-datos","title":"\ud83c\udfd7\ufe0f Arquitectura y Flujo de Datos","text":""},{"location":"ejemplo_03/#estructura-de-componentes","title":"Estructura de componentes","text":"<pre><code>App (Componente padre)\n\u2502\n\u251c\u2500\u2500 Estado: tareas = []\n\u251c\u2500\u2500 Funci\u00f3n: agregarTarea()\n\u2502\n\u251c\u2500\u2500 TaskForm (Componente hijo 1)\n\u2502   \u251c\u2500\u2500 Props: onAdd={agregarTarea}\n\u2502   \u251c\u2500\u2500 Estado local: titulo = \"\"\n\u2502   \u2514\u2500\u2500 Emite: nueva tarea hacia arriba\n\u2502\n\u2514\u2500\u2500 TaskItem \u00d7 N (Componente hijo 2)\n    \u2514\u2500\u2500 Props: titulo, completado\n</code></pre>"},{"location":"ejemplo_03/#diagrama-de-flujo-de-datos","title":"Diagrama de flujo de datos","text":"<pre><code>1. Usuario escribe en TaskForm\n           \u2193\n2. TaskForm actualiza su estado local\n           \u2193\n3. Usuario hace clic en \"Agregar\"\n           \u2193\n4. TaskForm llama a onAdd (agregarTarea)\n           \u2193\n5. App actualiza el array de tareas\n           \u2193\n6. React re-renderiza App\n           \u2193\n7. Se muestran nuevos TaskItems\n</code></pre>"},{"location":"ejemplo_03/#construyendo-appjsx-paso-a-paso","title":"\ud83d\udee0\ufe0f Construyendo App.jsx Paso a Paso","text":""},{"location":"ejemplo_03/#version-completa-comentada","title":"Versi\u00f3n completa comentada","text":"<pre><code>import { useState } from 'react'\nimport TaskForm from './components/TaskForm'\nimport TaskItem from './components/TaskItem'\n\nfunction App() {\n  // 1. ESTADO: Array de tareas vac\u00edo al inicio\n  const [tareas, setTareas] = useState([])\n  // Estructura de cada tarea:\n  // {\n  //   id: 1234567890,        // timestamp \u00fanico\n  //   titulo: \"Mi tarea\",    // texto ingresado\n  //   completado: false      // estado de la tarea\n  // }\n\n  // 2. FUNCI\u00d3N: Agregar nueva tarea\n  const agregarTarea = (titulo) =&gt; {\n    // Crear objeto de nueva tarea\n    const nuevaTarea = {\n      id: Date.now(),      // ID \u00fanico basado en timestamp\n      titulo: titulo,      // o solo 'titulo' (shorthand)\n      completado: false    // Siempre inicia como pendiente\n    }\n\n    // Actualizar estado de forma inmutable\n    setTareas([...tareas, nuevaTarea])\n    // Equivalente a:\n    // const nuevaLista = tareas.slice() // copia\n    // nuevaLista.push(nuevaTarea)      // agregar\n    // setTareas(nuevaLista)             // actualizar\n  }\n\n  // 3. RENDERIZADO\n  return (\n    &lt;div style={{ maxWidth: \"600px\", margin: \"0 auto\" }}&gt;\n      &lt;h1&gt;\ud83d\udcdd Lista de Tareas&lt;/h1&gt;\n\n      {/* Formulario con funci\u00f3n callback */}\n      &lt;TaskForm onAdd={agregarTarea} /&gt;\n\n      {/* Lista de tareas o mensaje vac\u00edo */}\n      &lt;ul&gt;\n        {tareas.length === 0 ? (\n          &lt;p&gt;No hay tareas todav\u00eda. \u00a1Agrega una!&lt;/p&gt;\n        ) : (\n          tareas.map((t) =&gt; (\n            &lt;TaskItem \n              key={t.id}              // React necesita key \u00fanica\n              titulo={t.titulo}       // Prop: texto\n              completado={t.completado} // Prop: estado\n            /&gt;\n          ))\n        )}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre>"},{"location":"ejemplo_03/#desglose-de-conceptos-clave","title":"Desglose de conceptos clave","text":""},{"location":"ejemplo_03/#1-estado-inicial","title":"1. Estado inicial","text":"<pre><code>const [tareas, setTareas] = useState([])\n</code></pre> <p>\u00bfPor qu\u00e9 array vac\u00edo? - Representa \"sin tareas\" - Evita errores con <code>.map()</code> - Permite usar <code>.length</code> para verificar</p>"},{"location":"ejemplo_03/#2-funcion-agregartarea","title":"2. Funci\u00f3n agregarTarea","text":"<pre><code>const agregarTarea = (titulo) =&gt; {\n  const nuevaTarea = {\n    id: Date.now(),\n    titulo,\n    completado: false\n  }\n  setTareas([...tareas, nuevaTarea])\n}\n</code></pre> <p>Puntos importantes: - <code>Date.now()</code>: Genera ID \u00fanico (timestamp en ms) - <code>...tareas</code>: Spread operator para inmutabilidad - <code>nuevaTarea</code> al final: Se agrega al final de la lista</p>"},{"location":"ejemplo_03/#3-renderizado-condicional","title":"3. Renderizado condicional","text":"<pre><code>{tareas.length === 0 ? (\n  &lt;p&gt;No hay tareas todav\u00eda. \u00a1Agrega una!&lt;/p&gt;\n) : (\n  tareas.map((t) =&gt; &lt;TaskItem ... /&gt;)\n)}\n</code></pre> <p>Mejora la UX: - Feedback cuando no hay tareas - Evita mostrar lista vac\u00eda - Gu\u00eda al usuario</p>"},{"location":"ejemplo_03/#construyendo-taskformjsx","title":"\ud83d\udcdd Construyendo TaskForm.jsx","text":""},{"location":"ejemplo_03/#version-completa-comentada_1","title":"Versi\u00f3n completa comentada","text":"<pre><code>import { useState } from 'react'\n\nfunction TaskForm({ onAdd }) {\n  // 1. ESTADO LOCAL: Solo para el input\n  const [titulo, setTitulo] = useState(\"\")\n\n  // 2. MANEJADOR DE ENV\u00cdO\n  const handleSubmit = (e) =&gt; {\n    // Prevenir recarga de p\u00e1gina\n    e.preventDefault()\n\n    // Validaci\u00f3n: eliminar espacios y verificar\n    const valor = titulo.trim()\n    if (valor === \"\") return  // No agregar tareas vac\u00edas\n\n    // Comunicar al padre\n    onAdd(valor)\n\n    // Limpiar formulario\n    setTitulo(\"\")\n  }\n\n  // 3. RENDERIZADO\n  return (\n    &lt;form onSubmit={handleSubmit} style={{ marginBottom: \"1rem\" }}&gt;\n      &lt;input\n        type=\"text\"\n        value={titulo}                    // Controlado por React\n        onChange={(e) =&gt; setTitulo(e.target.value)}\n        placeholder=\"Nueva tarea\"\n        style={{ padding: \"0.5rem\", width: \"80%\" }}\n      /&gt;\n      &lt;button \n        type=\"submit\" \n        style={{ padding: \"0.5rem\" }}\n      &gt;\n        Agregar\n      &lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n\nexport default TaskForm\n</code></pre>"},{"location":"ejemplo_03/#conceptos-clave-del-formulario","title":"Conceptos clave del formulario","text":""},{"location":"ejemplo_03/#1-props-desestructuradas","title":"1. Props desestructuradas","text":"<pre><code>function TaskForm({ onAdd }) {\n  // Equivalente a:\n  // function TaskForm(props) {\n  //   const onAdd = props.onAdd\n</code></pre>"},{"location":"ejemplo_03/#2-formulario-controlado","title":"2. Formulario controlado","text":"<pre><code>&lt;input\n  value={titulo}                          // Estado \u2192 Input\n  onChange={(e) =&gt; setTitulo(e.target.value)} // Input \u2192 Estado\n/&gt;\n</code></pre> <p>Flujo de datos: <pre><code>Estado (titulo) \u2192 value \u2192 Lo que se muestra\nUsuario escribe \u2192 onChange \u2192 Actualiza estado\n</code></pre></p>"},{"location":"ejemplo_03/#3-validacion-basica","title":"3. Validaci\u00f3n b\u00e1sica","text":"<pre><code>const valor = titulo.trim()  // \"  hola  \" \u2192 \"hola\"\nif (valor === \"\") return     // Evita tareas vac\u00edas\n</code></pre> <p>\u00bfPor qu\u00e9 trim()? - Elimina espacios al inicio/final - Evita tareas de solo espacios - Mejora la calidad de datos</p>"},{"location":"ejemplo_03/#4-patron-de-comunicacion","title":"4. Patr\u00f3n de comunicaci\u00f3n","text":"<pre><code>onAdd(valor)     // Llama funci\u00f3n del padre\nsetTitulo(\"\")    // Limpia input local\n</code></pre> <p>Importante: El componente NO sabe qu\u00e9 hace <code>onAdd</code>, solo la llama</p>"},{"location":"ejemplo_03/#construyendo-taskitemjsx","title":"\ud83c\udfa8 Construyendo TaskItem.jsx","text":""},{"location":"ejemplo_03/#version-actual-presentacional","title":"Versi\u00f3n actual (presentacional)","text":"<pre><code>function TaskItem({ titulo, completado }) {\n  return (\n    &lt;li style={{ marginBottom: \"0.5rem\" }}&gt;\n      &lt;span style={{\n        textDecoration: completado ? \"line-through\" : \"none\",\n        fontSize: \"1.1rem\"\n      }}&gt;\n        {titulo}\n      &lt;/span&gt;\n    &lt;/li&gt;\n  )\n}\n\nexport default TaskItem\n</code></pre>"},{"location":"ejemplo_03/#preparado-para-expansion","title":"Preparado para expansi\u00f3n","text":"<pre><code>// Versi\u00f3n futura con m\u00e1s funcionalidad\nfunction TaskItem({ titulo, completado, onToggle, onDelete }) {\n  return (\n    &lt;li style={{ marginBottom: \"0.5rem\", display: \"flex\", gap: \"1rem\" }}&gt;\n      &lt;input \n        type=\"checkbox\" \n        checked={completado}\n        onChange={onToggle}\n      /&gt;\n      &lt;span style={{\n        textDecoration: completado ? \"line-through\" : \"none\",\n        fontSize: \"1.1rem\",\n        flex: 1\n      }}&gt;\n        {titulo}\n      &lt;/span&gt;\n      &lt;button onClick={onDelete}&gt;\ud83d\uddd1\ufe0f&lt;/button&gt;\n    &lt;/li&gt;\n  )\n}\n</code></pre>"},{"location":"ejemplo_03/#flujo-completo-de-la-aplicacion","title":"\ud83d\udd04 Flujo Completo de la Aplicaci\u00f3n","text":""},{"location":"ejemplo_03/#paso-a-paso-agregar-una-tarea","title":"Paso a paso: Agregar una tarea","text":"<pre><code>1. INICIO\n   App: tareas = []\n   TaskForm: titulo = \"\"\n\n2. USUARIO ESCRIBE \"Comprar leche\"\n   App: tareas = [] (sin cambios)\n   TaskForm: titulo = \"Comprar leche\"\n\n3. USUARIO HACE CLIC EN \"Agregar\"\n   TaskForm: handleSubmit se ejecuta\n   \u2514\u2500&gt; e.preventDefault()\n   \u2514\u2500&gt; valor = \"Comprar leche\"\n   \u2514\u2500&gt; onAdd(\"Comprar leche\")\n\n4. APP RECIBE LA LLAMADA\n   App: agregarTarea(\"Comprar leche\")\n   \u2514\u2500&gt; nuevaTarea = {\n         id: 1699123456789,\n         titulo: \"Comprar leche\",\n         completado: false\n       }\n   \u2514\u2500&gt; setTareas([nuevaTarea])\n\n5. REACT RE-RENDERIZA\n   App: tareas = [{...}] (1 elemento)\n   \u2514\u2500&gt; TaskItem se renderiza\n   TaskForm: titulo = \"\" (limpiado)\n\n6. RESULTADO FINAL\n   UI muestra:\n   \u2022 Comprar leche\n</code></pre>"},{"location":"ejemplo_03/#diagrama-visual-del-estado","title":"Diagrama visual del estado","text":"<pre><code>Estado inicial:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 tareas: []  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDespu\u00e9s de agregar primera tarea:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 tareas: [{                  \u2502\n\u2502   id: 1699123456789,        \u2502\n\u2502   titulo: \"Comprar leche\",  \u2502\n\u2502   completado: false         \u2502\n\u2502 }]                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDespu\u00e9s de agregar segunda tarea:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 tareas: [                   \u2502\n\u2502   { id: 1699123456789, ...},\u2502\n\u2502   { id: 1699123467890, ...} \u2502\n\u2502 ]                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ejemplo_03/#debugging-y-herramientas","title":"\ud83d\udd0d Debugging y Herramientas","text":""},{"location":"ejemplo_03/#1-consolelog-estrategico","title":"1. Console.log estrat\u00e9gico","text":"<pre><code>const agregarTarea = (titulo) =&gt; {\n  console.log(\"Antes:\", tareas)\n\n  const nuevaTarea = {\n    id: Date.now(),\n    titulo,\n    completado: false\n  }\n  console.log(\"Nueva tarea:\", nuevaTarea)\n\n  setTareas([...tareas, nuevaTarea])\n  console.log(\"Despu\u00e9s:\", [...tareas, nuevaTarea])\n}\n</code></pre>"},{"location":"ejemplo_03/#2-react-developer-tools","title":"2. React Developer Tools","text":"<p>Instalaci\u00f3n: 1. Chrome/Firefox: Buscar \"React Developer Tools\" 2. Instalar extensi\u00f3n oficial</p> <p>Uso: 1. Abrir DevTools (F12) 2. Ir a pesta\u00f1a \"Components\" 3. Ver \u00e1rbol de componentes 4. Inspeccionar props y estado</p> <p>Lo que puedes ver: <pre><code>App\n\u251c\u2500 state: {tareas: Array(2)}\n\u251c\u2500 TaskForm\n\u2502  \u2514\u2500 props: {onAdd: \u0192}\n\u2502  \u2514\u2500 state: {titulo: \"\"}\n\u2514\u2500 TaskItem\n   \u2514\u2500 props: {titulo: \"Comprar leche\", completado: false}\n</code></pre></p>"},{"location":"ejemplo_03/#3-verificacion-de-re-renders","title":"3. Verificaci\u00f3n de re-renders","text":"<pre><code>function App() {\n  console.log(\"App renderizado\")\n  // ... resto del c\u00f3digo\n}\n\nfunction TaskForm({ onAdd }) {\n  console.log(\"TaskForm renderizado\")\n  // ... resto del c\u00f3digo\n}\n</code></pre>"},{"location":"ejemplo_03/#extensiones-y-mejoras","title":"\ud83d\ude80 Extensiones y Mejoras","text":""},{"location":"ejemplo_03/#1-agregar-funcion-de-completar","title":"1. Agregar funci\u00f3n de completar","text":"<pre><code>// En App.jsx\nconst toggleTarea = (id) =&gt; {\n  setTareas(tareas.map(tarea =&gt;\n    tarea.id === id\n      ? { ...tarea, completado: !tarea.completado }\n      : tarea\n  ))\n}\n\n// Pasar a TaskItem\n&lt;TaskItem\n  key={t.id}\n  titulo={t.titulo}\n  completado={t.completado}\n  onToggle={() =&gt; toggleTarea(t.id)}\n/&gt;\n</code></pre>"},{"location":"ejemplo_03/#2-agregar-funcion-de-eliminar","title":"2. Agregar funci\u00f3n de eliminar","text":"<pre><code>// En App.jsx\nconst eliminarTarea = (id) =&gt; {\n  setTareas(tareas.filter(tarea =&gt; tarea.id !== id))\n}\n\n// Confirmar antes de eliminar\nconst eliminarTarea = (id) =&gt; {\n  if (window.confirm(\"\u00bfEst\u00e1s seguro?\")) {\n    setTareas(tareas.filter(tarea =&gt; tarea.id !== id))\n  }\n}\n</code></pre>"},{"location":"ejemplo_03/#3-persistencia-con-localstorage","title":"3. Persistencia con localStorage","text":"<pre><code>// Cargar tareas al inicio\nconst [tareas, setTareas] = useState(() =&gt; {\n  const guardadas = localStorage.getItem('tareas')\n  return guardadas ? JSON.parse(guardadas) : []\n})\n\n// Guardar cuando cambien\nuseEffect(() =&gt; {\n  localStorage.setItem('tareas', JSON.stringify(tareas))\n}, [tareas])\n</code></pre>"},{"location":"ejemplo_03/#4-contador-de-tareas","title":"4. Contador de tareas","text":"<pre><code>// En App.jsx\nconst tareasCompletadas = tareas.filter(t =&gt; t.completado).length\nconst tareasPendientes = tareas.filter(t =&gt; !t.completado).length\n\nreturn (\n  &lt;div&gt;\n    &lt;h1&gt;\ud83d\udcdd Lista de Tareas&lt;/h1&gt;\n    &lt;p&gt;\n      Completadas: {tareasCompletadas} | \n      Pendientes: {tareasPendientes}\n    &lt;/p&gt;\n    {/* resto del componente */}\n  &lt;/div&gt;\n)\n</code></pre>"},{"location":"ejemplo_03/#5-validacion-mejorada","title":"5. Validaci\u00f3n mejorada","text":"<pre><code>// En TaskForm.jsx\nconst handleSubmit = (e) =&gt; {\n  e.preventDefault()\n\n  const valor = titulo.trim()\n\n  // Validaciones m\u00faltiples\n  if (valor === \"\") {\n    alert(\"La tarea no puede estar vac\u00eda\")\n    return\n  }\n\n  if (valor.length &lt; 3) {\n    alert(\"La tarea debe tener al menos 3 caracteres\")\n    return\n  }\n\n  if (valor.length &gt; 100) {\n    alert(\"La tarea es demasiado larga\")\n    return\n  }\n\n  onAdd(valor)\n  setTitulo(\"\")\n}\n</code></pre>"},{"location":"ejemplo_03/#errores-comunes-y-soluciones","title":"\u274c Errores Comunes y Soluciones","text":""},{"location":"ejemplo_03/#error-1-mutar-el-estado-directamente","title":"Error 1: Mutar el estado directamente","text":"<pre><code>// \u274c MAL - No actualiza la UI\nconst agregarTarea = (titulo) =&gt; {\n  tareas.push({ id: Date.now(), titulo, completado: false })\n  setTareas(tareas) // React no detecta cambios\n}\n\n// \u2705 BIEN - Crear nuevo array\nconst agregarTarea = (titulo) =&gt; {\n  setTareas([...tareas, { id: Date.now(), titulo, completado: false }])\n}\n</code></pre>"},{"location":"ejemplo_03/#error-2-key-no-unica-en-map","title":"Error 2: Key no \u00fanica en map","text":"<pre><code>// \u274c MAL - Usa \u00edndice como key\n{tareas.map((t, index) =&gt; (\n  &lt;TaskItem key={index} ... /&gt;\n))}\n\n// \u2705 BIEN - Usa ID \u00fanico\n{tareas.map((t) =&gt; (\n  &lt;TaskItem key={t.id} ... /&gt;\n))}\n</code></pre>"},{"location":"ejemplo_03/#error-3-olvidar-preventdefault","title":"Error 3: Olvidar preventDefault","text":"<pre><code>// \u274c MAL - La p\u00e1gina se recarga\nconst handleSubmit = (e) =&gt; {\n  // Falta e.preventDefault()\n  onAdd(titulo)\n}\n\n// \u2705 BIEN\nconst handleSubmit = (e) =&gt; {\n  e.preventDefault()\n  onAdd(titulo)\n}\n</code></pre>"},{"location":"ejemplo_03/#error-4-estado-asincrono","title":"Error 4: Estado as\u00edncrono","text":"<pre><code>// \u274c MAL - Estado no se actualiza inmediatamente\nconst agregarTarea = (titulo) =&gt; {\n  setTareas([...tareas, nuevaTarea])\n  console.log(tareas) // Muestra el array ANTERIOR\n}\n\n// \u2705 BIEN - Usar el nuevo valor\nconst agregarTarea = (titulo) =&gt; {\n  const nuevasTareas = [...tareas, nuevaTarea]\n  setTareas(nuevasTareas)\n  console.log(nuevasTareas) // Muestra el array actualizado\n}\n</code></pre>"},{"location":"ejemplo_03/#resumen-y-conclusiones","title":"\ud83c\udfaf Resumen y Conclusiones","text":""},{"location":"ejemplo_03/#lo-que-construimos","title":"Lo que construimos:","text":"<ol> <li>App.jsx: Componente principal con estado global</li> <li>TaskForm.jsx: Formulario controlado con validaci\u00f3n</li> <li>TaskItem.jsx: Componente presentacional (por ahora)</li> </ol>"},{"location":"ejemplo_03/#conceptos-aplicados","title":"Conceptos aplicados:","text":"<ul> <li>\u2705 useState para manejar lista de tareas</li> <li>\u2705 Formularios controlados con value y onChange</li> <li>\u2705 Eventos con preventDefault</li> <li>\u2705 Props para comunicaci\u00f3n padre-hijo</li> <li>\u2705 Lifting state up pattern</li> <li>\u2705 Renderizado condicional para lista vac\u00eda</li> <li>\u2705 Keys \u00fanicas en listas</li> </ul>"},{"location":"ejemplo_04/","title":"\ud83c\udfaf Filtrado Din\u00e1mico de Tareas","text":""},{"location":"ejemplo_04/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>\u00bfQu\u00e9 vamos a construir?</li> <li>Conceptos clave del filtrado</li> <li>Construyendo TaskFilter.jsx</li> <li>Actualizando App.jsx</li> <li>L\u00f3gica de filtrado explicada</li> <li>Flujo completo con diagramas</li> <li>Extensiones y mejoras</li> <li>Patrones avanzados de filtrado</li> <li>Errores comunes</li> </ol>"},{"location":"ejemplo_04/#que-vamos-a-construir","title":"\ud83c\udfaf \u00bfQu\u00e9 vamos a construir?","text":""},{"location":"ejemplo_04/#evolucion-de-nuestra-app","title":"Evoluci\u00f3n de nuestra app","text":"<pre><code>Versi\u00f3n anterior:          \u2192    Nueva versi\u00f3n:\n\u251c\u2500 Agregar tareas         \u251c\u2500 Agregar tareas\n\u251c\u2500 Mostrar todas          \u251c\u2500 Mostrar todas\n                          \u2514\u2500 FILTRAR por estado \u2728\n</code></pre>"},{"location":"ejemplo_04/#vista-previa-del-resultado","title":"Vista previa del resultado","text":"<pre><code>\ud83d\udcdd Lista de Tareas\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [Nueva tarea...] [Agregar]      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2610 Mostrar solo tareas pendientes\n\nMostrando: TODAS (3 tareas)\n\u2022 Comprar leche\n\u2022 Estudiar React \u2713\n\u2022 Hacer ejercicio\n\n[Si activas el filtro]\n\u2611 Mostrar solo tareas pendientes\n\nMostrando: PENDIENTES (2 tareas)\n\u2022 Comprar leche\n\u2022 Hacer ejercicio\n</code></pre>"},{"location":"ejemplo_04/#nuevas-funcionalidades","title":"Nuevas funcionalidades","text":"<ol> <li>Checkbox de filtro: Controla qu\u00e9 tareas mostrar</li> <li>Estado del filtro: Recordar la preferencia del usuario</li> <li>Filtrado din\u00e1mico: Lista que cambia seg\u00fan el filtro</li> <li>Mensajes contextuales: Feedback cuando no hay tareas</li> </ol>"},{"location":"ejemplo_04/#conceptos-clave-del-filtrado","title":"\ud83e\udde0 Conceptos Clave del Filtrado","text":""},{"location":"ejemplo_04/#que-es-filtrar","title":"\u00bfQu\u00e9 es filtrar?","text":"<p>Filtrar es mostrar solo elementos que cumplen una condici\u00f3n:</p> <pre><code>// Array original\nconst numeros = [1, 2, 3, 4, 5]\n\n// Filtrar solo pares\nconst pares = numeros.filter(n =&gt; n % 2 === 0)\n// Resultado: [2, 4]\n\n// En nuestro caso:\nconst tareas = [\n  { titulo: \"Tarea 1\", completado: false },\n  { titulo: \"Tarea 2\", completado: true },\n  { titulo: \"Tarea 3\", completado: false }\n]\n\n// Filtrar solo pendientes\nconst pendientes = tareas.filter(t =&gt; !t.completado)\n// Resultado: Tarea 1 y Tarea 3\n</code></pre>"},{"location":"ejemplo_04/#estados-posibles-del-filtro","title":"Estados posibles del filtro","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Filtro: INACTIVO\u2502     \u2502 Filtro: ACTIVO  \u2502\n\u2502                 \u2502     \u2502                 \u2502\n\u2502 Muestra:        \u2502     \u2502 Muestra:        \u2502\n\u2502 - Pendientes    \u2502     \u2502 - Pendientes    \u2502\n\u2502 - Completadas   \u2502     \u2502 - (No completadas)\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ejemplo_04/#flujo-de-decision","title":"Flujo de decisi\u00f3n","text":"<pre><code>\u00bfFiltro activo?\n    \u2502\n    \u251c\u2500 NO \u2192 Mostrar TODAS las tareas\n    \u2502\n    \u2514\u2500 S\u00cd \u2192 Mostrar SOLO pendientes\n            (completado === false)\n</code></pre>"},{"location":"ejemplo_04/#construyendo-taskfilterjsx","title":"\ud83d\udd27 Construyendo TaskFilter.jsx","text":""},{"location":"ejemplo_04/#componente-completo-comentado","title":"Componente completo comentado","text":"<pre><code>function TaskFilter({ soloPendientes, onToggle }) {\n  // Props recibidas:\n  // - soloPendientes: boolean (estado actual del filtro)\n  // - onToggle: funci\u00f3n para cambiar el estado\n\n  return (\n    &lt;div style={{ marginBottom: '1rem' }}&gt;\n      &lt;label&gt;\n        &lt;input\n          type=\"checkbox\"\n          checked={soloPendientes}\n          onChange={(e) =&gt; onToggle(e.target.checked)}\n        /&gt;\n        Mostrar solo tareas pendientes\n      &lt;/label&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default TaskFilter\n</code></pre>"},{"location":"ejemplo_04/#desglose-del-componente","title":"Desglose del componente","text":""},{"location":"ejemplo_04/#1-props-del-componente","title":"1. Props del componente","text":"<pre><code>function TaskFilter({ soloPendientes, onToggle }) {\n  // soloPendientes: true/false - \u00bfest\u00e1 activo el filtro?\n  // onToggle: funci\u00f3n que recibe true/false\n}\n</code></pre>"},{"location":"ejemplo_04/#2-checkbox-controlado","title":"2. Checkbox controlado","text":"<pre><code>&lt;input\n  type=\"checkbox\"\n  checked={soloPendientes}      // Estado actual\n  onChange={(e) =&gt; onToggle(e.target.checked)}\n/&gt;\n</code></pre> <p>\u00bfQu\u00e9 es <code>e.target.checked</code>? - Para checkboxes, no usamos <code>value</code> - <code>checked</code> es true/false seg\u00fan si est\u00e1 marcado - Se pasa directamente a la funci\u00f3n padre</p>"},{"location":"ejemplo_04/#3-estructura-accesible","title":"3. Estructura accesible","text":"<pre><code>&lt;label&gt;\n  &lt;input type=\"checkbox\" ... /&gt;\n  Mostrar solo tareas pendientes\n&lt;/label&gt;\n</code></pre> <p>Ventajas de envolver en <code>&lt;label&gt;</code>: - Click en el texto tambi\u00e9n activa el checkbox - Mejor accesibilidad - Mejor UX</p>"},{"location":"ejemplo_04/#version-mejorada-con-mas-informacion","title":"Versi\u00f3n mejorada con m\u00e1s informaci\u00f3n","text":"<pre><code>function TaskFilter({ soloPendientes, onToggle, totalTareas, tareasPendientes }) {\n  return (\n    &lt;div style={{ \n      marginBottom: '1rem',\n      padding: '0.5rem',\n      backgroundColor: '#f0f0f0',\n      borderRadius: '4px'\n    }}&gt;\n      &lt;label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}&gt;\n        &lt;input\n          type=\"checkbox\"\n          checked={soloPendientes}\n          onChange={(e) =&gt; onToggle(e.target.checked)}\n        /&gt;\n        &lt;span&gt;\n          Mostrar solo tareas pendientes \n          ({tareasPendientes} de {totalTareas})\n        &lt;/span&gt;\n      &lt;/label&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"ejemplo_04/#actualizando-appjsx","title":"\ud83d\udcf1 Actualizando App.jsx","text":""},{"location":"ejemplo_04/#cambios-necesarios","title":"Cambios necesarios","text":"<pre><code>import { useState } from 'react'\nimport TaskItem from './components/TaskItem'\nimport TaskForm from './components/TaskForm'\nimport TaskFilter from './components/TaskFilter'  // NUEVO\n\nfunction App() {\n  // Estados existentes\n  const [tareas, setTareas] = useState([])\n\n  // NUEVO: Estado para el filtro\n  const [soloPendientes, setSoloPendientes] = useState(false)\n\n  // Funci\u00f3n existente\n  const agregarTarea = (titulo) =&gt; {\n    const nuevaTarea = {\n      id: Date.now(),\n      titulo,\n      completado: false\n    }\n    setTareas([...tareas, nuevaTarea])\n  }\n\n  // NUEVO: Funci\u00f3n para cambiar el filtro\n  const toggleFiltro = (activo) =&gt; {\n    setSoloPendientes(activo)\n  }\n\n  // NUEVO: L\u00f3gica de filtrado\n  const tareasFiltradas = soloPendientes\n    ? tareas.filter(t =&gt; !t.completado)\n    : tareas\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\ud83d\udcdd Lista de Tareas&lt;/h1&gt;\n      &lt;TaskForm onAdd={agregarTarea} /&gt;\n\n      {/* NUEVO: Componente de filtro */}\n      &lt;TaskFilter \n        soloPendientes={soloPendientes} \n        onToggle={toggleFiltro} \n      /&gt;\n\n      {/* Cambio: usar tareasFiltradas en lugar de tareas */}\n      {tareasFiltradas.length === 0 ? (\n        &lt;p&gt;No hay tareas para mostrar&lt;/p&gt;\n      ) : (\n        &lt;ul&gt;\n          {tareasFiltradas.map(t =&gt; (\n            &lt;TaskItem\n              key={t.id}\n              titulo={t.titulo}\n              completado={t.completado}\n            /&gt;\n          ))}\n        &lt;/ul&gt;\n      )}\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"ejemplo_04/#agregando-funcionalidad-de-completar-tareas","title":"Agregando funcionalidad de completar tareas","text":"<p>Para que el filtro tenga sentido, necesitamos poder marcar tareas:</p> <pre><code>// En App.jsx - Agregar funci\u00f3n toggle\nconst toggleTarea = (id) =&gt; {\n  setTareas(tareas.map(tarea =&gt;\n    tarea.id === id\n      ? { ...tarea, completado: !tarea.completado }\n      : tarea\n  ))\n}\n\n// Pasar la funci\u00f3n a TaskItem\n&lt;TaskItem\n  key={t.id}\n  titulo={t.titulo}\n  completado={t.completado}\n  onToggle={() =&gt; toggleTarea(t.id)}  // NUEVO\n/&gt;\n</code></pre>"},{"location":"ejemplo_04/#taskitemjsx-actualizado","title":"TaskItem.jsx actualizado","text":"<pre><code>function TaskItem({ titulo, completado, onToggle }) {\n  return (\n    &lt;li style={{ \n      display: 'flex', \n      alignItems: 'center',\n      gap: '0.5rem',\n      marginBottom: '0.5rem'\n    }}&gt;\n      &lt;input\n        type=\"checkbox\"\n        checked={completado}\n        onChange={onToggle}\n      /&gt;\n      &lt;span style={{ \n        textDecoration: completado ? 'line-through' : 'none',\n        color: completado ? '#888' : '#000'\n      }}&gt;\n        {titulo}\n      &lt;/span&gt;\n    &lt;/li&gt;\n  )\n}\n</code></pre>"},{"location":"ejemplo_04/#logica-de-filtrado-explicada","title":"\ud83d\udd0d L\u00f3gica de Filtrado Explicada","text":""},{"location":"ejemplo_04/#el-operador-ternario","title":"El operador ternario","text":"<pre><code>const tareasFiltradas = soloPendientes\n  ? tareas.filter(t =&gt; !t.completado)\n  : tareas\n</code></pre> <p>Desglose paso a paso:</p> <pre><code>// Si soloPendientes es true:\nconst tareasFiltradas = tareas.filter(t =&gt; !t.completado)\n// Solo tareas donde completado es false\n\n// Si soloPendientes es false:\nconst tareasFiltradas = tareas\n// Todas las tareas sin filtrar\n</code></pre>"},{"location":"ejemplo_04/#visualizacion-del-filtrado","title":"Visualizaci\u00f3n del filtrado","text":"<pre><code>ESTADO INICIAL:\ntareas = [\n  { id: 1, titulo: \"A\", completado: false },\n  { id: 2, titulo: \"B\", completado: true },\n  { id: 3, titulo: \"C\", completado: false }\n]\n\nFILTRO DESACTIVADO (soloPendientes = false):\ntareasFiltradas = tareas  // [A, B, C]\n\nFILTRO ACTIVADO (soloPendientes = true):\ntareasFiltradas = tareas.filter(t =&gt; !t.completado)\n// [A, C] - Solo las que tienen completado: false\n</code></pre>"},{"location":"ejemplo_04/#por-que-tcompletado","title":"\u00bfPor qu\u00e9 <code>!t.completado</code>?","text":"<pre><code>// t.completado puede ser true o false\n// Queremos las NO completadas (pendientes)\n\n!true  === false  // Completada \u2192 NO mostrar\n!false === true   // Pendiente \u2192 S\u00cd mostrar\n</code></pre>"},{"location":"ejemplo_04/#flujo-completo-con-diagramas","title":"\ud83d\udd04 Flujo Completo con Diagramas","text":""},{"location":"ejemplo_04/#caso-1-activar-el-filtro","title":"Caso 1: Activar el filtro","text":"<pre><code>1. Usuario hace clic en checkbox\n           \u2193\n2. onChange dispara con e.target.checked = true\n           \u2193\n3. TaskFilter llama onToggle(true)\n           \u2193\n4. App ejecuta toggleFiltro(true)\n           \u2193\n5. setSoloPendientes(true)\n           \u2193\n6. React re-renderiza App\n           \u2193\n7. tareasFiltradas = tareas.filter(...)\n           \u2193\n8. Solo se muestran tareas pendientes\n</code></pre>"},{"location":"ejemplo_04/#caso-2-completar-una-tarea-con-filtro-activo","title":"Caso 2: Completar una tarea con filtro activo","text":"<pre><code>Estado: Filtro activo, 3 tareas (2 pendientes, 1 completada)\nVista actual: [Tarea 1, Tarea 3]\n\n1. Usuario marca \"Tarea 1\" como completada\n           \u2193\n2. toggleTarea(1) actualiza el estado\n           \u2193\n3. React re-renderiza\n           \u2193\n4. tareasFiltradas recalcula\n           \u2193\n5. Vista actualizada: [Tarea 3]\n   (Tarea 1 desaparece de la vista filtrada)\n</code></pre>"},{"location":"ejemplo_04/#diagrama-de-estados","title":"Diagrama de estados","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          ESTADO GLOBAL              \u2502\n\u2502                                     \u2502\n\u2502  tareas: [                          \u2502\n\u2502    { id: 1, completado: false },    \u2502\n\u2502    { id: 2, completado: true },     \u2502\n\u2502    { id: 3, completado: false }     \u2502\n\u2502  ]                                  \u2502\n\u2502                                     \u2502\n\u2502  soloPendientes: false/true         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2193\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502   FILTRADO  \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2193\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502                       \u2502\n    \u25bc                       \u25bc\nFILTRO OFF              FILTRO ON\nMostrar [1,2,3]         Mostrar [1,3]\n</code></pre>"},{"location":"ejemplo_04/#extensiones-y-mejoras","title":"\ud83d\ude80 Extensiones y Mejoras","text":""},{"location":"ejemplo_04/#1-multiples-filtros","title":"1. M\u00faltiples filtros","text":"<pre><code>// Estados para diferentes filtros\nconst [filtro, setFiltro] = useState('todas') // 'todas', 'pendientes', 'completadas'\n\n// Componente de filtro mejorado\nfunction TaskFilter({ filtroActual, onCambiar }) {\n  return (\n    &lt;div&gt;\n      &lt;label&gt;\n        &lt;input\n          type=\"radio\"\n          name=\"filtro\"\n          value=\"todas\"\n          checked={filtroActual === 'todas'}\n          onChange={(e) =&gt; onCambiar(e.target.value)}\n        /&gt;\n        Todas\n      &lt;/label&gt;\n      &lt;label&gt;\n        &lt;input\n          type=\"radio\"\n          name=\"filtro\"\n          value=\"pendientes\"\n          checked={filtroActual === 'pendientes'}\n          onChange={(e) =&gt; onCambiar(e.target.value)}\n        /&gt;\n        Pendientes\n      &lt;/label&gt;\n      &lt;label&gt;\n        &lt;input\n          type=\"radio\"\n          name=\"filtro\"\n          value=\"completadas\"\n          checked={filtroActual === 'completadas'}\n          onChange={(e) =&gt; onCambiar(e.target.value)}\n        /&gt;\n        Completadas\n      &lt;/label&gt;\n    &lt;/div&gt;\n  )\n}\n\n// L\u00f3gica de filtrado\nconst tareasFiltradas = tareas.filter(tarea =&gt; {\n  if (filtro === 'todas') return true\n  if (filtro === 'pendientes') return !tarea.completado\n  if (filtro === 'completadas') return tarea.completado\n})\n</code></pre>"},{"location":"ejemplo_04/#2-contador-de-tareas-por-categoria","title":"2. Contador de tareas por categor\u00eda","text":"<pre><code>// En App.jsx\nconst contadores = {\n  total: tareas.length,\n  pendientes: tareas.filter(t =&gt; !t.completado).length,\n  completadas: tareas.filter(t =&gt; t.completado).length\n}\n\n// En el render\n&lt;div style={{ marginBottom: '1rem' }}&gt;\n  &lt;span&gt;Total: {contadores.total} | &lt;/span&gt;\n  &lt;span&gt;Pendientes: {contadores.pendientes} | &lt;/span&gt;\n  &lt;span&gt;Completadas: {contadores.completadas}&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"ejemplo_04/#3-busqueda-filtro-combinados","title":"3. B\u00fasqueda + Filtro combinados","text":"<pre><code>function App() {\n  const [tareas, setTareas] = useState([])\n  const [soloPendientes, setSoloPendientes] = useState(false)\n  const [busqueda, setBusqueda] = useState(\"\")\n\n  // Aplicar filtros en cadena\n  const tareasFiltradas = tareas\n    .filter(t =&gt; soloPendientes ? !t.completado : true)\n    .filter(t =&gt; t.titulo.toLowerCase().includes(busqueda.toLowerCase()))\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\ud83d\udcdd Lista de Tareas&lt;/h1&gt;\n\n      {/* Barra de b\u00fasqueda */}\n      &lt;input\n        type=\"text\"\n        placeholder=\"Buscar tareas...\"\n        value={busqueda}\n        onChange={(e) =&gt; setBusqueda(e.target.value)}\n      /&gt;\n\n      {/* Filtro de estado */}\n      &lt;TaskFilter \n        soloPendientes={soloPendientes} \n        onToggle={setSoloPendientes} \n      /&gt;\n\n      {/* Lista filtrada */}\n      {/* ... */}\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"ejemplo_04/#4-persistir-preferencias-del-filtro","title":"4. Persistir preferencias del filtro","text":"<pre><code>// Cargar preferencia guardada\nconst [soloPendientes, setSoloPendientes] = useState(() =&gt; {\n  const guardado = localStorage.getItem('filtroTareas')\n  return guardado === 'true'\n})\n\n// Guardar cuando cambie\nconst toggleFiltro = (activo) =&gt; {\n  setSoloPendientes(activo)\n  localStorage.setItem('filtroTareas', activo)\n}\n</code></pre>"},{"location":"ejemplo_04/#5-animaciones-al-filtrar","title":"5. Animaciones al filtrar","text":"<pre><code>// CSS para transiciones\nconst estiloLista = {\n  transition: 'opacity 0.3s ease',\n  opacity: tareasFiltradas.length &gt; 0 ? 1 : 0.5\n}\n\n// Aplicar a la lista\n&lt;ul style={estiloLista}&gt;\n  {tareasFiltradas.map(...)}\n&lt;/ul&gt;\n</code></pre>"},{"location":"ejemplo_04/#patrones-avanzados-de-filtrado","title":"\ud83c\udfa8 Patrones Avanzados de Filtrado","text":""},{"location":"ejemplo_04/#1-filtros-componibles","title":"1. Filtros componibles","text":"<pre><code>// Definir filtros como funciones\nconst filtros = {\n  todas: () =&gt; true,\n  pendientes: (tarea) =&gt; !tarea.completado,\n  completadas: (tarea) =&gt; tarea.completado,\n  urgentes: (tarea) =&gt; tarea.prioridad === 'alta',\n  hoy: (tarea) =&gt; {\n    const hoy = new Date().toDateString()\n    return new Date(tarea.fecha).toDateString() === hoy\n  }\n}\n\n// Aplicar filtro seleccionado\nconst tareasFiltradas = tareas.filter(filtros[filtroActivo])\n</code></pre>"},{"location":"ejemplo_04/#2-filtros-multiples-simultaneos","title":"2. Filtros m\u00faltiples simult\u00e1neos","text":"<pre><code>function aplicarFiltros(tareas, filtros) {\n  return tareas.filter(tarea =&gt; {\n    // Todos los filtros deben cumplirse\n    if (filtros.estado &amp;&amp; tarea.completado !== filtros.estado) return false\n    if (filtros.categoria &amp;&amp; tarea.categoria !== filtros.categoria) return false\n    if (filtros.busqueda &amp;&amp; !tarea.titulo.includes(filtros.busqueda)) return false\n    return true\n  })\n}\n\n// Uso\nconst tareasFiltradas = aplicarFiltros(tareas, {\n  estado: false,        // Solo pendientes\n  categoria: 'trabajo', // Solo de trabajo\n  busqueda: 'react'     // Que contengan \"react\"\n})\n</code></pre>"},{"location":"ejemplo_04/#3-hook-personalizado-para-filtros","title":"3. Hook personalizado para filtros","text":"<pre><code>// useFilter.js\nfunction useFilter(items, filterFn) {\n  const [filtroActivo, setFiltroActivo] = useState(false)\n\n  const itemsFiltrados = filtroActivo \n    ? items.filter(filterFn)\n    : items\n\n  return [itemsFiltrados, filtroActivo, setFiltroActivo]\n}\n\n// Uso en App.jsx\nfunction App() {\n  const [tareas, setTareas] = useState([])\n  const [tareasFiltradas, filtroActivo, setFiltro] = useFilter(\n    tareas,\n    t =&gt; !t.completado\n  )\n\n  // Usar tareasFiltradas directamente\n}\n</code></pre>"},{"location":"ejemplo_04/#errores-comunes-y-soluciones","title":"\u274c Errores Comunes y Soluciones","text":""},{"location":"ejemplo_04/#error-1-filtrar-el-estado-original","title":"Error 1: Filtrar el estado original","text":"<pre><code>// \u274c MAL - Modifica el array original\nconst aplicarFiltro = () =&gt; {\n  setTareas(tareas.filter(t =&gt; !t.completado))\n  // \u00a1Perdiste las tareas completadas para siempre!\n}\n\n// \u2705 BIEN - Filtrar solo para mostrar\nconst tareasFiltradas = soloPendientes\n  ? tareas.filter(t =&gt; !t.completado)\n  : tareas\n// El array original permanece intacto\n</code></pre>"},{"location":"ejemplo_04/#error-2-filtro-no-se-actualiza","title":"Error 2: Filtro no se actualiza","text":"<pre><code>// \u274c MAL - Cerraduras obsoletas\nconst tareasFiltradas = soloPendientes\n  ? tareas.filter(t =&gt; !t.completado)  // tareas puede estar desactualizado\n  : tareas\n\n// \u2705 BIEN - Usar siempre el estado m\u00e1s reciente\n// React garantiza que el estado en el render es el actual\n</code></pre>"},{"location":"ejemplo_04/#error-3-complejidad-innecesaria","title":"Error 3: Complejidad innecesaria","text":"<pre><code>// \u274c MAL - Demasiado complejo\nlet tareasFiltradas = []\nif (soloPendientes === true) {\n  for (let i = 0; i &lt; tareas.length; i++) {\n    if (tareas[i].completado === false) {\n      tareasFiltradas.push(tareas[i])\n    }\n  }\n} else {\n  tareasFiltradas = tareas\n}\n\n// \u2705 BIEN - Simple y declarativo\nconst tareasFiltradas = soloPendientes\n  ? tareas.filter(t =&gt; !t.completado)\n  : tareas\n</code></pre>"},{"location":"ejemplo_04/#error-4-no-manejar-lista-vacia","title":"Error 4: No manejar lista vac\u00eda","text":"<pre><code>// \u274c MAL - Sin feedback para lista vac\u00eda\n{tareasFiltradas.map(t =&gt; &lt;TaskItem ... /&gt;)}\n\n// \u2705 BIEN - Mensaje cuando no hay resultados\n{tareasFiltradas.length === 0 ? (\n  &lt;p&gt;\n    {soloPendientes \n      ? \"No hay tareas pendientes\" \n      : \"No hay tareas\"}\n  &lt;/p&gt;\n) : (\n  tareasFiltradas.map(t =&gt; &lt;TaskItem ... /&gt;)\n)}\n</code></pre>"},{"location":"ejemplo_04/#resumen-y-conclusiones","title":"\ud83c\udfaf Resumen y Conclusiones","text":""},{"location":"ejemplo_04/#lo-que-construimos","title":"Lo que construimos:","text":"<ol> <li>TaskFilter.jsx: Componente de control del filtro</li> <li>L\u00f3gica de filtrado: En App.jsx con operador ternario</li> <li>Integraci\u00f3n completa: Filtro + Lista + Estado</li> </ol>"},{"location":"ejemplo_04/#conceptos-aplicados","title":"Conceptos aplicados:","text":"<ul> <li>\u2705 Estado booleano para el filtro</li> <li>\u2705 Checkbox controlado con onChange</li> <li>\u2705 Array.filter() para filtrado condicional</li> <li>\u2705 Operador ternario para l\u00f3gica</li> <li>\u2705 Composici\u00f3n de componentes</li> <li>\u2705 Props bidireccionales (estado down, eventos up)</li> </ul>"},{"location":"ejemplo_04/#habilidades-desarrolladas","title":"Habilidades desarrolladas:","text":"<ol> <li>Pensar en estados: \u00bfQu\u00e9 informaci\u00f3n necesito recordar?</li> <li>Filtrado declarativo: Describir QU\u00c9 mostrar, no C\u00d3MO</li> <li>Composici\u00f3n de UI: Componentes peque\u00f1os y reutilizables</li> <li>Feedback al usuario: Mensajes contextuales</li> </ol>"},{"location":"ejemplo_05/","title":"Ejercicio Pr\u00e1ctico: Uso de Props en React","text":""},{"location":"ejemplo_05/#objetivo","title":"Objetivo","text":"<p>Este ejercicio tiene como prop\u00f3sito reforzar el conocimiento sobre el uso de props en componentes de React mediante un ejemplo del mundo real. Implementaremos una tarjeta de perfil de usuario que reciba datos como propiedades para ser renderizados din\u00e1micamente.</p>"},{"location":"ejemplo_05/#descripcion-de-la-actividad","title":"Descripci\u00f3n de la Actividad","text":"<p>Vamos a construir una aplicaci\u00f3n React sencilla que muestre la informaci\u00f3n de un usuario (nombre, cargo y descripci\u00f3n) a trav\u00e9s de un componente <code>UserCard</code>. La informaci\u00f3n ser\u00e1 pasada como propiedades desde el componente principal <code>App</code>.</p>"},{"location":"ejemplo_05/#paso-a-paso","title":"Paso a Paso","text":""},{"location":"ejemplo_05/#1-crear-la-carpeta-del-proyecto","title":"1. Crear la Carpeta del Proyecto","text":"<pre><code>mkdir perfil-usuario-react\ncd perfil-usuario-react\n</code></pre>"},{"location":"ejemplo_05/#2-inicializar-un-proyecto-con-vite","title":"2. Inicializar un Proyecto con Vite","text":"<pre><code>npm create vite@latest . -- --template react\nnpm install\n</code></pre>"},{"location":"ejemplo_05/#3-crear-el-archivo-de-estilos-globales-opcional","title":"3. Crear el Archivo de Estilos Globales (opcional)","text":"<p>Archivo: <code>src/index.css</code> <pre><code>body {\n  font-family: Arial, sans-serif;\n  background-color: #f5f5f5;\n  padding: 2rem;\n}\n</code></pre> Aseg\u00farate de importar este archivo en <code>main.jsx</code>: <pre><code>import './index.css';\n</code></pre></p>"},{"location":"ejemplo_05/#4-crear-el-componente-usercard","title":"4. Crear el Componente <code>UserCard</code>","text":"<p>Archivo: <code>src/components/UserCard.jsx</code> <pre><code>function UserCard({ name, position, description }) {\n  return (\n    &lt;div style={{\n      backgroundColor: 'white',\n      padding: '1.5rem',\n      borderRadius: '8px',\n      boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\n      maxWidth: '400px'\n    }}&gt;\n      &lt;h2&gt;{name}&lt;/h2&gt;\n      &lt;h4 style={{ color: 'gray' }}&gt;{position}&lt;/h4&gt;\n      &lt;p&gt;{description}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default UserCard;\n</code></pre></p>"},{"location":"ejemplo_05/#5-usar-el-componente-en-appjsx","title":"5. Usar el Componente en <code>App.jsx</code>","text":"<p>Archivo: <code>src/App.jsx</code> <pre><code>import UserCard from './components/UserCard';\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;UserCard\n        name=\"Laura Mart\u00ednez\"\n        position=\"Desarrolladora Frontend\"\n        description=\"Apasionada por crear experiencias de usuario modernas y eficientes usando React.\"\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre></p>"},{"location":"ejemplo_05/#resultado-esperado","title":"Resultado Esperado","text":"<p>La aplicaci\u00f3n debe renderizar una tarjeta de presentaci\u00f3n con la siguiente informaci\u00f3n: - Nombre: Laura Mart\u00ednez - Cargo: Desarrolladora Frontend - Descripci\u00f3n: Apasionada por crear experiencias de usuario modernas y eficientes usando React.</p>"},{"location":"ejemplo_05/#recomendaciones","title":"Recomendaciones","text":"<ul> <li>Cambia los valores para probar distintos datos.</li> <li>Crea m\u00e1s de una tarjeta para ver c\u00f3mo las props permiten reutilizar el componente.</li> <li>A\u00f1ade validaci\u00f3n de props con <code>PropTypes</code> si est\u00e1s usando JavaScript puro.</li> </ul>"},{"location":"ejemplo_05/#conclusion","title":"Conclusi\u00f3n","text":"<p>Este ejercicio demuestra c\u00f3mo los componentes en React pueden ser reutilizados y personalizados mediante el uso de props. A medida que desarrolles aplicaciones m\u00e1s complejas, dominar esta t\u00e9cnica te permitir\u00e1 escribir componentes m\u00e1s flexibles y mantenibles.</p>"},{"location":"ejemplo_06/","title":"Uso de Default Props en React","text":""},{"location":"ejemplo_06/#introduccion","title":"Introducci\u00f3n","text":"<p>En el desarrollo de aplicaciones React, es com\u00fan que ciertos componentes requieran valores predeterminados para sus propiedades (props). Esto garantiza un comportamiento predecible cuando los props no son proporcionados por el componente padre. En esta sesi\u00f3n, se explor\u00f3 el uso adecuado de los default props y su relaci\u00f3n con <code>PropTypes</code> para mejorar la robustez y mantenibilidad del c\u00f3digo.</p>"},{"location":"ejemplo_06/#contexto-de-aplicacion","title":"Contexto de Aplicaci\u00f3n","text":"<p>Considere un componente <code>EventCard</code> que muestra informaci\u00f3n sobre un evento pr\u00f3ximo. Este componente puede recibir propiedades como <code>title</code>, <code>subtitle</code> y <code>organizer</code>. En escenarios donde algunas de estas props no se proporcionen, es recomendable establecer valores predeterminados.</p>"},{"location":"ejemplo_06/#ejemplo","title":"Ejemplo","text":""},{"location":"ejemplo_06/#componente-eventcardjsx","title":"Componente: <code>EventCard.jsx</code>","text":"<pre><code>import PropTypes from 'prop-types';\n\nfunction EventCard({ title, subtitle, organizer }) {\n  return (\n    &lt;div className=\"event-card\"&gt;\n      &lt;h2&gt;{title}&lt;/h2&gt;\n      &lt;p&gt;{subtitle}&lt;/p&gt;\n      &lt;small&gt;Organizado por: {organizer}&lt;/small&gt;\n    &lt;/div&gt;\n  );\n}\n\nEventCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string,\n  organizer: PropTypes.string,\n};\n\nEventCard.defaultProps = {\n  subtitle: 'Detalles pr\u00f3ximamente disponibles.',\n  organizer: 'Equipo de Eventos',\n};\n\nexport default EventCard;\n</code></pre>"},{"location":"ejemplo_06/#uso-del-componente-en-appjsx","title":"Uso del componente en <code>App.jsx</code>","text":"<pre><code>import EventCard from './components/EventCard';\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;EventCard title=\"Conferencia React 2025\" /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"ejemplo_06/#ventajas-de-default-props","title":"Ventajas de Default Props","text":"<ul> <li>Proporcionan valores sensatos en ausencia de props requeridas.</li> <li>Mejoran la experiencia de desarrollo al prevenir errores por <code>undefined</code>.</li> <li>Ayudan a documentar el comportamiento esperado del componente.</li> </ul>"},{"location":"ejemplo_06/#consideraciones-tecnicas","title":"Consideraciones T\u00e9cnicas","text":"<ul> <li>Los <code>defaultProps</code> se eval\u00faan antes que las validaciones de <code>PropTypes</code>.</li> <li>La definici\u00f3n de <code>defaultProps</code> se recomienda al final del archivo, despu\u00e9s de la declaraci\u00f3n del componente y de <code>propTypes</code>.</li> <li>Aunque <code>defaultProps</code> es muy \u00fatil en proyectos con JavaScript puro, su uso disminuye cuando se adopta TypeScript, ya que el tipado y los valores por defecto pueden declararse directamente en la firma de la funci\u00f3n.</li> </ul>"},{"location":"ejemplo_06/#conclusion","title":"Conclusi\u00f3n","text":"<p>El uso de <code>defaultProps</code> en React es una pr\u00e1ctica esencial para el desarrollo de componentes m\u00e1s robustos, predecibles y mantenibles. Combinado con <code>PropTypes</code>, permite establecer contratos claros y detectar problemas en tiempo de desarrollo, contribuyendo a la calidad general del c\u00f3digo.</p>"},{"location":"ejemplo_07/","title":"\ud83d\udecd\ufe0f Ejercicio Pr\u00e1ctico: Sistema de Productos con useEffect y useContext","text":""},{"location":"ejemplo_07/#objetivo-del-ejercicio","title":"\ud83c\udfaf Objetivo del ejercicio","text":"<p>Construir un sistema de gesti\u00f3n de productos que: - Use useEffect para cargar datos de una API - Use useContext para compartir el carrito de compras - Implemente b\u00fasqueda en tiempo real con debounce - Maneje estados de carga y error correctamente</p>"},{"location":"ejemplo_07/#estructura-del-proyecto","title":"\ud83d\udcc1 Estructura del proyecto","text":"<pre><code>tienda-hooks/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 App.jsx\n\u2502   \u251c\u2500\u2500 contexts/\n\u2502   \u2502   \u2514\u2500\u2500 CarritoContext.jsx\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 ListaProductos.jsx\n\u2502   \u2502   \u251c\u2500\u2500 ProductoCard.jsx\n\u2502   \u2502   \u251c\u2500\u2500 Carrito.jsx\n\u2502   \u2502   \u251c\u2500\u2500 Navbar.jsx\n\u2502   \u2502   \u2514\u2500\u2500 Buscador.jsx\n\u2502   \u2514\u2500\u2500 hooks/\n\u2502       \u2514\u2500\u2500 useProductos.js\n</code></pre>"},{"location":"ejemplo_07/#implementacion-paso-a-paso","title":"\ud83d\udd27 Implementaci\u00f3n paso a paso","text":""},{"location":"ejemplo_07/#1-contexto-del-carrito-carritocontextjsx","title":"1. Contexto del Carrito (CarritoContext.jsx)","text":"<pre><code>import { createContext, useContext, useState, useEffect } from 'react'\n\n// Crear el contexto\nconst CarritoContext = createContext()\n\n// Provider del carrito\nexport function CarritoProvider({ children }) {\n  const [items, setItems] = useState([])\n  const [abierto, setAbierto] = useState(false)\n\n  // Cargar carrito desde localStorage al iniciar\n  useEffect(() =&gt; {\n    const carritoGuardado = localStorage.getItem('carrito')\n    if (carritoGuardado) {\n      try {\n        setItems(JSON.parse(carritoGuardado))\n      } catch (error) {\n        console.error('Error al cargar carrito:', error)\n      }\n    }\n  }, [])\n\n  // Guardar carrito en localStorage cuando cambie\n  useEffect(() =&gt; {\n    localStorage.setItem('carrito', JSON.stringify(items))\n  }, [items])\n\n  // Agregar producto al carrito\n  const agregarAlCarrito = (producto) =&gt; {\n    setItems(prevItems =&gt; {\n      const itemExistente = prevItems.find(item =&gt; item.id === producto.id)\n\n      if (itemExistente) {\n        // Si existe, aumentar cantidad\n        return prevItems.map(item =&gt;\n          item.id === producto.id\n            ? { ...item, cantidad: item.cantidad + 1 }\n            : item\n        )\n      }\n\n      // Si no existe, agregar con cantidad 1\n      return [...prevItems, { ...producto, cantidad: 1 }]\n    })\n\n    // Mostrar notificaci\u00f3n (opcional)\n    mostrarNotificacion('Producto agregado al carrito')\n  }\n\n  // Quitar producto del carrito\n  const quitarDelCarrito = (id) =&gt; {\n    setItems(prevItems =&gt; prevItems.filter(item =&gt; item.id !== id))\n  }\n\n  // Actualizar cantidad\n  const actualizarCantidad = (id, nuevaCantidad) =&gt; {\n    if (nuevaCantidad &lt;= 0) {\n      quitarDelCarrito(id)\n      return\n    }\n\n    setItems(prevItems =&gt;\n      prevItems.map(item =&gt;\n        item.id === id\n          ? { ...item, cantidad: nuevaCantidad }\n          : item\n      )\n    )\n  }\n\n  // Vaciar carrito\n  const vaciarCarrito = () =&gt; {\n    if (window.confirm('\u00bfEst\u00e1s seguro de vaciar el carrito?')) {\n      setItems([])\n    }\n  }\n\n  // Calcular totales\n  const calcularTotales = () =&gt; {\n    const subtotal = items.reduce((sum, item) =&gt; \n      sum + (item.price * item.cantidad), 0\n    )\n    const impuestos = subtotal * 0.16 // 16% de impuestos\n    const total = subtotal + impuestos\n\n    return {\n      subtotal: subtotal.toFixed(2),\n      impuestos: impuestos.toFixed(2),\n      total: total.toFixed(2),\n      cantidadItems: items.reduce((sum, item) =&gt; sum + item.cantidad, 0)\n    }\n  }\n\n  // Mostrar notificaci\u00f3n temporal\n  const mostrarNotificacion = (mensaje) =&gt; {\n    // Aqu\u00ed podr\u00edas usar una librer\u00eda de notificaciones\n    console.log(mensaje)\n  }\n\n  const valor = {\n    items,\n    abierto,\n    setAbierto,\n    agregarAlCarrito,\n    quitarDelCarrito,\n    actualizarCantidad,\n    vaciarCarrito,\n    totales: calcularTotales()\n  }\n\n  return (\n    &lt;CarritoContext.Provider value={valor}&gt;\n      {children}\n    &lt;/CarritoContext.Provider&gt;\n  )\n}\n\n// Hook personalizado para usar el carrito\nexport function useCarrito() {\n  const context = useContext(CarritoContext)\n  if (!context) {\n    throw new Error('useCarrito debe usarse dentro de CarritoProvider')\n  }\n  return context\n}\n</code></pre>"},{"location":"ejemplo_07/#2-hook-personalizado-para-productos-useproductosjs","title":"2. Hook personalizado para productos (useProductos.js)","text":"<pre><code>import { useState, useEffect } from 'react'\n\nexport function useProductos(busqueda = '') {\n  const [productos, setProductos] = useState([])\n  const [cargando, setCargando] = useState(true)\n  const [error, setError] = useState(null)\n\n  // Cargar productos\n  useEffect(() =&gt; {\n    let cancelado = false\n\n    const cargarProductos = async () =&gt; {\n      try {\n        setCargando(true)\n        setError(null)\n\n        // API real: https://fakestoreapi.com/products\n        const respuesta = await fetch('https://fakestoreapi.com/products')\n\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`)\n        }\n\n        const datos = await respuesta.json()\n\n        // Solo actualizar si el componente sigue montado\n        if (!cancelado) {\n          setProductos(datos)\n        }\n      } catch (err) {\n        if (!cancelado) {\n          setError(err.message)\n        }\n      } finally {\n        if (!cancelado) {\n          setCargando(false)\n        }\n      }\n    }\n\n    cargarProductos()\n\n    // Cleanup: cancelar si el componente se desmonta\n    return () =&gt; {\n      cancelado = true\n    }\n  }, []) // Solo cargar una vez\n\n  // Filtrar productos seg\u00fan b\u00fasqueda\n  const productosFiltrados = productos.filter(producto =&gt;\n    producto.title.toLowerCase().includes(busqueda.toLowerCase()) ||\n    producto.description.toLowerCase().includes(busqueda.toLowerCase())\n  )\n\n  return {\n    productos: productosFiltrados,\n    cargando,\n    error,\n    total: productos.length\n  }\n}\n</code></pre>"},{"location":"ejemplo_07/#3-componente-buscador-con-debounce-buscadorjsx","title":"3. Componente Buscador con debounce (Buscador.jsx)","text":"<pre><code>import { useState, useEffect } from 'react'\n\nfunction Buscador({ onBuscar }) {\n  const [termino, setTermino] = useState('')\n\n  // Implementar debounce con useEffect\n  useEffect(() =&gt; {\n    // Si no hay t\u00e9rmino, ejecutar inmediatamente\n    if (termino === '') {\n      onBuscar('')\n      return\n    }\n\n    // Configurar timer para debounce\n    const timer = setTimeout(() =&gt; {\n      console.log('Buscando:', termino)\n      onBuscar(termino)\n    }, 500) // Esperar 500ms despu\u00e9s de dejar de escribir\n\n    // Cleanup: cancelar timer anterior\n    return () =&gt; {\n      clearTimeout(timer)\n    }\n  }, [termino, onBuscar])\n\n  return (\n    &lt;div className=\"buscador\"&gt;\n      &lt;input\n        type=\"text\"\n        value={termino}\n        onChange={(e) =&gt; setTermino(e.target.value)}\n        placeholder=\"Buscar productos...\"\n        className=\"buscador-input\"\n      /&gt;\n      {termino &amp;&amp; (\n        &lt;button \n          onClick={() =&gt; setTermino('')}\n          className=\"buscador-limpiar\"\n        &gt;\n          \u2715\n        &lt;/button&gt;\n      )}\n    &lt;/div&gt;\n  )\n}\n\nexport default Buscador\n</code></pre>"},{"location":"ejemplo_07/#4-lista-de-productos-listaproductosjsx","title":"4. Lista de Productos (ListaProductos.jsx)","text":"<pre><code>import { useState } from 'react'\nimport { useProductos } from '../hooks/useProductos'\nimport ProductoCard from './ProductoCard'\nimport Buscador from './Buscador'\n\nfunction ListaProductos() {\n  const [busqueda, setBusqueda] = useState('')\n  const { productos, cargando, error } = useProductos(busqueda)\n\n  // Manejar estados de carga y error\n  if (cargando) {\n    return (\n      &lt;div className=\"cargando\"&gt;\n        &lt;div className=\"spinner\"&gt;&lt;/div&gt;\n        &lt;p&gt;Cargando productos...&lt;/p&gt;\n      &lt;/div&gt;\n    )\n  }\n\n  if (error) {\n    return (\n      &lt;div className=\"error\"&gt;\n        &lt;p&gt;\ud83d\ude15 Error al cargar productos&lt;/p&gt;\n        &lt;p&gt;{error}&lt;/p&gt;\n        &lt;button onClick={() =&gt; window.location.reload()}&gt;\n          Reintentar\n        &lt;/button&gt;\n      &lt;/div&gt;\n    )\n  }\n\n  return (\n    &lt;div className=\"lista-productos\"&gt;\n      &lt;div className=\"lista-productos-header\"&gt;\n        &lt;h2&gt;Nuestros Productos&lt;/h2&gt;\n        &lt;Buscador onBuscar={setBusqueda} /&gt;\n      &lt;/div&gt;\n\n      {busqueda &amp;&amp; (\n        &lt;p className=\"resultados-busqueda\"&gt;\n          Mostrando {productos.length} resultados para \"{busqueda}\"\n        &lt;/p&gt;\n      )}\n\n      {productos.length === 0 ? (\n        &lt;div className=\"sin-resultados\"&gt;\n          &lt;p&gt;No se encontraron productos&lt;/p&gt;\n          {busqueda &amp;&amp; (\n            &lt;button onClick={() =&gt; setBusqueda('')}&gt;\n              Ver todos los productos\n            &lt;/button&gt;\n          )}\n        &lt;/div&gt;\n      ) : (\n        &lt;div className=\"productos-grid\"&gt;\n          {productos.map(producto =&gt; (\n            &lt;ProductoCard key={producto.id} producto={producto} /&gt;\n          ))}\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  )\n}\n\nexport default ListaProductos\n\n### 5. Tarjeta de Producto (ProductoCard.jsx)\n\n```jsx\nimport { useState } from 'react'\nimport { useCarrito } from '../contexts/CarritoContext'\n\nfunction ProductoCard({ producto }) {\n  const { agregarAlCarrito } = useCarrito()\n  const [agregando, setAgregando] = useState(false)\n  const [imagenError, setImagenError] = useState(false)\n\n  const manejarAgregar = async () =&gt; {\n    setAgregando(true)\n\n    // Simular delay para mostrar estado de carga\n    await new Promise(resolve =&gt; setTimeout(resolve, 500))\n\n    agregarAlCarrito(producto)\n    setAgregando(false)\n\n    // Feedback visual temporal\n    const boton = document.getElementById(`btn-${producto.id}`)\n    boton.classList.add('agregado')\n    setTimeout(() =&gt; {\n      boton.classList.remove('agregado')\n    }, 1000)\n  }\n\n  return (\n    &lt;div className=\"producto-card\"&gt;\n      &lt;div className=\"producto-imagen\"&gt;\n        &lt;img \n          src={imagenError ? '/placeholder.jpg' : producto.image} \n          alt={producto.title}\n          onError={() =&gt; setImagenError(true)}\n          loading=\"lazy\"\n        /&gt;\n      &lt;/div&gt;\n\n      &lt;div className=\"producto-info\"&gt;\n        &lt;h3 className=\"producto-titulo\"&gt;{producto.title}&lt;/h3&gt;\n        &lt;p className=\"producto-categoria\"&gt;{producto.category}&lt;/p&gt;\n        &lt;p className=\"producto-precio\"&gt;${producto.price.toFixed(2)}&lt;/p&gt;\n\n        &lt;button\n          id={`btn-${producto.id}`}\n          className={`btn-agregar ${agregando ? 'cargando' : ''}`}\n          onClick={manejarAgregar}\n          disabled={agregando}\n        &gt;\n          {agregando ? (\n            &lt;&gt;\n              &lt;span className=\"spinner-mini\"&gt;&lt;/span&gt;\n              Agregando...\n            &lt;/&gt;\n          ) : (\n            &lt;&gt;\n              &lt;span&gt;\ud83d\uded2&lt;/span&gt;\n              Agregar al carrito\n            &lt;/&gt;\n          )}\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default ProductoCard\n</code></pre>"},{"location":"ejemplo_07/#6-componente-carrito-carritojsx","title":"6. Componente Carrito (Carrito.jsx)","text":"<pre><code>import { useCarrito } from '../contexts/CarritoContext'\n\nfunction Carrito() {\n  const {\n    items,\n    abierto,\n    setAbierto,\n    quitarDelCarrito,\n    actualizarCantidad,\n    vaciarCarrito,\n    totales\n  } = useCarrito()\n\n  if (!abierto) return null\n\n  return (\n    &lt;&gt;\n      {/* Overlay */}\n      &lt;div \n        className=\"carrito-overlay\"\n        onClick={() =&gt; setAbierto(false)}\n      /&gt;\n\n      {/* Panel del carrito */}\n      &lt;div className=\"carrito-panel\"&gt;\n        &lt;div className=\"carrito-header\"&gt;\n          &lt;h2&gt;Tu Carrito&lt;/h2&gt;\n          &lt;button \n            className=\"btn-cerrar\"\n            onClick={() =&gt; setAbierto(false)}\n          &gt;\n            \u2715\n          &lt;/button&gt;\n        &lt;/div&gt;\n\n        {items.length === 0 ? (\n          &lt;div className=\"carrito-vacio\"&gt;\n            &lt;p&gt;Tu carrito est\u00e1 vac\u00edo&lt;/p&gt;\n            &lt;button onClick={() =&gt; setAbierto(false)}&gt;\n              Continuar comprando\n            &lt;/button&gt;\n          &lt;/div&gt;\n        ) : (\n          &lt;&gt;\n            &lt;div className=\"carrito-items\"&gt;\n              {items.map(item =&gt; (\n                &lt;div key={item.id} className=\"carrito-item\"&gt;\n                  &lt;img src={item.image} alt={item.title} /&gt;\n\n                  &lt;div className=\"item-info\"&gt;\n                    &lt;h4&gt;{item.title}&lt;/h4&gt;\n                    &lt;p&gt;${item.price.toFixed(2)}&lt;/p&gt;\n                  &lt;/div&gt;\n\n                  &lt;div className=\"item-controles\"&gt;\n                    &lt;button\n                      onClick={() =&gt; actualizarCantidad(item.id, item.cantidad - 1)}\n                    &gt;\n                      -\n                    &lt;/button&gt;\n                    &lt;span&gt;{item.cantidad}&lt;/span&gt;\n                    &lt;button\n                      onClick={() =&gt; actualizarCantidad(item.id, item.cantidad + 1)}\n                    &gt;\n                      +\n                    &lt;/button&gt;\n                  &lt;/div&gt;\n\n                  &lt;button\n                    className=\"btn-eliminar\"\n                    onClick={() =&gt; quitarDelCarrito(item.id)}\n                  &gt;\n                    \ud83d\uddd1\ufe0f\n                  &lt;/button&gt;\n                &lt;/div&gt;\n              ))}\n            &lt;/div&gt;\n\n            &lt;div className=\"carrito-resumen\"&gt;\n              &lt;div className=\"resumen-linea\"&gt;\n                &lt;span&gt;Subtotal:&lt;/span&gt;\n                &lt;span&gt;${totales.subtotal}&lt;/span&gt;\n              &lt;/div&gt;\n              &lt;div className=\"resumen-linea\"&gt;\n                &lt;span&gt;Impuestos:&lt;/span&gt;\n                &lt;span&gt;${totales.impuestos}&lt;/span&gt;\n              &lt;/div&gt;\n              &lt;div className=\"resumen-linea total\"&gt;\n                &lt;span&gt;Total:&lt;/span&gt;\n                &lt;span&gt;${totales.total}&lt;/span&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div className=\"carrito-acciones\"&gt;\n              &lt;button \n                className=\"btn-vaciar\"\n                onClick={vaciarCarrito}\n              &gt;\n                Vaciar carrito\n              &lt;/button&gt;\n              &lt;button className=\"btn-checkout\"&gt;\n                Proceder al pago\n              &lt;/button&gt;\n            &lt;/div&gt;\n          &lt;/&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default Carrito\n</code></pre>"},{"location":"ejemplo_07/#7-navbar-con-contador-navbarjsx","title":"7. Navbar con contador (Navbar.jsx)","text":"<pre><code>import { useCarrito } from '../contexts/CarritoContext'\n\nfunction Navbar() {\n  const { setAbierto, totales } = useCarrito()\n\n  return (\n    &lt;nav className=\"navbar\"&gt;\n      &lt;div className=\"navbar-container\"&gt;\n        &lt;h1 className=\"logo\"&gt;\ud83d\udecd\ufe0f Mi Tienda&lt;/h1&gt;\n\n        &lt;button \n          className=\"btn-carrito\"\n          onClick={() =&gt; setAbierto(true)}\n        &gt;\n          &lt;span&gt;\ud83d\uded2&lt;/span&gt;\n          {totales.cantidadItems &gt; 0 &amp;&amp; (\n            &lt;span className=\"carrito-badge\"&gt;\n              {totales.cantidadItems}\n            &lt;/span&gt;\n          )}\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/nav&gt;\n  )\n}\n\nexport default Navbar\n</code></pre>"},{"location":"ejemplo_07/#8-app-principal-appjsx","title":"8. App principal (App.jsx)","text":"<pre><code>import { CarritoProvider } from './contexts/CarritoContext'\nimport Navbar from './components/Navbar'\nimport ListaProductos from './components/ListaProductos'\nimport Carrito from './components/Carrito'\nimport './App.css'\n\nfunction App() {\n  return (\n    &lt;CarritoProvider&gt;\n      &lt;div className=\"app\"&gt;\n        &lt;Navbar /&gt;\n        &lt;main className=\"contenido-principal\"&gt;\n          &lt;ListaProductos /&gt;\n        &lt;/main&gt;\n        &lt;Carrito /&gt;\n      &lt;/div&gt;\n    &lt;/CarritoProvider&gt;\n  )\n}\n\nexport default App\n</code></pre>"},{"location":"ejemplo_07/#9-estilos-css-appcss","title":"9. Estilos CSS (App.css)","text":"<pre><code>/* Reset b\u00e1sico */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  background-color: #f5f5f5;\n}\n\n/* Navbar */\n.navbar {\n  background-color: white;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: sticky;\n  top: 0;\n  z-index: 100;\n}\n\n.navbar-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 1rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.logo {\n  font-size: 1.5rem;\n  color: #333;\n}\n\n.btn-carrito {\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  position: relative;\n  padding: 0.5rem;\n}\n\n.carrito-badge {\n  position: absolute;\n  top: 0;\n  right: 0;\n  background-color: #ff4757;\n  color: white;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  font-size: 0.75rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Contenido principal */\n.contenido-principal {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem 1rem;\n}\n\n/* Lista de productos */\n.lista-productos-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n/* Buscador */\n.buscador {\n  position: relative;\n  width: 300px;\n}\n\n.buscador-input {\n  width: 100%;\n  padding: 0.5rem 2rem 0.5rem 1rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.buscador-limpiar {\n  position: absolute;\n  right: 0.5rem;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  cursor: pointer;\n  color: #999;\n}\n\n/* Grid de productos */\n.productos-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 2rem;\n}\n\n/* Tarjeta de producto */\n.producto-card {\n  background: white;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  transition: transform 0.2s;\n}\n\n.producto-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n}\n\n.producto-imagen {\n  width: 100%;\n  height: 200px;\n  overflow: hidden;\n}\n\n.producto-imagen img {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n  padding: 1rem;\n}\n\n.producto-info {\n  padding: 1rem;\n}\n\n.producto-titulo {\n  font-size: 1rem;\n  margin-bottom: 0.5rem;\n  height: 2.5rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n\n.producto-categoria {\n  color: #666;\n  font-size: 0.875rem;\n  margin-bottom: 0.5rem;\n}\n\n.producto-precio {\n  font-size: 1.25rem;\n  font-weight: bold;\n  color: #2ecc71;\n  margin-bottom: 1rem;\n}\n\n.btn-agregar {\n  width: 100%;\n  padding: 0.75rem;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: background-color 0.2s;\n}\n\n.btn-agregar:hover {\n  background-color: #2980b9;\n}\n\n.btn-agregar.cargando {\n  background-color: #95a5a6;\n  cursor: not-allowed;\n}\n\n.btn-agregar.agregado {\n  background-color: #27ae60;\n}\n\n/* Spinner */\n.spinner-mini {\n  width: 12px;\n  height: 12px;\n  border: 2px solid #fff;\n  border-top-color: transparent;\n  border-radius: 50%;\n  animation: spin 0.6s linear infinite;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* Estados de carga y error */\n.cargando, .error, .sin-resultados {\n  text-align: center;\n  padding: 4rem 2rem;\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #3498db;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin: 0 auto 1rem;\n}\n\n/* Carrito */\n.carrito-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0,0,0,0.5);\n  z-index: 200;\n}\n\n.carrito-panel {\n  position: fixed;\n  right: 0;\n  top: 0;\n  height: 100vh;\n  width: 400px;\n  background-color: white;\n  box-shadow: -2px 0 8px rgba(0,0,0,0.1);\n  z-index: 201;\n  display: flex;\n  flex-direction: column;\n  animation: slideIn 0.3s ease-out;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n.carrito-header {\n  padding: 1rem;\n  border-bottom: 1px solid #eee;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.btn-cerrar {\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  color: #666;\n}\n\n.carrito-vacio {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n}\n\n.carrito-items {\n  flex: 1;\n  overflow-y: auto;\n  padding: 1rem;\n}\n\n.carrito-item {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem 0;\n  border-bottom: 1px solid #eee;\n}\n\n.carrito-item img {\n  width: 60px;\n  height: 60px;\n  object-fit: contain;\n}\n\n.item-info {\n  flex: 1;\n}\n\n.item-info h4 {\n  font-size: 0.875rem;\n  margin-bottom: 0.25rem;\n}\n\n.item-controles {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.item-controles button {\n  width: 24px;\n  height: 24px;\n  border: 1px solid #ddd;\n  background: white;\n  cursor: pointer;\n  border-radius: 4px;\n}\n\n.btn-eliminar {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.2rem;\n  opacity: 0.6;\n}\n\n.btn-eliminar:hover {\n  opacity: 1;\n}\n\n.carrito-resumen {\n  padding: 1rem;\n  border-top: 1px solid #eee;\n}\n\n.resumen-linea {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 0.5rem;\n}\n\n.resumen-linea.total {\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin-top: 0.5rem;\n  padding-top: 0.5rem;\n  border-top: 1px solid #eee;\n}\n\n.carrito-acciones {\n  padding: 1rem;\n  display: flex;\n  gap: 1rem;\n}\n\n.btn-vaciar {\n  flex: 1;\n  padding: 0.75rem;\n  border: 1px solid #e74c3c;\n  background: white;\n  color: #e74c3c;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.btn-checkout {\n  flex: 1;\n  padding: 0.75rem;\n  background-color: #27ae60;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .carrito-panel {\n    width: 100%;\n  }\n\n  .productos-grid {\n    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    gap: 1rem;\n  }\n\n  .buscador {\n    width: 100%;\n  }\n\n  .lista-productos-header {\n    flex-direction: column;\n    gap: 1rem;\n  }\n}\n</code></pre>"},{"location":"ejemplo_07/#conceptos-aplicados-en-el-ejercicio","title":"\ud83e\uddea Conceptos aplicados en el ejercicio","text":""},{"location":"ejemplo_07/#useeffect-en-accion","title":"useEffect en acci\u00f3n:","text":"<ol> <li>Cargar datos al montar componente (useProductos)</li> <li>Cleanup para evitar actualizaciones en componentes desmontados</li> <li>Debounce en el buscador</li> <li>Persistencia con localStorage</li> <li>Efectos con dependencias (guardar carrito cuando cambia)</li> </ol>"},{"location":"ejemplo_07/#usecontext-en-accion","title":"useContext en acci\u00f3n:","text":"<ol> <li>Estado global del carrito compartido entre componentes</li> <li>Evitar prop drilling (no pasar carrito por props)</li> <li>Hook personalizado (useCarrito) para mejor DX</li> <li>Provider envolviendo la aplicaci\u00f3n</li> </ol>"},{"location":"ejemplo_07/#patrones-y-mejores-practicas","title":"Patrones y mejores pr\u00e1cticas:","text":"<ol> <li>Manejo de estados de carga y error</li> <li>Optimizaci\u00f3n con lazy loading de im\u00e1genes</li> <li>Feedback visual al usuario</li> <li>Responsive design</li> <li>Separaci\u00f3n de responsabilidades</li> </ol>"},{"location":"ejemplo_07/#para-profundizar","title":"\ud83d\udcda Para profundizar","text":"<ol> <li>Optimizaciones:</li> <li>Implementar <code>useMemo</code> para c\u00e1lculos costosos</li> <li>Usar <code>React.memo</code> para evitar re-renders</li> <li> <p>Virtualizaci\u00f3n para listas largas</p> </li> <li> <p>Funcionalidades adicionales:</p> </li> <li>Filtros por categor\u00eda</li> <li>Ordenamiento por precio</li> <li>Paginaci\u00f3n</li> <li> <p>Wishlist/favoritos</p> </li> <li> <p>Mejoras de UX:</p> </li> <li>Skeleton loaders</li> <li>Animaciones con Framer Motion</li> <li>Notificaciones toast</li> <li>Modo oscuro</li> </ol> <p>\u00a1Con este ejercicio has aplicado useEffect y useContext en un escenario real y pr\u00e1ctico!</p>"},{"location":"ejemplo_08/","title":"\ud83c\udfaf Ejercicio Pr\u00e1ctico: Sistema de Registro con Formularios Avanzados","text":""},{"location":"ejemplo_08/#objetivo-del-ejercicio","title":"\ud83d\udccb Objetivo del ejercicio","text":"<p>Construir un sistema completo de registro de usuarios que implemente: - Formulario multi-paso con validaci\u00f3n - Estados derivados para progreso y validaci\u00f3n - Formateo autom\u00e1tico de campos - Prevenci\u00f3n de env\u00edos duplicados - Feedback visual en tiempo real</p>"},{"location":"ejemplo_08/#estructura-del-proyecto","title":"\ud83d\udcc1 Estructura del proyecto","text":"<pre><code>registro-avanzado/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 App.jsx\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 FormularioRegistro.jsx\n\u2502   \u2502   \u251c\u2500\u2500 PasoInformacionPersonal.jsx\n\u2502   \u2502   \u251c\u2500\u2500 PasoContacto.jsx\n\u2502   \u2502   \u251c\u2500\u2500 PasoSeguridad.jsx\n\u2502   \u2502   \u251c\u2500\u2500 ResumenRegistro.jsx\n\u2502   \u2502   \u2514\u2500\u2500 common/\n\u2502   \u2502       \u251c\u2500\u2500 Campo.jsx\n\u2502   \u2502       \u251c\u2500\u2500 IndicadorProgreso.jsx\n\u2502   \u2502       \u2514\u2500\u2500 IndicadorFuerza.jsx\n\u2502   \u251c\u2500\u2500 hooks/\n\u2502   \u2502   \u251c\u2500\u2500 useFormulario.js\n\u2502   \u2502   \u2514\u2500\u2500 useValidacion.js\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 validaciones.js\n\u2502       \u2514\u2500\u2500 formatters.js\n</code></pre>"},{"location":"ejemplo_08/#implementacion-del-sistema","title":"\ud83d\udd27 Implementaci\u00f3n del sistema","text":""},{"location":"ejemplo_08/#1-hook-personalizado-para-formularios-useformulariojs","title":"1. Hook personalizado para formularios (useFormulario.js)","text":"<pre><code>import { useState, useCallback, useMemo } from 'react'\n\nexport function useFormulario(valoresIniciales, validaciones = {}) {\n  const [valores, setValores] = useState(valoresIniciales)\n  const [tocados, setTocados] = useState({})\n  const [enviando, setEnviando] = useState(false)\n\n  // Manejar cambio de valores\n  const handleChange = useCallback((e) =&gt; {\n    const { name, value, type, checked, files } = e.target\n\n    setValores(prev =&gt; ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : \n               type === 'file' ? files[0] : \n               value\n    }))\n  }, [])\n\n  // Manejar blur\n  const handleBlur = useCallback((e) =&gt; {\n    const { name } = e.target\n    setTocados(prev =&gt; ({\n      ...prev,\n      [name]: true\n    }))\n  }, [])\n\n  // Establecer valor program\u00e1ticamente\n  const setValue = useCallback((name, value) =&gt; {\n    setValores(prev =&gt; ({\n      ...prev,\n      [name]: value\n    }))\n  }, [])\n\n  // Establecer m\u00faltiples valores\n  const setValues = useCallback((newValues) =&gt; {\n    setValores(prev =&gt; ({\n      ...prev,\n      ...newValues\n    }))\n  }, [])\n\n  // Calcular errores (estado derivado)\n  const errores = useMemo(() =&gt; {\n    const erroresCalculados = {}\n\n    Object.keys(validaciones).forEach(campo =&gt; {\n      const validacion = validaciones[campo]\n      const valor = valores[campo]\n\n      if (typeof validacion === 'function') {\n        erroresCalculados[campo] = validacion(valor, valores)\n      } else if (Array.isArray(validacion)) {\n        // M\u00faltiples validaciones\n        for (const fn of validacion) {\n          const error = fn(valor, valores)\n          if (error) {\n            erroresCalculados[campo] = error\n            break\n          }\n        }\n      }\n    })\n\n    return erroresCalculados\n  }, [valores, validaciones])\n\n  // Estados derivados \u00fatiles\n  const camposConError = Object.keys(errores).filter(campo =&gt; errores[campo])\n  const formularioValido = camposConError.length === 0\n  const porcentajeCompletado = (\n    Object.keys(valores).filter(campo =&gt; valores[campo] !== '').length / \n    Object.keys(valores).length * 100\n  )\n\n  // Resetear formulario\n  const reset = useCallback(() =&gt; {\n    setValores(valoresIniciales)\n    setTocados({})\n    setEnviando(false)\n  }, [valoresIniciales])\n\n  // Validar todo\n  const validarTodo = useCallback(() =&gt; {\n    const todosTocados = Object.keys(valores).reduce((acc, campo) =&gt; ({\n      ...acc,\n      [campo]: true\n    }), {})\n    setTocados(todosTocados)\n    return formularioValido\n  }, [valores, formularioValido])\n\n  return {\n    valores,\n    errores,\n    tocados,\n    enviando,\n    formularioValido,\n    porcentajeCompletado,\n    camposConError,\n    handleChange,\n    handleBlur,\n    setValue,\n    setValues,\n    setEnviando,\n    reset,\n    validarTodo\n  }\n}\n</code></pre>"},{"location":"ejemplo_08/#2-utilidades-de-validacion-validacionesjs","title":"2. Utilidades de validaci\u00f3n (validaciones.js)","text":"<pre><code>// Validaciones reutilizables\nexport const requerido = (mensaje = 'Este campo es requerido') =&gt; \n  (valor) =&gt; !valor ? mensaje : ''\n\nexport const minLength = (min, mensaje) =&gt; \n  (valor) =&gt; valor &amp;&amp; valor.length &lt; min \n    ? mensaje || `M\u00ednimo ${min} caracteres` \n    : ''\n\nexport const maxLength = (max, mensaje) =&gt; \n  (valor) =&gt; valor &amp;&amp; valor.length &gt; max \n    ? mensaje || `M\u00e1ximo ${max} caracteres` \n    : ''\n\nexport const email = (mensaje = 'Email inv\u00e1lido') =&gt; \n  (valor) =&gt; valor &amp;&amp; !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(valor) \n    ? mensaje \n    : ''\n\nexport const telefono = (mensaje = 'Tel\u00e9fono inv\u00e1lido') =&gt; \n  (valor) =&gt; {\n    const soloNumeros = valor.replace(/\\D/g, '')\n    return soloNumeros.length !== 10 ? mensaje : ''\n  }\n\nexport const contrasena = (valor) =&gt; {\n  if (!valor) return 'La contrase\u00f1a es requerida'\n  if (valor.length &lt; 8) return 'M\u00ednimo 8 caracteres'\n  if (!/[a-z]/.test(valor)) return 'Debe contener min\u00fasculas'\n  if (!/[A-Z]/.test(valor)) return 'Debe contener may\u00fasculas'\n  if (!/\\d/.test(valor)) return 'Debe contener n\u00fameros'\n  if (!/[!@#$%^&amp;*]/.test(valor)) return 'Debe contener caracteres especiales'\n  return ''\n}\n\nexport const confirmarContrasena = (valor, valores) =&gt; {\n  if (!valor) return 'Confirma tu contrase\u00f1a'\n  if (valor !== valores.contrasena) return 'Las contrase\u00f1as no coinciden'\n  return ''\n}\n\nexport const fechaNacimiento = (valor) =&gt; {\n  if (!valor) return 'La fecha es requerida'\n\n  const fecha = new Date(valor)\n  const hoy = new Date()\n  const edad = Math.floor((hoy - fecha) / (365.25 * 24 * 60 * 60 * 1000))\n\n  if (edad &lt; 18) return 'Debes ser mayor de 18 a\u00f1os'\n  if (edad &gt; 120) return 'Fecha inv\u00e1lida'\n\n  return ''\n}\n\n// Combinar validaciones\nexport const combinar = (...validaciones) =&gt; (valor, valores) =&gt; {\n  for (const validacion of validaciones) {\n    const error = validacion(valor, valores)\n    if (error) return error\n  }\n  return ''\n}\n</code></pre>"},{"location":"ejemplo_08/#3-formatters-formattersjs","title":"3. Formatters (formatters.js)","text":"<pre><code>// Formatear tel\u00e9fono: (555) 123-4567\nexport const formatearTelefono = (valor) =&gt; {\n  const numeros = valor.replace(/\\D/g, '')\n\n  if (numeros.length &lt;= 3) return numeros\n  if (numeros.length &lt;= 6) {\n    return `(${numeros.slice(0, 3)}) ${numeros.slice(3)}`\n  }\n  return `(${numeros.slice(0, 3)}) ${numeros.slice(3, 6)}-${numeros.slice(6, 10)}`\n}\n\n// Formatear tarjeta: 1234 5678 9012 3456\nexport const formatearTarjeta = (valor) =&gt; {\n  const numeros = valor.replace(/\\D/g, '')\n  const grupos = numeros.match(/.{1,4}/g) || []\n  return grupos.join(' ').substring(0, 19)\n}\n\n// Formatear fecha: MM/DD/YYYY\nexport const formatearFecha = (valor) =&gt; {\n  const numeros = valor.replace(/\\D/g, '')\n\n  if (numeros.length &lt;= 2) return numeros\n  if (numeros.length &lt;= 4) {\n    return `${numeros.slice(0, 2)}/${numeros.slice(2)}`\n  }\n  return `${numeros.slice(0, 2)}/${numeros.slice(2, 4)}/${numeros.slice(4, 8)}`\n}\n\n// Capitalizar nombre\nexport const capitalizarNombre = (valor) =&gt; {\n  return valor\n    .split(' ')\n    .map(palabra =&gt; palabra.charAt(0).toUpperCase() + palabra.slice(1).toLowerCase())\n    .join(' ')\n}\n\n// Limpiar espacios extras\nexport const limpiarEspacios = (valor) =&gt; {\n  return valor.replace(/\\s+/g, ' ').trim()\n}\n</code></pre>"},{"location":"ejemplo_08/#4-componente-campo-reutilizable-campojsx","title":"4. Componente Campo reutilizable (Campo.jsx)","text":"<pre><code>import { useState } from 'react'\n\nfunction Campo({ \n  label, \n  tipo = 'text',\n  nombre,\n  valor,\n  onChange,\n  onBlur,\n  error,\n  tocado,\n  requerido,\n  ayuda,\n  formatter,\n  ...props \n}) {\n  const [mostrarPassword, setMostrarPassword] = useState(false)\n\n  const handleChange = (e) =&gt; {\n    let nuevoValor = e.target.value\n\n    // Aplicar formatter si existe\n    if (formatter) {\n      nuevoValor = formatter(nuevoValor)\n    }\n\n    // Crear evento sint\u00e9tico con el valor formateado\n    const eventoSintetico = {\n      target: {\n        name: nombre,\n        value: nuevoValor,\n        type: tipo\n      }\n    }\n\n    onChange(eventoSintetico)\n  }\n\n  const tipoInput = tipo === 'password' &amp;&amp; mostrarPassword ? 'text' : tipo\n  const mostrarError = error &amp;&amp; tocado\n\n  return (\n    &lt;div className={`campo ${mostrarError ? 'campo-error' : ''}`}&gt;\n      &lt;label htmlFor={nombre}&gt;\n        {label}\n        {requerido &amp;&amp; &lt;span className=\"asterisco\"&gt;*&lt;/span&gt;}\n      &lt;/label&gt;\n\n      &lt;div className=\"campo-input-wrapper\"&gt;\n        &lt;input\n          id={nombre}\n          name={nombre}\n          type={tipoInput}\n          value={valor}\n          onChange={handleChange}\n          onBlur={onBlur}\n          className={mostrarError ? 'input-error' : ''}\n          aria-invalid={mostrarError}\n          aria-describedby={mostrarError ? `${nombre}-error` : undefined}\n          {...props}\n        /&gt;\n\n        {tipo === 'password' &amp;&amp; (\n          &lt;button\n            type=\"button\"\n            className=\"toggle-password\"\n            onClick={() =&gt; setMostrarPassword(!mostrarPassword)}\n            aria-label={mostrarPassword ? 'Ocultar contrase\u00f1a' : 'Mostrar contrase\u00f1a'}\n          &gt;\n            {mostrarPassword ? '\ud83d\udc41\ufe0f' : '\ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f'}\n          &lt;/button&gt;\n        )}\n      &lt;/div&gt;\n\n      {ayuda &amp;&amp; !mostrarError &amp;&amp; (\n        &lt;span className=\"campo-ayuda\"&gt;{ayuda}&lt;/span&gt;\n      )}\n\n      {mostrarError &amp;&amp; (\n        &lt;span id={`${nombre}-error`} className=\"campo-error-mensaje\"&gt;\n          {error}\n        &lt;/span&gt;\n      )}\n    &lt;/div&gt;\n  )\n}\n\nexport default Campo\n</code></pre>"},{"location":"ejemplo_08/#5-formulario-multi-paso-principal-formularioregistrojsx","title":"5. Formulario multi-paso principal (FormularioRegistro.jsx)","text":"<pre><code>import { useState } from 'react'\nimport { useFormulario } from '../hooks/useFormulario'\nimport PasoInformacionPersonal from './PasoInformacionPersonal'\nimport PasoContacto from './PasoContacto'\nimport PasoSeguridad from './PasoSeguridad'\nimport ResumenRegistro from './ResumenRegistro'\nimport IndicadorProgreso from './common/IndicadorProgreso'\nimport * as validaciones from '../utils/validaciones'\n\nconst PASOS = [\n  { id: 1, nombre: 'Informaci\u00f3n Personal', componente: PasoInformacionPersonal },\n  { id: 2, nombre: 'Contacto', componente: PasoContacto },\n  { id: 3, nombre: 'Seguridad', componente: PasoSeguridad },\n  { id: 4, nombre: 'Resumen', componente: ResumenRegistro }\n]\n\nfunction FormularioRegistro() {\n  const [pasoActual, setPasoActual] = useState(1)\n  const [datosGuardados, setDatosGuardados] = useState({})\n\n  const formulario = useFormulario(\n    {\n      // Informaci\u00f3n personal\n      nombre: '',\n      apellidos: '',\n      fechaNacimiento: '',\n      genero: '',\n\n      // Contacto\n      email: '',\n      telefono: '',\n      direccion: '',\n      ciudad: '',\n      codigoPostal: '',\n      pais: '',\n\n      // Seguridad\n      nombreUsuario: '',\n      contrasena: '',\n      confirmarContrasena: '',\n      preguntaSeguridad: '',\n      respuestaSeguridad: '',\n      aceptaTerminos: false,\n      recibirNotificaciones: false\n    },\n    {\n      // Validaciones por campo\n      nombre: [validaciones.requerido(), validaciones.minLength(2)],\n      apellidos: [validaciones.requerido(), validaciones.minLength(2)],\n      fechaNacimiento: validaciones.fechaNacimiento,\n      email: [validaciones.requerido(), validaciones.email()],\n      telefono: validaciones.telefono(),\n      contrasena: validaciones.contrasena,\n      confirmarContrasena: validaciones.confirmarContrasena,\n      nombreUsuario: [\n        validaciones.requerido(),\n        validaciones.minLength(4),\n        validaciones.maxLength(20)\n      ],\n      aceptaTerminos: (valor) =&gt; !valor ? 'Debes aceptar los t\u00e9rminos' : ''\n    }\n  )\n\n  // Estados derivados para validaci\u00f3n por pasos\n  const validacionPorPasos = {\n    1: ['nombre', 'apellidos', 'fechaNacimiento', 'genero'],\n    2: ['email', 'telefono', 'direccion', 'ciudad', 'codigoPostal', 'pais'],\n    3: ['nombreUsuario', 'contrasena', 'confirmarContrasena', 'aceptaTerminos']\n  }\n\n  // Estado derivado: \u00bfEl paso actual es v\u00e1lido?\n  const pasoValido = validacionPorPasos[pasoActual]?.every(\n    campo =&gt; !formulario.errores[campo] &amp;&amp; formulario.valores[campo] !== ''\n  ) ?? true\n\n  // Navegaci\u00f3n entre pasos\n  const siguientePaso = () =&gt; {\n    if (pasoActual &lt; PASOS.length) {\n      // Guardar datos del paso actual\n      const camposPaso = validacionPorPasos[pasoActual] || []\n      const datosPaso = camposPaso.reduce((acc, campo) =&gt; ({\n        ...acc,\n        [campo]: formulario.valores[campo]\n      }), {})\n\n      setDatosGuardados(prev =&gt; ({\n        ...prev,\n        ...datosPaso\n      }))\n\n      setPasoActual(pasoActual + 1)\n    }\n  }\n\n  const pasoAnterior = () =&gt; {\n    if (pasoActual &gt; 1) {\n      setPasoActual(pasoActual - 1)\n    }\n  }\n\n  // Enviar formulario\n  const handleSubmit = async (e) =&gt; {\n    e.preventDefault()\n\n    if (!formulario.validarTodo()) {\n      alert('Por favor corrige los errores antes de continuar')\n      return\n    }\n\n    formulario.setEnviando(true)\n\n    try {\n      // Simular env\u00edo a API\n      await new Promise(resolve =&gt; setTimeout(resolve, 2000))\n\n      console.log('Datos enviados:', {\n        ...datosGuardados,\n        ...formulario.valores\n      })\n\n      alert('\u00a1Registro exitoso!')\n      formulario.reset()\n      setPasoActual(1)\n      setDatosGuardados({})\n\n    } catch (error) {\n      alert('Error al registrar. Intenta nuevamente.')\n    } finally {\n      formulario.setEnviando(false)\n\n    try {\n      await new Promise(resolve =&gt; setTimeout(resolve, 2000))\n      console.log('Datos enviados:', {\n        ...datosGuardados,\n        ...formulario.valores\n      })\n      alert('\u00a1Registro exitoso!')\n      formulario.reset()\n      setPasoActual(1)\n      setDatosGuardados({})\n    } catch (error) {\n      alert('Error al registrar. Intenta nuevamente.')\n    } finally {\n      formulario.setEnviando(false)\n    }\n  }\n\n  const PasoComponente = PASOS.find(p =&gt; p.id === pasoActual)?.componente\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;IndicadorProgreso pasoActual={pasoActual} totalPasos={PASOS.length} /&gt;\n\n      {PasoComponente &amp;&amp; (\n        &lt;PasoComponente\n          valores={formulario.valores}\n          errores={formulario.errores}\n          actualizarCampo={formulario.actualizarCampo}\n        /&gt;\n      )}\n\n      &lt;div className=\"acciones\"&gt;\n        {pasoActual &gt; 1 &amp;&amp; (\n          &lt;button type=\"button\" onClick={pasoAnterior}&gt;\n            Anterior\n          &lt;/button&gt;\n        )}\n\n        {pasoActual &lt; PASOS.length ? (\n          &lt;button type=\"button\" onClick={siguientePaso} disabled={!pasoValido}&gt;\n            Siguiente\n          &lt;/button&gt;\n        ) : (\n          &lt;button type=\"submit\" disabled={formulario.enviando}&gt;\n            {formulario.enviando ? 'Enviando...' : 'Enviar'}\n          &lt;/button&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/form&gt;\n  )\n}\n\nexport default FormularioRegistro\n</code></pre>"},{"location":"ejemplo_08/#6-paso-1-informacion-personal-pasoinformacionpersonaljsx","title":"6. Paso 1 - Informaci\u00f3n Personal (PasoInformacionPersonal.jsx)","text":"<pre><code>import Campo from './common/Campo'\nimport { capitalizarNombre, formatearFecha } from '../utils/formatters'\n\nfunction PasoInformacionPersonal({ formulario }) {\n  const { valores, errores, tocados, handleChange, handleBlur } = formulario\n\n  // Estado derivado: edad calculada\n  const edad = valores.fechaNacimiento ? \n    Math.floor((new Date() - new Date(valores.fechaNacimiento)) / (365.25 * 24 * 60 * 60 * 1000)) : 0\n\n  return (\n    &lt;div className=\"paso-formulario\"&gt;\n      &lt;h2&gt;Informaci\u00f3n Personal&lt;/h2&gt;\n      &lt;p&gt;Completa tus datos personales b\u00e1sicos&lt;/p&gt;\n\n      &lt;div className=\"grid-2-columnas\"&gt;\n        &lt;Campo\n          label=\"Nombre\"\n          nombre=\"nombre\"\n          valor={valores.nombre}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          error={errores.nombre}\n          tocado={tocados.nombre}\n          requerido\n          formatter={capitalizarNombre}\n          placeholder=\"Juan\"\n        /&gt;\n\n        &lt;Campo\n          label=\"Apellidos\"\n          nombre=\"apellidos\"\n          valor={valores.apellidos}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          error={errores.apellidos}\n          tocado={tocados.apellidos}\n          requerido\n          formatter={capitalizarNombre}\n          placeholder=\"P\u00e9rez Garc\u00eda\"\n        /&gt;\n      &lt;/div&gt;\n\n      &lt;Campo\n        label=\"Fecha de nacimiento\"\n        tipo=\"date\"\n        nombre=\"fechaNacimiento\"\n        valor={valores.fechaNacimiento}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        error={errores.fechaNacimiento}\n        tocado={tocados.fechaNacimiento}\n        requerido\n        max={new Date().toISOString().split('T')[0]}\n        ayuda={edad &gt; 0 ? `Edad: ${edad} a\u00f1os` : ''}\n      /&gt;\n\n      &lt;fieldset className=\"grupo-radios\"&gt;\n        &lt;legend&gt;G\u00e9nero&lt;/legend&gt;\n\n        &lt;label className=\"radio-label\"&gt;\n          &lt;input\n            type=\"radio\"\n            name=\"genero\"\n            value=\"masculino\"\n            checked={valores.genero === 'masculino'}\n            onChange={handleChange}\n          /&gt;\n          &lt;span&gt;Masculino&lt;/span&gt;\n        &lt;/label&gt;\n\n        &lt;label className=\"radio-label\"&gt;\n          &lt;input\n            type=\"radio\"\n            name=\"genero\"\n            value=\"femenino\"\n            checked={valores.genero === 'femenino'}\n            onChange={handleChange}\n          /&gt;\n          &lt;span&gt;Femenino&lt;/span&gt;\n        &lt;/label&gt;\n\n        &lt;label className=\"radio-label\"&gt;\n          &lt;input\n            type=\"radio\"\n            name=\"genero\"\n            value=\"otro\"\n            checked={valores.genero === 'otro'}\n            onChange={handleChange}\n          /&gt;\n          &lt;span&gt;Otro&lt;/span&gt;\n        &lt;/label&gt;\n\n        &lt;label className=\"radio-label\"&gt;\n          &lt;input\n            type=\"radio\"\n            name=\"genero\"\n            value=\"prefiero-no-decir\"\n            checked={valores.genero === 'prefiero-no-decir'}\n            onChange={handleChange}\n          /&gt;\n          &lt;span&gt;Prefiero no decir&lt;/span&gt;\n        &lt;/label&gt;\n      &lt;/fieldset&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default PasoInformacionPersonal\n</code></pre>"},{"location":"ejemplo_08/#7-paso-2-informacion-de-contacto-pasocontactojsx","title":"7. Paso 2 - Informaci\u00f3n de Contacto (PasoContacto.jsx)","text":"<pre><code>import Campo from './common/Campo'\nimport { formatearTelefono } from '../utils/formatters'\n\nfunction PasoContacto({ formulario }) {\n  const { valores, errores, tocados, handleChange, handleBlur } = formulario\n\n  // Pa\u00edses disponibles\n  const paises = [\n    { codigo: '', nombre: 'Selecciona un pa\u00eds' },\n    { codigo: 'MX', nombre: 'M\u00e9xico' },\n    { codigo: 'ES', nombre: 'Espa\u00f1a' },\n    { codigo: 'AR', nombre: 'Argentina' },\n    { codigo: 'CO', nombre: 'Colombia' },\n    { codigo: 'CL', nombre: 'Chile' },\n    { codigo: 'PE', nombre: 'Per\u00fa' }\n  ]\n\n  return (\n    &lt;div className=\"paso-formulario\"&gt;\n      &lt;h2&gt;Informaci\u00f3n de Contacto&lt;/h2&gt;\n      &lt;p&gt;\u00bfC\u00f3mo podemos contactarte?&lt;/p&gt;\n\n      &lt;Campo\n        label=\"Correo electr\u00f3nico\"\n        tipo=\"email\"\n        nombre=\"email\"\n        valor={valores.email}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        error={errores.email}\n        tocado={tocados.email}\n        requerido\n        placeholder=\"juan@ejemplo.com\"\n        ayuda=\"Usaremos este email para tu cuenta\"\n      /&gt;\n\n      &lt;Campo\n        label=\"Tel\u00e9fono\"\n        tipo=\"tel\"\n        nombre=\"telefono\"\n        valor={valores.telefono}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        error={errores.telefono}\n        tocado={tocados.telefono}\n        formatter={formatearTelefono}\n        placeholder=\"(555) 123-4567\"\n        ayuda=\"10 d\u00edgitos, incluye c\u00f3digo de \u00e1rea\"\n      /&gt;\n\n      &lt;Campo\n        label=\"Direcci\u00f3n\"\n        nombre=\"direccion\"\n        valor={valores.direccion}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        placeholder=\"Calle Principal 123\"\n      /&gt;\n\n      &lt;div className=\"grid-3-columnas\"&gt;\n        &lt;Campo\n          label=\"Ciudad\"\n          nombre=\"ciudad\"\n          valor={valores.ciudad}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          placeholder=\"Ciudad de M\u00e9xico\"\n        /&gt;\n\n        &lt;Campo\n          label=\"C\u00f3digo Postal\"\n          nombre=\"codigoPostal\"\n          valor={valores.codigoPostal}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          placeholder=\"12345\"\n          maxLength=\"5\"\n        /&gt;\n\n        &lt;div className=\"campo\"&gt;\n          &lt;label htmlFor=\"pais\"&gt;Pa\u00eds&lt;/label&gt;\n          &lt;select\n            id=\"pais\"\n            name=\"pais\"\n            value={valores.pais}\n            onChange={handleChange}\n            onBlur={handleBlur}\n          &gt;\n            {paises.map(pais =&gt; (\n              &lt;option key={pais.codigo} value={pais.codigo}&gt;\n                {pais.nombre}\n              &lt;/option&gt;\n            ))}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default PasoContacto\n</code></pre>"},{"location":"ejemplo_08/#8-paso-3-seguridad-pasoseguridadjsx","title":"8. Paso 3 - Seguridad (PasoSeguridad.jsx)","text":"<pre><code>import { useState } from 'react'\nimport Campo from './common/Campo'\nimport IndicadorFuerza from './common/IndicadorFuerza'\n\nfunction PasoSeguridad({ formulario }) {\n  const { valores, errores, tocados, handleChange, handleBlur } = formulario\n  const [verificandoUsuario, setVerificandoUsuario] = useState(false)\n\n  // Verificar disponibilidad de usuario (simulado)\n  const verificarUsuario = async (nombreUsuario) =&gt; {\n    if (nombreUsuario.length &lt; 4) return\n\n    setVerificandoUsuario(true)\n\n    // Simular llamada API\n    await new Promise(resolve =&gt; setTimeout(resolve, 1000))\n\n    const usuariosExistentes = ['admin', 'usuario', 'test']\n    const disponible = !usuariosExistentes.includes(nombreUsuario.toLowerCase())\n\n    setVerificandoUsuario(false)\n\n    if (!disponible) {\n      formulario.setValue('nombreUsuario', '')\n      alert('Este nombre de usuario ya est\u00e1 en uso')\n    }\n  }\n\n  const preguntasSeguridad = [\n    'Selecciona una pregunta de seguridad',\n    '\u00bfCu\u00e1l es el nombre de tu primera mascota?',\n    '\u00bfEn qu\u00e9 ciudad naciste?',\n    '\u00bfCu\u00e1l es el apellido de soltera de tu madre?',\n    '\u00bfCu\u00e1l es tu pel\u00edcula favorita?',\n    '\u00bfCu\u00e1l fue tu primera escuela?'\n  ]\n\n  return (\n    &lt;div className=\"paso-formulario\"&gt;\n      &lt;h2&gt;Configuraci\u00f3n de Seguridad&lt;/h2&gt;\n      &lt;p&gt;Protege tu cuenta con una contrase\u00f1a segura&lt;/p&gt;\n\n      &lt;Campo\n        label=\"Nombre de usuario\"\n        nombre=\"nombreUsuario\"\n        valor={valores.nombreUsuario}\n        onChange={handleChange}\n        onBlur={(e) =&gt; {\n          handleBlur(e)\n          verificarUsuario(e.target.value)\n        }}\n        error={errores.nombreUsuario}\n        tocado={tocados.nombreUsuario}\n        requerido\n        placeholder=\"usuario123\"\n        ayuda={verificandoUsuario ? 'Verificando disponibilidad...' : \n               'Entre 4 y 20 caracteres, sin espacios'}\n      /&gt;\n\n      &lt;Campo\n        label=\"Contrase\u00f1a\"\n        tipo=\"password\"\n        nombre=\"contrasena\"\n        valor={valores.contrasena}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        error={errores.contrasena}\n        tocado={tocados.contrasena}\n        requerido\n        ayuda=\"M\u00ednimo 8 caracteres con may\u00fasculas, min\u00fasculas, n\u00fameros y s\u00edmbolos\"\n      /&gt;\n\n      {valores.contrasena &amp;&amp; (\n        &lt;IndicadorFuerza password={valores.contrasena} /&gt;\n      )}\n\n      &lt;Campo\n        label=\"Confirmar contrase\u00f1a\"\n        tipo=\"password\"\n        nombre=\"confirmarContrasena\"\n        valor={valores.confirmarContrasena}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        error={errores.confirmarContrasena}\n        tocado={tocados.confirmarContrasena}\n        requerido\n      /&gt;\n\n      &lt;div className=\"campo\"&gt;\n        &lt;label htmlFor=\"preguntaSeguridad\"&gt;Pregunta de seguridad&lt;/label&gt;\n        &lt;select\n          id=\"preguntaSeguridad\"\n          name=\"preguntaSeguridad\"\n          value={valores.preguntaSeguridad}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        &gt;\n          {preguntasSeguridad.map((pregunta, index) =&gt; (\n            &lt;option key={index} value={index === 0 ? '' : pregunta}&gt;\n              {pregunta}\n            &lt;/option&gt;\n          ))}\n        &lt;/select&gt;\n      &lt;/div&gt;\n\n      {valores.preguntaSeguridad &amp;&amp; (\n        &lt;Campo\n          label=\"Respuesta\"\n          nombre=\"respuestaSeguridad\"\n          valor={valores.respuestaSeguridad}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          placeholder=\"Tu respuesta\"\n          ayuda=\"Guarda esta respuesta, la necesitar\u00e1s para recuperar tu cuenta\"\n        /&gt;\n      )}\n\n      &lt;div className=\"checkboxes\"&gt;\n        &lt;label className=\"checkbox-label\"&gt;\n          &lt;input\n            type=\"checkbox\"\n            name=\"aceptaTerminos\"\n            checked={valores.aceptaTerminos}\n            onChange={handleChange}\n          /&gt;\n          &lt;span&gt;\n            Acepto los &lt;a href=\"/terminos\" target=\"_blank\"&gt;t\u00e9rminos y condiciones&lt;/a&gt;\n          &lt;/span&gt;\n        &lt;/label&gt;\n        {errores.aceptaTerminos &amp;&amp; tocados.aceptaTerminos &amp;&amp; (\n          &lt;span className=\"error\"&gt;{errores.aceptaTerminos}&lt;/span&gt;\n        )}\n\n        &lt;label className=\"checkbox-label\"&gt;\n          &lt;input\n            type=\"checkbox\"\n            name=\"recibirNotificaciones\"\n            checked={valores.recibirNotificaciones}\n            onChange={handleChange}\n          /&gt;\n          &lt;span&gt;Deseo recibir notificaciones y ofertas por email&lt;/span&gt;\n        &lt;/label&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default PasoSeguridad\n</code></pre>"},{"location":"ejemplo_08/#9-paso-4-resumen-resumenregistrojsx","title":"9. Paso 4 - Resumen (ResumenRegistro.jsx)","text":"<pre><code>function ResumenRegistro({ formulario, datosGuardados }) {\n  const todosLosDatos = { ...datosGuardados, ...formulario.valores }\n\n  // Agrupar datos por secci\u00f3n\n  const secciones = {\n    'Informaci\u00f3n Personal': {\n      'Nombre completo': `${todosLosDatos.nombre} ${todosLosDatos.apellidos}`,\n      'Fecha de nacimiento': new Date(todosLosDatos.fechaNacimiento).toLocaleDateString(),\n      'G\u00e9nero': todosLosDatos.genero || 'No especificado'\n    },\n    'Contacto': {\n      'Email': todosLosDatos.email,\n      'Tel\u00e9fono': todosLosDatos.telefono,\n      'Direcci\u00f3n': todosLosDatos.direccion,\n      'Ciudad': todosLosDatos.ciudad,\n      'C\u00f3digo Postal': todosLosDatos.codigoPostal,\n      'Pa\u00eds': todosLosDatos.pais\n    },\n    'Cuenta': {\n      'Nombre de usuario': todosLosDatos.nombreUsuario,\n      'Notificaciones': todosLosDatos.recibirNotificaciones ? 'S\u00ed' : 'No',\n      'T\u00e9rminos aceptados': todosLosDatos.aceptaTerminos ? 'S\u00ed' : 'No'\n    }\n  }\n\n  return (\n    &lt;div className=\"paso-formulario resumen\"&gt;\n      &lt;h2&gt;Resumen de tu registro&lt;/h2&gt;\n      &lt;p&gt;Revisa que toda la informaci\u00f3n sea correcta antes de continuar&lt;/p&gt;\n\n      {Object.entries(secciones).map(([titulo, campos]) =&gt; (\n        &lt;div key={titulo} className=\"seccion-resumen\"&gt;\n          &lt;h3&gt;{titulo}&lt;/h3&gt;\n          &lt;dl&gt;\n            {Object.entries(campos).map(([campo, valor]) =&gt; (\n              valor &amp;&amp; (\n                &lt;div key={campo} className=\"campo-resumen\"&gt;\n                  &lt;dt&gt;{campo}:&lt;/dt&gt;\n                  &lt;dd&gt;{valor}&lt;/dd&gt;\n                &lt;/div&gt;\n              )\n            ))}\n          &lt;/dl&gt;\n        &lt;/div&gt;\n      ))}\n\n      &lt;div className=\"mensaje-confirmacion\"&gt;\n        &lt;p&gt;\n          &lt;strong&gt;\u26a0\ufe0f Importante:&lt;/strong&gt; Una vez completado el registro, \n          recibir\u00e1s un correo de confirmaci\u00f3n en &lt;strong&gt;{todosLosDatos.email}&lt;/strong&gt;\n        &lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default ResumenRegistro\n</code></pre>"},{"location":"ejemplo_08/#10-indicador-de-progreso-indicadorprogresojsx","title":"10. Indicador de Progreso (IndicadorProgreso.jsx)","text":"<pre><code>function IndicadorProgreso({ pasos, pasoActual, completados }) {\n  const porcentaje = ((pasoActual - 1) / (pasos.length - 1)) * 100\n\n  return (\n    &lt;div className=\"indicador-progreso\"&gt;\n      &lt;div className=\"barra-progreso\"&gt;\n        &lt;div \n          className=\"progreso-fill\"\n          style={{ width: `${porcentaje}%` }}\n        /&gt;\n      &lt;/div&gt;\n\n      &lt;div className=\"pasos\"&gt;\n        {pasos.map((paso, index) =&gt; {\n          const numeroPaso = index + 1\n          const estaActivo = numeroPaso === pasoActual\n          const estaCompletado = numeroPaso &lt; pasoActual\n\n          return (\n            &lt;div \n              key={paso.id}\n              className={`\n                paso \n                ${estaActivo ? 'activo' : ''} \n                ${estaCompletado ? 'completado' : ''}\n              `}\n            &gt;\n              &lt;div className=\"paso-circulo\"&gt;\n                {estaCompletado ? '\u2713' : numeroPaso}\n              &lt;/div&gt;\n              &lt;span className=\"paso-nombre\"&gt;{paso.nombre}&lt;/span&gt;\n            &lt;/div&gt;\n          )\n        })}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default IndicadorProgreso\n</code></pre>"},{"location":"ejemplo_08/#11-indicador-de-fuerza-de-contrasena-indicadorfuerzajsx","title":"11. Indicador de Fuerza de Contrase\u00f1a (IndicadorFuerza.jsx)","text":"<pre><code>function IndicadorFuerza({ password }) {\n  // Calcular fuerza de la contrase\u00f1a\n  const calcularFuerza = () =&gt; {\n    let puntos = 0\n\n    // Longitud\n    if (password.length &gt;= 8) puntos++\n    if (password.length &gt;= 12) puntos++\n    if (password.length &gt;= 16) puntos++\n\n    // Complejidad\n    if (/[a-z]/.test(password)) puntos++\n    if (/[A-Z]/.test(password)) puntos++\n    if (/\\d/.test(password)) puntos++\n    if (/[!@#$%^&amp;*(),.?\":{}|&lt;&gt;]/.test(password)) puntos++\n\n    // Patrones comunes (resta puntos)\n    if (/12345|password|qwerty/i.test(password)) puntos -= 2\n\n    return Math.max(0, Math.min(5, Math.floor(puntos * 5 / 7)))\n  }\n\n  const fuerza = calcularFuerza()\n  const niveles = ['Muy d\u00e9bil', 'D\u00e9bil', 'Aceptable', 'Buena', 'Fuerte', 'Muy fuerte']\n  const colores = ['#e74c3c', '#e67e22', '#f39c12', '#f1c40f', '#2ecc71', '#27ae60']\n\n  // Sugerencias basadas en lo que falta\n  const sugerencias = []\n  if (password.length &lt; 8) sugerencias.push('Usa al menos 8 caracteres')\n  if (!/[a-z]/.test(password)) sugerencias.push('Agrega letras min\u00fasculas')\n  if (!/[A-Z]/.test(password)) sugerencias.push('Agrega letras may\u00fasculas')\n  if (!/\\d/.test(password)) sugerencias.push('Agrega n\u00fameros')\n  if (!/[!@#$%^&amp;*(),.?\":{}|&lt;&gt;]/.test(password)) sugerencias.push('Agrega s\u00edmbolos especiales')\n\n  return (\n    &lt;div className=\"indicador-fuerza\"&gt;\n      &lt;div className=\"barras-fuerza\"&gt;\n        {[...Array(6)].map((_, i) =&gt; (\n          &lt;div\n            key={i}\n            className=\"barra\"\n            style={{\n              backgroundColor: i &lt;= fuerza ? colores[fuerza] : '#ecf0f1',\n              height: `${10 + i * 2}px`\n            }}\n          /&gt;\n        ))}\n      &lt;/div&gt;\n\n      &lt;div className=\"fuerza-info\"&gt;\n        &lt;span \n          className=\"nivel\"\n          style={{ color: colores[fuerza] }}\n        &gt;\n          {niveles[fuerza]}\n        &lt;/span&gt;\n\n        {sugerencias.length &gt; 0 &amp;&amp; (\n          &lt;ul className=\"sugerencias\"&gt;\n            {sugerencias.map((sugerencia, index) =&gt; (\n              &lt;li key={index}&gt;{sugerencia}&lt;/li&gt;\n            ))}\n          &lt;/ul&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default IndicadorFuerza\n</code></pre>"},{"location":"ejemplo_08/#12-app-principal-appjsx","title":"12. App principal (App.jsx)","text":"<pre><code>import FormularioRegistro from './components/FormularioRegistro'\nimport './App.css'\n\nfunction App() {\n  return (\n    &lt;div className=\"app\"&gt;\n      &lt;div className=\"container\"&gt;\n        &lt;FormularioRegistro /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre>"},{"location":"ejemplo_08/#13-estilos-css-appcss","title":"13. Estilos CSS (App.css)","text":"<pre><code>/* Variables */\n:root {\n  --color-primario: #3498db;\n  --color-primario-hover: #2980b9;\n  --color-secundario: #95a5a6;\n  --color-exito: #2ecc71;\n  --color-error: #e74c3c;\n  --color-advertencia: #f39c12;\n  --color-fondo: #f8f9fa;\n  --color-borde: #dee2e6;\n  --sombra-suave: 0 2px 4px rgba(0,0,0,0.1);\n  --sombra-media: 0 4px 6px rgba(0,0,0,0.1);\n}\n\n/* Reset y base */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  background-color: var(--color-fondo);\n  color: #333;\n  line-height: 1.6;\n}\n\n.app {\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n}\n\n.container {\n  width: 100%;\n  max-width: 800px;\n}\n\n/* Formulario principal */\n.formulario-registro {\n  background: white;\n  border-radius: 8px;\n  box-shadow: var(--sombra-media);\n  padding: 2rem;\n}\n\n.formulario-registro h1 {\n  text-align: center;\n  margin-bottom: 2rem;\n  color: var(--color-primario);\n}\n\n/* Indicador de progreso */\n.indicador-progreso {\n  margin-bottom: 3rem;\n}\n\n.barra-progreso {\n  height: 4px;\n  background-color: var(--color-borde);\n  border-radius: 2px;\n  overflow: hidden;\n  margin-bottom: 2rem;\n}\n\n.progreso-fill {\n  height: 100%;\n  background-color: var(--color-primario);\n  transition: width 0.3s ease;\n}\n\n.pasos {\n  display: flex;\n  justify-content: space-between;\n}\n\n.paso {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  opacity: 0.5;\n  transition: opacity 0.3s;\n}\n\n.paso.activo,\n.paso.completado {\n  opacity: 1;\n}\n\n.paso-circulo {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: var(--color-borde);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n  transition: all 0.3s;\n}\n\n.paso.activo .paso-circulo {\n  background-color: var(--color-primario);\n  color: white;\n  transform: scale(1.1);\n}\n\n.paso.completado .paso-circulo {\n  background-color: var(--color-exito);\n  color: white;\n}\n\n.paso-nombre {\n  font-size: 0.875rem;\n  text-align: center;\n}\n\n/* Pasos del formulario */\n.paso-formulario {\n  min-height: 400px;\n}\n\n.paso-formulario h2 {\n  margin-bottom: 0.5rem;\n  color: #2c3e50;\n}\n\n.paso-formulario &gt; p {\n  color: #7f8c8d;\n  margin-bottom: 2rem;\n}\n\n/* Campos del formulario */\n.campo {\n  margin-bottom: 1.5rem;\n}\n\n.campo label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #495057;\n}\n\n.asterisco {\n  color: var(--color-error);\n  margin-left: 0.25rem;\n}\n\n.campo-input-wrapper {\n  position: relative;\n}\n\n.campo input,\n.campo select,\n.campo textarea {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--color-borde);\n  border-radius: 4px;\n  font-size: 1rem;\n  transition: border-color 0.2s;\n}\n\n.campo input:focus,\n.campo select:focus,\n.campo textarea:focus {\n  outline: none;\n  border-color: var(--color-primario);\n  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);\n}\n\n.campo-error input {\n  border-color: var(--color-error);\n}\n\n.campo-error input:focus {\n  box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.1);\n}\n\n.campo-ayuda {\n  display: block;\n  margin-top: 0.25rem;\n  font-size: 0.875rem;\n  color: #6c757d;\n}\n\n.campo-error-mensaje {\n  display: block;\n  margin-top: 0.25rem;\n  font-size: 0.875rem;\n  color: var(--color-error);\n}\n\n/* Toggle password */\n.toggle-password {\n  position: absolute;\n  right: 0.75rem;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  opacity: 0.6;\n  transition: opacity 0.2s;\n}\n\n.toggle-password:hover {\n  opacity: 1;\n}\n\n/* Grids */\n.grid-2-columnas {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n}\n\n.grid-3-columnas {\n  display: grid;\n  grid-template-columns: 2fr 1fr 1fr;\n  gap: 1rem;\n}\n\n/* Radio buttons */\n.grupo-radios {\n  border: 1px solid var(--color-borde);\n  border-radius: 4px;\n  padding: 1rem;\n  margin-bottom: 1.5rem;\n}\n\n.grupo-radios legend {\n  font-weight: 500;\n  color: #495057;\n  padding: 0 0.5rem;\n}\n\n.radio-label {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  cursor: pointer;\n}\n\n.radio-label:last-child {\n  margin-bottom: 0;\n}\n\n.radio-label input {\n  margin-right: 0.5rem;\n}\n\n/* Checkboxes */\n.checkboxes {\n  margin-bottom: 1.5rem;\n}\n\n.checkbox-label {\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n  cursor: pointer;\n}\n\n.checkbox-label input {\n  margin-right: 0.5rem;\n  margin-top: 0.25rem;\n}\n\n.checkbox-label a {\n  color: var(--color-primario);\n  text-decoration: none;\n}\n\n.checkbox-label a:hover {\n  text-decoration: underline;\n}\n\n/* Indicador de fuerza */\n.indicador-fuerza {\n  margin-top: -1rem;\n  margin-bottom: 1.5rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-radius: 4px;\n}\n\n.barras-fuerza {\n  display: flex;\n  gap: 4px;\n  align-items: flex-end;\n  height: 30px;\n  margin-bottom: 0.5rem;\n}\n\n.barras-fuerza .barra {\n  flex: 1;\n  border-radius: 2px;\n  transition: all 0.3s;\n}\n\n.fuerza-info .nivel {\n  font-weight: 500;\n  font-size: 0.875rem;\n}\n\n.sugerencias {\n  margin-top: 0.5rem;\n  padding-left: 1.25rem;\n  font-size: 0.875rem;\n  color: #6c757d;\n}\n\n/* Resumen */\n.resumen .seccion-resumen {\n  background-color: #f8f9fa;\n  border-radius: 4px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n}\n\n.seccion-resumen h3 {\n  margin-bottom: 1rem;\n  color: #495057;\n  font-size: 1.1rem;\n}\n\n.campo-resumen {\n  display: flex;\n  margin-bottom: 0.5rem;\n}\n\n.campo-resumen dt {\n  font-weight: 500;\n  margin-right: 1rem;\n  min-width: 150px;\n}\n\n.campo-resumen dd {\n  color: #6c757d;\n}\n\n.mensaje-confirmacion {\n  background-color: #fff3cd;\n  border: 1px solid #ffeaa7;\n  border-radius: 4px;\n  padding: 1rem;\n  margin-top: 1.5rem;\n}\n\n.mensaje-confirmacion p {\n  margin: 0;\n  color: #856404;\n}\n\n/* Botones */\n.botones-navegacion {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n  padding-top: 2rem;\n  border-top: 1px solid var(--color-borde);\n}\n\n.btn-primario,\n.btn-secundario {\n  padding: 0.75rem 2rem;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.btn-primario {\n  background-color: var(--color-primario);\n  color: white;\n}\n\n.btn-primario:hover:not(:disabled) {\n  background-color: var(--color-primario-hover);\n  transform: translateY(-1px);\n  box-shadow: var(--sombra-media);\n}\n\n.btn-primario:disabled {\n  background-color: #cbd5e0;\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n.btn-secundario {\n  background-color: white;\n  color: var(--color-primario);\n  border: 1px solid var(--color-primario);\n}\n\n.btn-secundario:hover {\n  background-color: #f8f9fa;\n}\n\n/* Estados de loading */\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n.spinner {\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  border: 2px solid #fff;\n  border-top-color: transparent;\n  border-radius: 50%;\n  animation: spin 0.8s linear infinite;\n  margin-right: 0.5rem;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .app {\n    padding: 1rem;\n  }\n\n  .formulario-registro {\n    padding: 1.5rem;\n  }\n\n  .grid-2-columnas,\n  .grid-3-columnas {\n    grid-template-columns: 1fr;\n  }\n\n  .pasos {\n    flex-wrap: wrap;\n  }\n\n  .paso-nombre {\n    font-size: 0.75rem;\n  }\n\n  .campo-resumen {\n    flex-direction: column;\n  }\n\n  .campo-resumen dt {\n    margin-bottom: 0.25rem;\n  }\n}\n\n/* Animaciones */\n.campo {\n  animation: fadeIn 0.3s ease-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Transiciones suaves entre pasos */\n.paso-formulario {\n  animation: slideIn 0.3s ease-out;\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n</code></pre>"},{"location":"ejemplo_08/#conceptos-aplicados-en-el-ejercicio","title":"\ud83e\uddea Conceptos aplicados en el ejercicio","text":""},{"location":"ejemplo_08/#estados-derivados-implementados","title":"Estados derivados implementados:","text":"<ol> <li>Validaci\u00f3n en tiempo real</li> <li>Errores calculados autom\u00e1ticamente basados en valores</li> <li> <p>No se almacenan, se derivan de los valores actuales</p> </li> <li> <p>Progreso del formulario</p> </li> <li>Porcentaje completado calculado din\u00e1micamente</li> <li> <p>Estado del paso (v\u00e1lido/inv\u00e1lido) derivado</p> </li> <li> <p>Informaci\u00f3n contextual</p> </li> <li>Edad calculada de la fecha de nacimiento</li> <li>Fuerza de la contrase\u00f1a derivada de su contenido</li> <li>Disponibilidad del bot\u00f3n basada en validaci\u00f3n</li> </ol>"},{"location":"ejemplo_08/#formateo-automatico","title":"Formateo autom\u00e1tico:","text":"<ol> <li>Tel\u00e9fono: (555) 123-4567</li> <li>Nombres: Capitalizaci\u00f3n autom\u00e1tica</li> <li>Espacios: Limpieza de espacios extras</li> </ol>"},{"location":"ejemplo_08/#optimizaciones","title":"Optimizaciones:","text":"<ol> <li>useMemo para c\u00e1lculos costosos (validaciones)</li> <li>useCallback para funciones estables</li> <li>Debounce en verificaci\u00f3n de usuario</li> <li>Lazy evaluation de errores</li> </ol>"},{"location":"ejemplo_08/#ux-mejorada","title":"UX mejorada:","text":"<ol> <li>Navegaci\u00f3n intuitiva entre pasos</li> <li>Validaci\u00f3n progresiva (no todo al final)</li> <li>Feedback visual inmediato</li> <li>Mensajes de ayuda contextuales</li> <li>Indicadores de progreso claros</li> </ol>"},{"location":"ejemplo_08/#caracteristicas-destacadas","title":"\ud83c\udfaf Caracter\u00edsticas destacadas","text":""},{"location":"ejemplo_08/#1-formulario-multi-paso","title":"1. Formulario multi-paso","text":"<ul> <li>Separaci\u00f3n l\u00f3gica de informaci\u00f3n</li> <li>Validaci\u00f3n por pasos</li> <li>Navegaci\u00f3n con estado persistente</li> </ul>"},{"location":"ejemplo_08/#2-hook-reutilizable","title":"2. Hook reutilizable","text":"<ul> <li><code>useFormulario</code> maneja toda la l\u00f3gica</li> <li>F\u00e1cil de extender para otros formularios</li> <li>Separaci\u00f3n de responsabilidades</li> </ul>"},{"location":"ejemplo_08/#3-validaciones-componibles","title":"3. Validaciones componibles","text":"<ul> <li>Funciones de validaci\u00f3n reutilizables</li> <li>Combinaci\u00f3n de m\u00faltiples validaciones</li> <li>Mensajes personalizables</li> </ul>"},{"location":"ejemplo_08/#4-estados-derivados-eficientes","title":"4. Estados derivados eficientes","text":"<ul> <li>Sin duplicaci\u00f3n de estado</li> <li>C\u00e1lculos solo cuando cambian dependencias</li> <li>Fuente \u00fanica de verdad</li> </ul>"},{"location":"ejemplo_08/#5-accesibilidad","title":"5. Accesibilidad","text":"<ul> <li>Labels asociados correctamente</li> <li>ARIA attributes</li> <li>Navegaci\u00f3n por teclado</li> <li>Mensajes de error descriptivos</li> </ul>"},{"location":"ejemplo_08/#extensiones-sugeridas","title":"\ud83d\udcda Extensiones sugeridas","text":"<ol> <li> <p>Guardar progreso <pre><code>// Guardar en localStorage\nuseEffect(() =&gt; {\n  localStorage.setItem('registro-draft', JSON.stringify(valores))\n}, [valores])\n</code></pre></p> </li> <li> <p>Validaci\u00f3n as\u00edncrona <pre><code>// Verificar email \u00fanico\nconst validarEmailUnico = async (email) =&gt; {\n  const response = await fetch(`/api/check-email?email=${email}`)\n  const { existe } = await response.json()\n  return existe ? 'Este email ya est\u00e1 registrado' : ''\n}\n</code></pre></p> </li> <li> <p>Subida de avatar <pre><code>// Agregar campo de foto\n&lt;input\n  type=\"file\"\n  accept=\"image/*\"\n  onChange={handleImageUpload}\n/&gt;\n</code></pre></p> </li> <li> <p>Integraci\u00f3n con API real <pre><code>const enviarRegistro = async (datos) =&gt; {\n  const response = await fetch('/api/registro', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(datos)\n  })\n  return response.json()\n}\n</code></pre></p> </li> </ol>"},{"location":"ejemplo_08/#lecciones-aprendidas","title":"\ud83c\udf93 Lecciones aprendidas","text":"<ol> <li>Estados derivados reducen complejidad y bugs</li> <li>Formateo autom\u00e1tico mejora UX significativamente</li> <li>Validaci\u00f3n progresiva es menos frustrante</li> <li>Hooks personalizados facilitan reutilizaci\u00f3n</li> <li>Separaci\u00f3n de responsabilidades hace el c\u00f3digo mantenible</li> </ol> <p>\u00a1Con este ejercicio has aplicado conceptos avanzados de formularios y estados derivados en un escenario real y complejo!# \ud83c\udfaf Ejercicio Pr\u00e1ctico: Sistema de Registro con Formularios Avanzados</p>"},{"location":"ejemplo_08/#objetivo-del-ejercicio_1","title":"\ud83d\udccb Objetivo del ejercicio","text":"<p>Construir un sistema completo de registro de usuarios que implemente: - Formulario multi-paso con validaci\u00f3n - Estados derivados para progreso y validaci\u00f3n - Formateo autom\u00e1tico de campos - Prevenci\u00f3n de env\u00edos duplicados - Feedback visual en tiempo real</p>"},{"location":"ejemplo_08/#estructura-del-proyecto_1","title":"\ud83d\udcc1 Estructura del proyecto","text":"<pre><code>registro-avanzado/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 App.jsx\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 FormularioRegistro.jsx\n\u2502   \u2502   \u251c\u2500\u2500 PasoInformacionPersonal.jsx\n\u2502   \u2502   \u251c\u2500\u2500 PasoContacto.jsx\n\u2502   \u2502   \u251c\u2500\u2500 PasoSeguridad.jsx\n\u2502   \u2502   \u251c\u2500\u2500 ResumenRegistro.jsx\n\u2502   \u2502   \u2514\u2500\u2500 common/\n\u2502   \u2502       \u251c\u2500\u2500 Campo.jsx\n\u2502   \u2502       \u251c\u2500\u2500 IndicadorProgreso.jsx\n\u2502   \u2502       \u2514\u2500\u2500 IndicadorFuerza.jsx\n\u2502   \u251c\u2500\u2500 hooks/\n\u2502   \u2502   \u251c\u2500\u2500 useFormulario.js\n\u2502   \u2502   \u2514\u2500\u2500 useValidacion.js\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 validaciones.js\n\u2502       \u2514\u2500\u2500 formatters.js\n</code></pre>"},{"location":"ejemplo_08/#implementacion-del-sistema_1","title":"\ud83d\udd27 Implementaci\u00f3n del sistema","text":""},{"location":"ejemplo_08/#1-hook-personalizado-para-formularios-useformulariojs_1","title":"1. Hook personalizado para formularios (useFormulario.js)","text":"<pre><code>import { useState, useCallback, useMemo } from 'react'\n\nexport function useFormulario(valoresIniciales, validaciones = {}) {\n  const [valores, setValores] = useState(valoresIniciales)\n  const [tocados, setTocados] = useState({})\n  const [enviando, setEnviando] = useState(false)\n\n  // Manejar cambio de valores\n  const handleChange = useCallback((e) =&gt; {\n    const { name, value, type, checked, files } = e.target\n\n    setValores(prev =&gt; ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : \n               type === 'file' ? files[0] : \n               value\n    }))\n  }, [])\n\n  // Manejar blur\n  const handleBlur = useCallback((e) =&gt; {\n    const { name } = e.target\n    setTocados(prev =&gt; ({\n      ...prev,\n      [name]: true\n    }))\n  }, [])\n\n  // Establecer valor program\u00e1ticamente\n  const setValue = useCallback((name, value) =&gt; {\n    setValores(prev =&gt; ({\n      ...prev,\n      [name]: value\n    }))\n  }, [])\n\n  // Establecer m\u00faltiples valores\n  const setValues = useCallback((newValues) =&gt; {\n    setValores(prev =&gt; ({\n      ...prev,\n      ...newValues\n    }))\n  }, [])\n\n  // Calcular errores (estado derivado)\n  const errores = useMemo(() =&gt; {\n    const erroresCalculados = {}\n\n    Object.keys(validaciones).forEach(campo =&gt; {\n      const validacion = validaciones[campo]\n      const valor = valores[campo]\n\n      if (typeof validacion === 'function') {\n        erroresCalculados[campo] = validacion(valor, valores)\n      } else if (Array.isArray(validacion)) {\n        // M\u00faltiples validaciones\n        for (const fn of validacion) {\n          const error = fn(valor, valores)\n          if (error) {\n            erroresCalculados[campo] = error\n            break\n          }\n        }\n      }\n    })\n\n    return erroresCalculados\n  }, [valores, validaciones])\n\n  // Estados derivados \u00fatiles\n  const camposConError = Object.keys(errores).filter(campo =&gt; errores[campo])\n  const formularioValido = camposConError.length === 0\n  const porcentajeCompletado = (\n    Object.keys(valores).filter(campo =&gt; valores[campo] !== '').length / \n    Object.keys(valores).length * 100\n  )\n\n  // Resetear formulario\n  const reset = useCallback(() =&gt; {\n    setValores(valoresIniciales)\n    setTocados({})\n    setEnviando(false)\n  }, [valoresIniciales])\n\n  // Validar todo\n  const validarTodo = useCallback(() =&gt; {\n    const todosTocados = Object.keys(valores).reduce((acc, campo) =&gt; ({\n      ...acc,\n      [campo]: true\n    }), {})\n    setTocados(todosTocados)\n    return formularioValido\n  }, [valores, formularioValido])\n\n  return {\n    valores,\n    errores,\n    tocados,\n    enviando,\n    formularioValido,\n    porcentajeCompletado,\n    camposConError,\n    handleChange,\n    handleBlur,\n    setValue,\n    setValues,\n    setEnviando,\n    reset,\n    validarTodo\n  }\n}\n</code></pre>"},{"location":"ejemplo_08/#2-utilidades-de-validacion-validacionesjs_1","title":"2. Utilidades de validaci\u00f3n (validaciones.js)","text":"<pre><code>// Validaciones reutilizables\nexport const requerido = (mensaje = 'Este campo es requerido') =&gt; \n  (valor) =&gt; !valor ? mensaje : ''\n\nexport const minLength = (min, mensaje) =&gt; \n  (valor) =&gt; valor &amp;&amp; valor.length &lt; min \n    ? mensaje || `M\u00ednimo ${min} caracteres` \n    : ''\n\nexport const maxLength = (max, mensaje) =&gt; \n  (valor) =&gt; valor &amp;&amp; valor.length &gt; max \n    ? mensaje || `M\u00e1ximo ${max} caracteres` \n    : ''\n\nexport const email = (mensaje = 'Email inv\u00e1lido') =&gt; \n  (valor) =&gt; valor &amp;&amp; !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(valor) \n    ? mensaje \n    : ''\n\nexport const telefono = (mensaje = 'Tel\u00e9fono inv\u00e1lido') =&gt; \n  (valor) =&gt; {\n    const soloNumeros = valor.replace(/\\D/g, '')\n    return soloNumeros.length !== 10 ? mensaje : ''\n  }\n\nexport const contrasena = (valor) =&gt; {\n  if (!valor) return 'La contrase\u00f1a es requerida'\n  if (valor.length &lt; 8) return 'M\u00ednimo 8 caracteres'\n  if (!/[a-z]/.test(valor)) return 'Debe contener min\u00fasculas'\n  if (!/[A-Z]/.test(valor)) return 'Debe contener may\u00fasculas'\n  if (!/\\d/.test(valor)) return 'Debe contener n\u00fameros'\n  if (!/[!@#$%^&amp;*]/.test(valor)) return 'Debe contener caracteres especiales'\n  return ''\n}\n\nexport const confirmarContrasena = (valor, valores) =&gt; {\n  if (!valor) return 'Confirma tu contrase\u00f1a'\n  if (valor !== valores.contrasena) return 'Las contrase\u00f1as no coinciden'\n  return ''\n}\n\nexport const fechaNacimiento = (valor) =&gt; {\n  if (!valor) return 'La fecha es requerida'\n\n  const fecha = new Date(valor)\n  const hoy = new Date()\n  const edad = Math.floor((hoy - fecha) / (365.25 * 24 * 60 * 60 * 1000))\n\n  if (edad &lt; 18) return 'Debes ser mayor de 18 a\u00f1os'\n  if (edad &gt; 120) return 'Fecha inv\u00e1lida'\n\n  return ''\n}\n\n// Combinar validaciones\nexport const combinar = (...validaciones) =&gt; (valor, valores) =&gt; {\n  for (const validacion of validaciones) {\n    const error = validacion(valor, valores)\n    if (error) return error\n  }\n  return ''\n}\n</code></pre>"},{"location":"ejemplo_08/#3-formatters-formattersjs_1","title":"3. Formatters (formatters.js)","text":"<pre><code>// Formatear tel\u00e9fono: (555) 123-4567\nexport const formatearTelefono = (valor) =&gt; {\n  const numeros = valor.replace(/\\D/g, '')\n\n  if (numeros.length &lt;= 3) return numeros\n  if (numeros.length &lt;= 6) {\n    return `(${numeros.slice(0, 3)}) ${numeros.slice(3)}`\n  }\n  return `(${numeros.slice(0, 3)}) ${numeros.slice(3, 6)}-${numeros.slice(6, 10)}`\n}\n\n// Formatear tarjeta: 1234 5678 9012 3456\nexport const formatearTarjeta = (valor) =&gt; {\n  const numeros = valor.replace(/\\D/g, '')\n  const grupos = numeros.match(/.{1,4}/g) || []\n  return grupos.join(' ').substring(0, 19)\n}\n\n// Formatear fecha: MM/DD/YYYY\nexport const formatearFecha = (valor) =&gt; {\n  const numeros = valor.replace(/\\D/g, '')\n\n  if (numeros.length &lt;= 2) return numeros\n  if (numeros.length &lt;= 4) {\n    return `${numeros.slice(0, 2)}/${numeros.slice(2)}`\n  }\n  return `${numeros.slice(0, 2)}/${numeros.slice(2, 4)}/${numeros.slice(4, 8)}`\n}\n\n// Capitalizar nombre\nexport const capitalizarNombre = (valor) =&gt; {\n  return valor\n    .split(' ')\n    .map(palabra =&gt; palabra.charAt(0).toUpperCase() + palabra.slice(1).toLowerCase())\n    .join(' ')\n}\n\n// Limpiar espacios extras\nexport const limpiarEspacios = (valor) =&gt; {\n  return valor.replace(/\\s+/g, ' ').trim()\n}\n</code></pre>"},{"location":"ejemplo_08/#4-componente-campo-reutilizable-campojsx_1","title":"4. Componente Campo reutilizable (Campo.jsx)","text":"<pre><code>import { useState } from 'react'\n\nfunction Campo({ \n  label, \n  tipo = 'text',\n  nombre,\n  valor,\n  onChange,\n  onBlur,\n  error,\n  tocado,\n  requerido,\n  ayuda,\n  formatter,\n  ...props \n}) {\n  const [mostrarPassword, setMostrarPassword] = useState(false)\n\n  const handleChange = (e) =&gt; {\n    let nuevoValor = e.target.value\n\n    // Aplicar formatter si existe\n    if (formatter) {\n      nuevoValor = formatter(nuevoValor)\n    }\n\n    // Crear evento sint\u00e9tico con el valor formateado\n    const eventoSintetico = {\n      target: {\n        name: nombre,\n        value: nuevoValor,\n        type: tipo\n      }\n    }\n\n    onChange(eventoSintetico)\n  }\n\n  const tipoInput = tipo === 'password' &amp;&amp; mostrarPassword ? 'text' : tipo\n  const mostrarError = error &amp;&amp; tocado\n\n  return (\n    &lt;div className={`campo ${mostrarError ? 'campo-error' : ''}`}&gt;\n      &lt;label htmlFor={nombre}&gt;\n        {label}\n        {requerido &amp;&amp; &lt;span className=\"asterisco\"&gt;*&lt;/span&gt;}\n      &lt;/label&gt;\n\n      &lt;div className=\"campo-input-wrapper\"&gt;\n        &lt;input\n          id={nombre}\n          name={nombre}\n          type={tipoInput}\n          value={valor}\n          onChange={handleChange}\n          onBlur={onBlur}\n          className={mostrarError ? 'input-error' : ''}\n          aria-invalid={mostrarError}\n          aria-describedby={mostrarError ? `${nombre}-error` : undefined}\n          {...props}\n        /&gt;\n\n        {tipo === 'password' &amp;&amp; (\n          &lt;button\n            type=\"button\"\n            className=\"toggle-password\"\n            onClick={() =&gt; setMostrarPassword(!mostrarPassword)}\n            aria-label={mostrarPassword ? 'Ocultar contrase\u00f1a' : 'Mostrar contrase\u00f1a'}\n          &gt;\n            {mostrarPassword ? '\ud83d\udc41\ufe0f' : '\ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f'}\n          &lt;/button&gt;\n        )}\n      &lt;/div&gt;\n\n      {ayuda &amp;&amp; !mostrarError &amp;&amp; (\n        &lt;span className=\"campo-ayuda\"&gt;{ayuda}&lt;/span&gt;\n      )}\n\n      {mostrarError &amp;&amp; (\n        &lt;span id={`${nombre}-error`} className=\"campo-error-mensaje\"&gt;\n          {error}\n        &lt;/span&gt;\n      )}\n    &lt;/div&gt;\n  )\n}\n\nexport default Campo\n</code></pre>"},{"location":"ejemplo_08/#5-formulario-multi-paso-principal-formularioregistrojsx_1","title":"5. Formulario multi-paso principal (FormularioRegistro.jsx)","text":"<pre><code>import { useState } from 'react'\nimport { useFormulario } from '../hooks/useFormulario'\nimport PasoInformacionPersonal from './PasoInformacionPersonal'\nimport PasoContacto from './PasoContacto'\nimport PasoSeguridad from './PasoSeguridad'\nimport ResumenRegistro from './ResumenRegistro'\nimport IndicadorProgreso from './common/IndicadorProgreso'\nimport * as validaciones from '../utils/validaciones'\n\nconst PASOS = [\n  { id: 1, nombre: 'Informaci\u00f3n Personal', componente: PasoInformacionPersonal },\n  { id: 2, nombre: 'Contacto', componente: PasoContacto },\n  { id: 3, nombre: 'Seguridad', componente: PasoSeguridad },\n  { id: 4, nombre: 'Resumen', componente: ResumenRegistro }\n]\n\nfunction FormularioRegistro() {\n  const [pasoActual, setPasoActual] = useState(1)\n  const [datosGuardados, setDatosGuardados] = useState({})\n\n  const formulario = useFormulario(\n    {\n      // Informaci\u00f3n personal\n      nombre: '',\n      apellidos: '',\n      fechaNacimiento: '',\n      genero: '',\n\n      // Contacto\n      email: '',\n      telefono: '',\n      direccion: '',\n      ciudad: '',\n      codigoPostal: '',\n      pais: '',\n\n      // Seguridad\n      nombreUsuario: '',\n      contrasena: '',\n      confirmarContrasena: '',\n      preguntaSeguridad: '',\n      respuestaSeguridad: '',\n      aceptaTerminos: false,\n      recibirNotificaciones: false\n    },\n    {\n      // Validaciones por campo\n      nombre: [validaciones.requerido(), validaciones.minLength(2)],\n      apellidos: [validaciones.requerido(), validaciones.minLength(2)],\n      fechaNacimiento: validaciones.fechaNacimiento,\n      email: [validaciones.requerido(), validaciones.email()],\n      telefono: validaciones.telefono(),\n      contrasena: validaciones.contrasena,\n      confirmarContrasena: validaciones.confirmarContrasena,\n      nombreUsuario: [\n        validaciones.requerido(),\n        validaciones.minLength(4),\n        validaciones.maxLength(20)\n      ],\n      aceptaTerminos: (valor) =&gt; !valor ? 'Debes aceptar los t\u00e9rminos' : ''\n    }\n  )\n\n  // Estados derivados para validaci\u00f3n por pasos\n  const validacionPorPasos = {\n    1: ['nombre', 'apellidos', 'fechaNacimiento', 'genero'],\n    2: ['email', 'telefono', 'direccion', 'ciudad', 'codigoPostal', 'pais'],\n    3: ['nombreUsuario', 'contrasena', 'confirmarContrasena', 'aceptaTerminos']\n  }\n\n  // Estado derivado: \u00bfEl paso actual es v\u00e1lido?\n  const pasoValido = validacionPorPasos[pasoActual]?.every(\n    campo =&gt; !formulario.errores[campo] &amp;&amp; formulario.valores[campo] !== ''\n  ) ?? true\n\n  // Navegaci\u00f3n entre pasos\n  const siguientePaso = () =&gt; {\n    if (pasoActual &lt; PASOS.length) {\n      // Guardar datos del paso actual\n      const camposPaso = validacionPorPasos[pasoActual] || []\n      const datosPaso = camposPaso.reduce((acc, campo) =&gt; ({\n        ...acc,\n        [campo]: formulario.valores[campo]\n      }), {})\n\n      setDatosGuardados(prev =&gt; ({\n        ...prev,\n        ...datosPaso\n      }))\n\n      setPasoActual(pasoActual + 1)\n    }\n  }\n\n  const pasoAnterior = () =&gt; {\n    if (pasoActual &gt; 1) {\n      setPasoActual(pasoActual - 1)\n    }\n  }\n\n  // Enviar formulario\n  const handleSubmit = async (e) =&gt; {\n    e.preventDefault()\n\n    if (!formulario.validarTodo()) {\n      alert('Por favor corrige los errores antes de continuar')\n      return\n    }\n\n    formulario.setEnviando(true)\n\n    try {\n      // Simular env\u00edo a API\n      await new Promise(resolve =&gt; setTimeout(resolve, 2000))\n\n      console.log('Datos enviados:', {\n        ...datosGuardados,\n        ...formulario.valores\n      })\n\n      alert('\u00a1Registro exitoso!')\n      formulario.reset()\n      setPasoActual(1)\n      setDatosGuardados({})\n\n    } catch (error) {\n      alert('Error al registrar. Intenta nuevamente.')\n    } finally {\n      formulario.setEnviando(false)\n    }\n  }\n\n  const PasoComponente = PASOS[pasoActual - 1].componente\n\n  return (\n    &lt;div className=\"formulario-registro\"&gt;\n      &lt;h1&gt;Crear cuenta&lt;/h1&gt;\n\n      &lt;IndicadorProgreso \n        pasos={PASOS}\n        pasoActual={pasoActual}\n        completados={Object.keys(datosGuardados)}\n      /&gt;\n\n      &lt;form onSubmit={handleSubmit}&gt;\n        &lt;PasoComponente \n          formulario={formulario}\n          datosGuardados={datosGuardados}\n        /&gt;\n\n        &lt;div className=\"botones-navegacion\"&gt;\n          {pasoActual &gt; 1 &amp;&amp; (\n            &lt;button\n              type=\"button\"\n              onClick={pasoAnterior}\n              className=\"btn-secundario\"\n            &gt;\n              Anterior\n            &lt;/button&gt;\n          )}\n\n          {pasoActual &lt; PASOS.length ? (\n            &lt;button\n              type=\"button\"\n              onClick={siguientePaso}\n              disabled={!pasoValido}\n              className=\"btn-primario\"\n            &gt;\n              Siguiente\n            &lt;/button&gt;\n          ) : (\n            &lt;button\n              type=\"submit\"\n              disabled={!formulario.formularioValido || formulario.enviando}\n              className=\"btn-primario\"\n            &gt;\n              {formulario.enviando ? 'Registrando...' : 'Completar registro'}\n            &lt;/button&gt;\n          )}\n        &lt;/div&gt;\n      &lt;/form&gt;\n\n      {/* Debug info en desarrollo */}\n      {process.env.NODE_ENV === 'development' &amp;&amp; (\n        &lt;details style={{ marginTop: '2rem' }}&gt;\n          &lt;summary&gt;Debug Info&lt;/summary&gt;\n          &lt;pre&gt;{JSON.stringify({\n            pasoActual,\n            pasoValido,\n            errores: formulario.errores,\n            valores: formulario.valores,\n            porcentajeCompletado: formulario.porcentajeCompletado\n          }, null, 2)}&lt;/pre&gt;\n        &lt;/details&gt;\n      )}\n    &lt;/div&gt;\n  )\n}\n\nexport default FormularioRegistro\n</code></pre>"},{"location":"ejercicios/","title":"\ud83d\ude80 Taller de React: Mi Primera App con API","text":"<p>Duraci\u00f3n: &lt; 2 horas Nivel: Principiantes absolutos Resultado: Una aplicaci\u00f3n React funcional desplegada en internet</p>"},{"location":"ejercicios/#que-es-react","title":"\ud83d\udcda \u00bfQu\u00e9 es React?","text":"<p>React es una librer\u00eda de JavaScript creada por Facebook para construir interfaces de usuario (UI). Piensa en React como una caja de herramientas que te ayuda a crear p\u00e1ginas web interactivas y din\u00e1micas.</p>"},{"location":"ejercicios/#por-que-react-es-popular","title":"\u00bfPor qu\u00e9 React es popular?","text":"<ul> <li>\u2705 Componentes reutilizables: Como bloques de LEGO que puedes usar una y otra vez</li> <li>\u2705 F\u00e1cil de aprender: Si sabes JavaScript b\u00e1sico, puedes aprender React</li> <li>\u2705 Muy demandado: Las empresas m\u00e1s grandes del mundo lo usan</li> <li>\u2705 Comunidad gigante: Millones de desarrolladores lo usan</li> </ul>"},{"location":"ejercicios/#que-vamos-a-construir-hoy","title":"\u00bfQu\u00e9 vamos a construir hoy?","text":"<p>Una aplicaci\u00f3n que muestre posts de un blog, consumiendo datos de una API real. Al final tendr\u00e1s:</p> <ul> <li>\ud83d\udcf1 Una app React funcionando</li> <li>\ud83c\udf10 Publicada en internet (gratis)</li> <li>\ud83d\udcc2 C\u00f3digo en GitHub</li> <li>\ud83e\udde0 Conocimiento de React hooks</li> </ul>"},{"location":"ejercicios/#requisitos-previos","title":"\ud83d\udee0\ufe0f Requisitos Previos","text":""},{"location":"ejercicios/#software-necesario","title":"Software necesario:","text":"<ol> <li> <p>Node.js (versi\u00f3n 16 o superior)</p> <ul> <li>Descargar de: https://nodejs.org/</li> <li>Verificar instalaci\u00f3n: <code>node --version</code></li> </ul> </li> <li> <p>Editor de c\u00f3digo</p> <ul> <li>VS Code (recomendado): https://code.visualstudio.com/</li> <li>O cualquier editor que prefieras</li> </ul> </li> <li> <p>Git</p> <ul> <li>Descargar de: https://git-scm.com/</li> <li>Verificar instalaci\u00f3n: <code>git --version</code></li> </ul> </li> </ol>"},{"location":"ejercicios/#cuentas-necesarias","title":"Cuentas necesarias:","text":"<ul> <li>GitHub: https://github.com/ (para guardar c\u00f3digo)</li> <li>Vercel: https://vercel.com/ (para publicar la app)</li> </ul>"},{"location":"ejercicios/#parte-1-setup-del-proyecto","title":"\ud83c\udfd7\ufe0f PARTE 1: Setup del Proyecto","text":""},{"location":"ejercicios/#paso-11-crear-el-proyecto-react","title":"Paso 1.1: Crear el proyecto React","text":"<p>Abre tu terminal o consola de comandos y ejecuta:</p> <pre><code># Crear un nuevo proyecto React\nnpx create-react-app posts-app\n\n# Entrar a la carpeta del proyecto\ncd posts-app\n\n# Abrir VS Code (opcional)\ncode .\n</code></pre> <p>\ud83e\udd14 \u00bfQu\u00e9 acabamos de hacer?</p> <ul> <li><code>npx create-react-app</code> es un comando que crea un proyecto React completo</li> <li><code>posts-app</code> es el nombre de nuestra aplicaci\u00f3n</li> <li>Se crearon autom\u00e1ticamente todos los archivos necesarios</li> </ul>"},{"location":"ejercicios/#paso-12-ejecutar-el-proyecto","title":"Paso 1.2: Ejecutar el proyecto","text":"<pre><code># Iniciar el servidor de desarrollo\nnpm start\n</code></pre> <p>\ud83c\udf89 \u00a1Deber\u00edas ver una p\u00e1gina con el logo de React girando!</p> <ul> <li>La p\u00e1gina se abre autom\u00e1ticamente en: http://localhost:3000</li> <li>Cada vez que guardes cambios, la p\u00e1gina se actualiza autom\u00e1ticamente</li> </ul>"},{"location":"ejercicios/#paso-13-explorar-la-estructura-del-proyecto","title":"Paso 1.3: Explorar la estructura del proyecto","text":"<pre><code>posts-app/\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.html          # P\u00e1gina principal\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 App.js             # Componente principal\n\u2502   \u251c\u2500\u2500 App.css            # Estilos de la app\n\u2502   \u251c\u2500\u2500 index.js           # Punto de entrada\n\u2502   \u2514\u2500\u2500 ...otros archivos\n\u251c\u2500\u2500 package.json           # Configuraci\u00f3n del proyecto\n\u2514\u2500\u2500 README.md             # Documentaci\u00f3n\n</code></pre> <p>\ud83c\udfaf Archivos importantes que modificaremos:</p> <ul> <li><code>src/App.js</code> - Componente principal</li> <li><code>src/App.css</code> - Estilos</li> </ul>"},{"location":"ejercicios/#parte-2-conceptos-fundamentales-de-react","title":"\ud83e\udde0 PARTE 2: Conceptos Fundamentales de React","text":""},{"location":"ejercicios/#21-que-es-un-componente","title":"2.1: \u00bfQu\u00e9 es un Componente?","text":"<p>Un componente es como una funci\u00f3n que retorna HTML. Es un pedazo de interfaz reutilizable.</p> <pre><code>// Ejemplo simple de componente\nfunction Saludo() {\n  return &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n}\n</code></pre> <p>\ud83c\udfaf Caracter\u00edsticas importantes:</p> <ul> <li>Los componentes siempre empiezan con may\u00fascula</li> <li>Retornan JSX (HTML dentro de JavaScript)</li> <li>Son reutilizables</li> </ul>"},{"location":"ejercicios/#22-que-es-jsx","title":"2.2: \u00bfQu\u00e9 es JSX?","text":"<p>JSX es una sintaxis que nos permite escribir HTML dentro de JavaScript:</p> <pre><code>// En lugar de escribir HTML puro:\n// &lt;h1&gt;Hola&lt;/h1&gt;\n\n// En React escribimos JSX:\nconst elemento = &lt;h1&gt;\u00a1Hola desde React!&lt;/h1&gt;;\n</code></pre>"},{"location":"ejercicios/#23-hook-usestate","title":"2.3: Hook useState","text":"<p><code>useState</code> nos permite guardar y cambiar datos en nuestro componente.</p> <pre><code>import { useState } from 'react';\n\nfunction Contador() {\n  // [valor actual, funci\u00f3n para cambiar el valor]\n  const [numero, setNumero] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Contador: {numero}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setNumero(numero + 1)}&gt;\n        Aumentar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\ud83c\udfaf Puntos clave:</p> <ul> <li><code>useState(0)</code> - el valor inicial es 0</li> <li><code>numero</code> - variable que contiene el valor actual</li> <li><code>setNumero</code> - funci\u00f3n para cambiar el valor</li> <li>Cuando el estado cambia, React re-renderiza el componente</li> </ul>"},{"location":"ejercicios/#24-hook-useeffect","title":"2.4: Hook useEffect","text":"<p><code>useEffect</code> nos permite ejecutar c\u00f3digo cuando algo espec\u00edfico sucede.</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction MiComponente() {\n  const [datos, setDatos] = useState([]);\n\n  // Se ejecuta cuando el componente se monta\n  useEffect(() =&gt; {\n    console.log('\u00a1El componente se mont\u00f3!');\n    // Aqu\u00ed podemos hacer llamadas a APIs\n  }, []); // Array vac\u00edo = solo una vez\n\n  return &lt;div&gt;Mi componente&lt;/div&gt;;\n}\n</code></pre> <p>\ud83c\udfaf Casos de uso comunes:</p> <ul> <li>Llamadas a APIs</li> <li>Configurar timers</li> <li>Suscribirse a eventos</li> </ul>"},{"location":"ejercicios/#parte-3-construyendo-nuestra-app","title":"\ud83c\udfd7\ufe0f PARTE 3: Construyendo Nuestra App","text":""},{"location":"ejercicios/#paso-31-crear-la-estructura-de-carpetas","title":"Paso 3.1: Crear la estructura de carpetas","text":"<p>Dentro de <code>src/</code>, crea estas carpetas y archivos:</p> <pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 PostCard.js\n\u2502   \u2514\u2500\u2500 PostsList.js\n\u251c\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 postService.js\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 App.css\n\u2514\u2500\u2500 index.js\n</code></pre> <p>En VS Code:</p> <ol> <li>Click derecho en <code>src</code></li> <li>\"New Folder\" \u2192 <code>components</code></li> <li>\"New Folder\" \u2192 <code>services</code></li> <li>Click derecho en <code>components</code> \u2192 \"New File\" \u2192 <code>PostCard.js</code></li> <li>Repite para los dem\u00e1s archivos</li> </ol>"},{"location":"ejercicios/#paso-32-crear-el-servicio-para-la-api","title":"Paso 3.2: Crear el servicio para la API","text":"<p>\ud83d\udcc1 Archivo: <code>src/services/postService.js</code></p> <pre><code>// src/services/postService.js\n\nconst API_BASE_URL = 'https://jsonplaceholder.typicode.com';\n\n// \ud83d\udd25 Funci\u00f3n para obtener todos los posts\nexport const getAllPosts = async () =&gt; {\n  try {\n    // Hacemos la petici\u00f3n HTTP\n    const response = await fetch(`${API_BASE_URL}/posts`);\n\n    // Verificamos si la respuesta es exitosa\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    // Convertimos la respuesta a JSON\n    const posts = await response.json();\n    return posts;\n  } catch (error) {\n    console.error('Error fetching posts:', error);\n    throw error;\n  }\n};\n</code></pre> <p>\ud83e\udd14 \u00bfQu\u00e9 est\u00e1 pasando aqu\u00ed?</p> <ul> <li><code>fetch()</code> hace una petici\u00f3n HTTP a la API</li> <li><code>async/await</code> maneja c\u00f3digo as\u00edncrono de forma m\u00e1s limpia</li> <li><code>try/catch</code> maneja errores si algo sale mal</li> <li><code>export</code> nos permite usar esta funci\u00f3n en otros archivos</li> </ul> <p>\ud83d\udca1 Prueba la API: Abre en tu navegador: https://jsonplaceholder.typicode.com/posts</p>"},{"location":"ejercicios/#paso-33-crear-el-componente-postcard","title":"Paso 3.3: Crear el componente PostCard","text":"<p>\ud83d\udcc1 Archivo: <code>src/components/PostCard.js</code></p> <pre><code>// src/components/PostCard.js\nimport React from 'react';\n\n// \ud83c\udfaf Componente que recibe un post y lo muestra\nconst PostCard = ({ post }) =&gt; {\n  return (\n    &lt;div className=\"post-card\"&gt;\n      {/* Encabezado con ID y usuario */}\n      &lt;div className=\"post-header\"&gt;\n        &lt;span className=\"post-id\"&gt;#{post.id}&lt;/span&gt;\n        &lt;span className=\"post-user\"&gt;Usuario {post.userId}&lt;/span&gt;\n      &lt;/div&gt;\n\n      {/* T\u00edtulo del post */}\n      &lt;h3 className=\"post-title\"&gt;{post.title}&lt;/h3&gt;\n\n      {/* Cuerpo del post */}\n      &lt;p className=\"post-body\"&gt;{post.body}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default PostCard;\n</code></pre> <p>\ud83e\udd14 \u00bfQu\u00e9 est\u00e1 pasando aqu\u00ed?</p> <ul> <li><code>{ post }</code> - destructuring de props, recibimos un objeto post</li> <li><code>{post.title}</code> - mostramos din\u00e1micamente el t\u00edtulo del post</li> <li><code>className</code> - en React usamos className en lugar de class</li> <li><code>export default</code> - exportamos el componente para usarlo en otros archivos</li> </ul>"},{"location":"ejercicios/#paso-34-crear-el-componente-postslist","title":"Paso 3.4: Crear el componente PostsList","text":"<p>\ud83d\udcc1 Archivo: <code>src/components/PostsList.js</code></p> <pre><code>// src/components/PostsList.js\nimport React, { useState, useEffect } from 'react';\nimport PostCard from './PostCard';\nimport { getAllPosts } from '../services/postService';\n\nconst PostsList = () =&gt; {\n  // \ud83c\udfaf Estados para manejar diferentes situaciones\n  const [posts, setPosts] = useState([]);           // Array de posts\n  const [loading, setLoading] = useState(true);     // \u00bfEst\u00e1 cargando?\n  const [error, setError] = useState(null);         // \u00bfHay alg\u00fan error?\n\n  // \ud83d\udd25 useEffect - Se ejecuta cuando el componente se monta\n  useEffect(() =&gt; {\n    // Funci\u00f3n para obtener los posts\n    const fetchPosts = async () =&gt; {\n      try {\n        setLoading(true);           // Empezamos a cargar\n        setError(null);             // Limpiamos errores previos\n\n        // Llamamos a nuestra API\n        const postsData = await getAllPosts();\n\n        // Guardamos los posts en el estado\n        setPosts(postsData);\n\n      } catch (err) {\n        // Si hay error, lo guardamos\n        setError('Error al cargar los posts. Int\u00e9ntalo de nuevo.');\n        console.error('Error:', err);\n\n      } finally {\n        // Siempre quitamos el loading\n        setLoading(false);\n      }\n    };\n\n    // Ejecutamos la funci\u00f3n\n    fetchPosts();\n\n    // [] = solo se ejecuta una vez al montar el componente\n  }, []);\n\n  // \ud83c\udfaf Funci\u00f3n para recargar los posts\n  const handleRefresh = () =&gt; {\n    setLoading(true);\n    setError(null);\n\n    getAllPosts()\n      .then(postsData =&gt; setPosts(postsData))\n      .catch(err =&gt; setError('Error al recargar los posts'))\n      .finally(() =&gt; setLoading(false));\n  };\n\n  // \ud83c\udfa8 Si est\u00e1 cargando, mostramos un spinner\n  if (loading) {\n    return (\n      &lt;div className=\"loading-container\"&gt;\n        &lt;div className=\"loading-spinner\"&gt;&lt;/div&gt;\n        &lt;p&gt;Cargando posts...&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  // \ud83c\udfa8 Si hay error, mostramos mensaje de error\n  if (error) {\n    return (\n      &lt;div className=\"error-container\"&gt;\n        &lt;h3&gt;\u00a1Oops! Algo sali\u00f3 mal&lt;/h3&gt;\n        &lt;p&gt;{error}&lt;/p&gt;\n        &lt;button onClick={handleRefresh} className=\"retry-button\"&gt;\n          Intentar de nuevo\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  // \ud83c\udfa8 Si todo est\u00e1 bien, mostramos los posts\n  return (\n    &lt;div className=\"posts-container\"&gt;\n      {/* Header con informaci\u00f3n */}\n      &lt;div className=\"posts-header\"&gt;\n        &lt;h2&gt;\ud83d\udcdd Posts del Blog&lt;/h2&gt;\n        &lt;p&gt;Total de posts: {posts.length}&lt;/p&gt;\n        &lt;button onClick={handleRefresh} className=\"refresh-button\"&gt;\n          \ud83d\udd04 Actualizar\n        &lt;/button&gt;\n      &lt;/div&gt;\n\n      {/* Grid con todos los posts */}\n      &lt;div className=\"posts-grid\"&gt;\n        {posts.map(post =&gt; (\n          &lt;PostCard \n            key={post.id}    // Key \u00fanico para cada elemento\n            post={post}      // Pasamos el post como prop\n          /&gt;\n        ))}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default PostsList;\n</code></pre> <p>\ud83e\udd14 \u00bfQu\u00e9 acabamos de aprender?</p> <ul> <li>M\u00faltiples estados: loading, error, datos</li> <li>useEffect con array vac\u00edo: se ejecuta solo una vez</li> <li>Render condicional: mostramos diferentes cosas seg\u00fan el estado</li> <li>map(): convertimos un array de datos en componentes JSX</li> <li>Props: pasamos datos del padre al hijo</li> </ul>"},{"location":"ejercicios/#parte-4-actualizando-la-app-principal","title":"\ud83c\udfa8 PARTE 4: Actualizando la App Principal","text":""},{"location":"ejercicios/#paso-41-actualizar-appjs","title":"Paso 4.1: Actualizar App.js","text":"<p>\ud83d\udcc1 Archivo: <code>src/App.js</code></p> <pre><code>// src/App.js\nimport React from 'react';\nimport PostsList from './components/PostsList';\nimport './App.css';\n\nfunction App() {\n  return (\n    &lt;div className=\"App\"&gt;\n      {/* Header de la aplicaci\u00f3n */}\n      &lt;header className=\"app-header\"&gt;\n        &lt;h1&gt;\ud83d\ude80 Mi Primera App React&lt;/h1&gt;\n        &lt;p&gt;Consumiendo API de JSONPlaceholder&lt;/p&gt;\n      &lt;/header&gt;\n\n      {/* Contenido principal */}\n      &lt;main className=\"app-main\"&gt;\n        &lt;PostsList /&gt;\n      &lt;/main&gt;\n\n      {/* Footer */}\n      &lt;footer className=\"app-footer\"&gt;\n        &lt;p&gt;\n          Hecho con \u2764\ufe0f en React | \n          API: &lt;a \n            href=\"https://jsonplaceholder.typicode.com\" \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n          &gt;\n            JSONPlaceholder\n          &lt;/a&gt;\n        &lt;/p&gt;\n      &lt;/footer&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"ejercicios/#paso-42-actualizar-los-estilos","title":"Paso 4.2: Actualizar los estilos","text":"<p>\ud83d\udcc1 Archivo: <code>src/App.css</code></p> <pre><code>/* src/App.css */\n\n/* \ud83c\udfa8 Reset b\u00e1sico */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  background-color: #f5f5f5;\n  color: #333;\n  line-height: 1.6;\n}\n\n/* \ud83c\udfa8 Layout principal */\n.App {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n/* \ud83c\udfa8 Header */\n.app-header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  text-align: center;\n  padding: 2rem 1rem;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n.app-header h1 {\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  font-weight: 700;\n}\n\n/* \ud83c\udfa8 Main content */\n.app-main {\n  flex: 1;\n  padding: 2rem 1rem;\n  max-width: 1200px;\n  margin: 0 auto;\n  width: 100%;\n}\n\n/* \ud83c\udfa8 Posts header */\n.posts-header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.posts-header h2 {\n  color: #333;\n  margin-bottom: 0.5rem;\n  font-size: 2rem;\n}\n\n/* \ud83c\udfa8 Botones */\n.refresh-button, .retry-button {\n  background: #667eea;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 600;\n  transition: all 0.3s ease;\n  margin: 1rem;\n}\n\n.refresh-button:hover, .retry-button:hover {\n  background: #5a67d8;\n  transform: translateY(-2px);\n}\n\n/* \ud83c\udfa8 Grid de posts */\n.posts-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n  gap: 1.5rem;\n  margin-top: 2rem;\n}\n\n/* \ud83c\udfa8 Tarjeta de post */\n.post-card {\n  background: white;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n  border: 1px solid #e2e8f0;\n}\n\n.post-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n}\n\n.post-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 2px solid #f7fafc;\n}\n\n.post-id {\n  background: #667eea;\n  color: white;\n  padding: 0.25rem 0.75rem;\n  border-radius: 20px;\n  font-size: 0.875rem;\n  font-weight: 600;\n}\n\n.post-user {\n  color: #718096;\n  font-size: 0.875rem;\n  font-weight: 500;\n}\n\n.post-title {\n  color: #2d3748;\n  margin-bottom: 1rem;\n  font-size: 1.25rem;\n  font-weight: 600;\n  line-height: 1.4;\n  text-transform: capitalize;\n}\n\n.post-body {\n  color: #4a5568;\n  line-height: 1.6;\n}\n\n/* \ud83c\udfa8 Loading spinner */\n.loading-container {\n  text-align: center;\n  padding: 3rem;\n}\n\n.loading-spinner {\n  width: 50px;\n  height: 50px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #667eea;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin: 0 auto 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* \ud83c\udfa8 Error container */\n.error-container {\n  text-align: center;\n  padding: 3rem;\n  background: #fed7d7;\n  border: 1px solid #feb2b2;\n  border-radius: 12px;\n  margin: 2rem auto;\n  max-width: 500px;\n}\n\n.error-container h3 {\n  color: #c53030;\n  margin-bottom: 1rem;\n}\n\n/* \ud83c\udfa8 Footer */\n.app-footer {\n  background: #2d3748;\n  color: white;\n  text-align: center;\n  padding: 1.5rem;\n  margin-top: auto;\n}\n\n.app-footer a {\n  color: #667eea;\n  text-decoration: none;\n}\n\n/* \ud83c\udfa8 Responsive */\n@media (max-width: 768px) {\n  .posts-grid {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n\n  .app-main {\n    padding: 1rem;\n  }\n\n  .app-header h1 {\n    font-size: 2rem;\n  }\n}\n</code></pre>"},{"location":"ejercicios/#parte-5-probar-nuestra-app","title":"\ud83c\udf89 PARTE 5: Probar Nuestra App","text":""},{"location":"ejercicios/#paso-51-verificar-que-todo-funciona","title":"Paso 5.1: Verificar que todo funciona","text":"<p>En la terminal, aseg\u00farate de que el servidor sigue corriendo:</p> <pre><code>npm start\n</code></pre> <p>\ud83c\udfaf Deber\u00edas ver:</p> <ul> <li>\u2705 Header con el t\u00edtulo de la app</li> <li>\u2705 Loading spinner mientras cargan los posts</li> <li>\u2705 Grid con 100 posts de la API</li> <li>\u2705 Bot\u00f3n de actualizar funcionando</li> <li>\u2705 Dise\u00f1o responsive</li> </ul> <p>\ud83d\udc1b Si algo no funciona:</p> <ul> <li>Verifica que todos los archivos est\u00e9n guardados</li> <li>Revisa la consola del navegador (F12)</li> <li>Aseg\u00farate de que no hay errores de sintaxis</li> </ul>"},{"location":"ejercicios/#parte-6-git-y-github","title":"\ud83d\udce6 PARTE 6: Git y GitHub","text":""},{"location":"ejercicios/#paso-61-configurar-git-solo-primera-vez","title":"Paso 6.1: Configurar Git (solo primera vez)","text":"<pre><code># Configurar tu identidad (cambiar por tus datos)\ngit config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tu@email.com\"\n\n# Verificar configuraci\u00f3n\ngit config --list\n</code></pre>"},{"location":"ejercicios/#paso-62-inicializar-repositorio","title":"Paso 6.2: Inicializar repositorio","text":"<pre><code># Navegar a la carpeta del proyecto\ncd posts-app\n\n# Inicializar Git (si no est\u00e1 inicializado)\ngit init\n\n# Ver el estado actual\ngit status\n</code></pre>"},{"location":"ejercicios/#paso-63-hacer-el-primer-commit","title":"Paso 6.3: Hacer el primer commit","text":"<pre><code># Agregar todos los archivos\ngit add .\n\n# Crear el commit\ngit commit -m \"\ud83d\ude80 Primera versi\u00f3n de la app React\"\n\n# Verificar el commit\ngit log --oneline\n</code></pre>"},{"location":"ejercicios/#paso-64-subir-a-github","title":"Paso 6.4: Subir a GitHub","text":"<ol> <li> <p>Crear repositorio en GitHub:</p> </li> <li> <p>Ve a https://github.com/</p> </li> <li>Click en \"New repository\"</li> <li>Nombre: <code>posts-app</code></li> <li>Descripci\u00f3n: <code>Mi primera aplicaci\u00f3n React</code></li> <li>P\u00fablico o privado (tu elecci\u00f3n)</li> <li>NO marcar \"Initialize with README\"</li> <li> <p>Click \"Create repository\"</p> </li> <li> <p>Conectar y subir:</p> </li> </ol> <pre><code># Conectar con GitHub (cambiar por tu URL)\ngit remote add origin https://github.com/TU_USUARIO/posts-app.git\n\n# Subir el c\u00f3digo\ngit branch -M main\ngit push -u origin main\n</code></pre> <p>\ud83c\udf89 \u00a1Tu c\u00f3digo ahora est\u00e1 en GitHub!</p>"},{"location":"ejercicios/#parte-7-desplegar-en-vercel","title":"\ud83d\ude80 PARTE 7: Desplegar en Vercel","text":""},{"location":"ejercicios/#paso-71-preparar-el-proyecto","title":"Paso 7.1: Preparar el proyecto","text":"<pre><code># Crear una versi\u00f3n optimizada para producci\u00f3n\nnpm run build\n</code></pre> <p>Este comando crea una carpeta <code>build/</code> con la versi\u00f3n optimizada.</p>"},{"location":"ejercicios/#paso-72-desplegar-con-vercel","title":"Paso 7.2: Desplegar con Vercel","text":"<p>Opci\u00f3n A: Desde la web (Recomendado)</p> <ol> <li>Ve a https://vercel.com/</li> <li>Click \"Sign up\" o \"Login\"</li> <li>Elegir \"Continue with GitHub\"</li> <li>Autorizar Vercel en GitHub</li> <li>Click \"New Project\"</li> <li>Buscar tu repositorio <code>posts-app</code></li> <li>Click \"Import\"</li> <li>Configuraci\u00f3n autom\u00e1tica (React es detectado autom\u00e1ticamente)</li> <li>Click \"Deploy\"</li> <li>\u00a1Esperar 1-2 minutos!</li> </ol> <p>\ud83c\udf89 \u00a1Tu app est\u00e1 en vivo en internet!</p>"},{"location":"ejercicios/#paso-73-verificar-el-despliegue","title":"Paso 7.3: Verificar el despliegue","text":"<p>Vercel te dar\u00e1 una URL como: <code>https://posts-app-xxx.vercel.app</code></p> <p>\ud83c\udfaf Prueba que funciona:</p> <ul> <li>\u2705 La app carga correctamente</li> <li>\u2705 Los posts se muestran</li> <li>\u2705 Los botones funcionan</li> <li>\u2705 Es responsive en m\u00f3vil</li> </ul>"},{"location":"ejercicios/#que-aprendimos-hoy","title":"\ud83c\udfaf \u00bfQu\u00e9 Aprendimos Hoy?","text":""},{"location":"ejercicios/#conceptos-de-react","title":"Conceptos de React:","text":"<ul> <li>\u2705 Componentes: Bloques reutilizables de UI</li> <li>\u2705 JSX: HTML dentro de JavaScript</li> <li>\u2705 useState: Para manejar estado que cambia</li> <li>\u2705 useEffect: Para efectos secundarios (APIs)</li> <li>\u2705 Props: Pasar datos entre componentes</li> </ul>"},{"location":"ejercicios/#conceptos-de-desarrollo","title":"Conceptos de desarrollo:","text":"<ul> <li>\u2705 API consumption: Hacer peticiones HTTP</li> <li>\u2705 async/await: Manejar c\u00f3digo as\u00edncrono</li> <li>\u2705 Error handling: Manejar errores gracefully</li> <li>\u2705 Git: Control de versiones</li> <li>\u2705 Deploy: Publicar en internet</li> </ul>"},{"location":"ejercicios/#resultado-final","title":"Resultado final:","text":"<ul> <li>\ud83c\udf89 Una app React funcional</li> <li>\ud83c\udf10 Publicada en internet</li> <li>\ud83d\udcc2 C\u00f3digo en GitHub</li> <li>\ud83e\udde0 Fundamentos de React</li> </ul>"},{"location":"ejercicios/#proximos-pasos-para-casa","title":"\ud83d\ude80 Pr\u00f3ximos Pasos (Para Casa)","text":""},{"location":"ejercicios/#mejoras-que-puedes-hacer","title":"Mejoras que puedes hacer:","text":"<ol> <li>Agregar b\u00fasqueda:</li> </ol> <pre><code>const [searchTerm, setSearchTerm] = useState('');\nconst filteredPosts = posts.filter(post =&gt; \n  post.title.toLowerCase().includes(searchTerm.toLowerCase())\n);\n</code></pre> <ol> <li> <p>Agregar paginaci\u00f3n:</p> <ul> <li>Mostrar solo 10 posts por p\u00e1gina</li> <li>Botones \"Anterior\" y \"Siguiente\"</li> </ul> </li> <li> <p>Agregar filtros:</p> <ul> <li>Filtrar por usuario</li> <li>Ordenar por t\u00edtulo o ID</li> </ul> </li> <li> <p>Mejorar el dise\u00f1o:</p> <ul> <li>Agregar modo oscuro</li> <li>Animaciones con CSS</li> <li>Mejores colores</li> </ul> </li> <li> <p>Agregar m\u00e1s funcionalidades:</p> <ul> <li>Ver detalles de un post</li> <li>Agregar comentarios</li> <li>Crear nuevos posts</li> </ul> </li> </ol>"},{"location":"ejercicios/#recursos-para-seguir-aprendiendo","title":"Recursos para seguir aprendiendo:","text":"<ul> <li>\ud83d\udcda Documentaci\u00f3n oficial: https://reactjs.org/</li> <li>\ud83c\udfa5 Videos: Buscar \"React tutorials\" en YouTube</li> <li>\ud83c\udfd7\ufe0f Proyectos: Hacer m\u00e1s apps peque\u00f1as</li> <li>\ud83d\udc65 Comunidad: Unirse a grupos de React en Discord/Slack</li> </ul>"},{"location":"ejercicios/#resolucion-de-problemas-comunes","title":"\ud83d\udd27 Resoluci\u00f3n de Problemas Comunes","text":""},{"location":"ejercicios/#npm-no-es-reconocido","title":"\"npm no es reconocido\"","text":"<ul> <li>Instalar Node.js desde https://nodejs.org/</li> <li>Reiniciar la terminal</li> </ul>"},{"location":"ejercicios/#module-not-found","title":"\"Module not found\"","text":"<ul> <li>Verificar que est\u00e1s en la carpeta correcta: <code>cd posts-app</code></li> <li>Reinstalar dependencias: <code>rm -rf node_modules &amp;&amp; npm install</code></li> </ul>"},{"location":"ejercicios/#error-de-cors","title":"Error de CORS","text":"<ul> <li>La API de JSONPlaceholder permite CORS, no deber\u00eda haber problemas</li> <li>Si persiste, verificar la URL de la API</li> </ul>"},{"location":"ejercicios/#error-al-hacer-push-a-github","title":"Error al hacer push a GitHub","text":"<ul> <li>Verificar que el repositorio existe en GitHub</li> <li>Verificar credenciales: <code>git config --list</code></li> <li>Verificar la URL: <code>git remote -v</code></li> </ul>"},{"location":"ejercicios/#error-en-vercel","title":"Error en Vercel","text":"<ul> <li>Verificar que el proyecto compila localmente: <code>npm run build</code></li> <li>Revisar los logs en el dashboard de Vercel</li> <li>Asegurarse de que el repositorio est\u00e1 conectado</li> </ul>"},{"location":"ejercicios/#felicitaciones","title":"\ud83c\udf89 \u00a1Felicitaciones!","text":"<p>Has creado tu primera aplicaci\u00f3n React que:</p> <ul> <li>\u2705 Consume una API real</li> <li>\u2705 Maneja estados complejos</li> <li>\u2705 Tiene buen dise\u00f1o</li> <li>\u2705 Est\u00e1 publicada en internet</li> <li>\u2705 Tiene el c\u00f3digo en GitHub</li> </ul> <p>\u00a1Ahora eres oficialmente un desarrollador React! \ud83d\ude80</p> <p>\u00bfListo para el siguiente desaf\u00edo? \u00a1Sigue practicando y construyendo m\u00e1s proyectos!</p>"},{"location":"ejercicios_react_vite/","title":"Taller de React: Consumo de API y Despliegue","text":""},{"location":"ejercicios_react_vite/#descripcion","title":"\ud83d\udccb Descripci\u00f3n","text":"<p>En este taller aprenderemos a crear una aplicaci\u00f3n React desde cero, consumir la API JSONPlaceholder para mostrar posts, implementar un sistema simple de cach\u00e9 del lado del cliente, usar Git para control de versiones y finalmente desplegar la aplicaci\u00f3n en Vercel.</p>"},{"location":"ejercicios_react_vite/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<ul> <li>Crear una aplicaci\u00f3n React desde cero</li> <li>Consumir una API externa (JSONPlaceholder)</li> <li>Implementar cach\u00e9 b\u00e1sico en el cliente</li> <li>Usar Git para control de versiones</li> <li>Desplegar la aplicaci\u00f3n en Vercel</li> </ul>"},{"location":"ejercicios_react_vite/#requisitos-previos","title":"\ud83d\udd27 Requisitos previos","text":"<ul> <li>Node.js instalado (versi\u00f3n 14 o superior)</li> <li>Editor de c\u00f3digo (VS Code recomendado)</li> <li>Conocimientos b\u00e1sicos de JavaScript</li> <li>Cuenta de GitHub</li> <li>Cuenta de Vercel (crearemos una durante el taller)</li> </ul>"},{"location":"ejercicios_react_vite/#paso-1-configuracion-inicial-del-proyecto","title":"\ud83d\ude80 Paso 1: Configuraci\u00f3n inicial del proyecto","text":""},{"location":"ejercicios_react_vite/#11-crear-una-nueva-aplicacion-react-con-vite","title":"1.1 Crear una nueva aplicaci\u00f3n React con Vite","text":"<p>Vite es una herramienta de compilaci\u00f3n que proporciona una experiencia de desarrollo m\u00e1s r\u00e1pida comparada con Create React App.</p> <p>Abre tu terminal y ejecuta:</p> <pre><code># Crear proyecto con Vite\nnpm create vite@latest mi-primera-app-react -- --template react\n\n# Entrar al directorio del proyecto\ncd mi-primera-app-react\n\n# Instalar dependencias\nnpm install\n</code></pre>"},{"location":"ejercicios_react_vite/#12-estructura-inicial-del-proyecto","title":"1.2 Estructura inicial del proyecto","text":"<p>Exploremos la estructura de archivos generada:</p> <ul> <li><code>src/</code>: Directorio principal donde escribiremos nuestro c\u00f3digo</li> <li><code>main.jsx</code>: Punto de entrada de la aplicaci\u00f3n</li> <li><code>App.jsx</code>: Componente principal</li> <li><code>public/</code>: Archivos est\u00e1ticos</li> <li><code>index.html</code>: Archivo HTML principal</li> <li><code>package.json</code>: Configuraci\u00f3n del proyecto</li> </ul>"},{"location":"ejercicios_react_vite/#13-iniciar-el-servidor-de-desarrollo","title":"1.3 Iniciar el servidor de desarrollo","text":"<pre><code>npm run dev\n</code></pre> <p>Abre tu navegador en http://localhost:5173 (o el puerto que te indique la terminal).</p>"},{"location":"ejercicios_react_vite/#paso-2-creacion-de-estructura-de-carpetas","title":"\ud83d\udcc1 Paso 2: Creaci\u00f3n de estructura de carpetas","text":""},{"location":"ejercicios_react_vite/#21-organizar-la-estructura-del-proyecto","title":"2.1 Organizar la estructura del proyecto","text":"<pre><code># Crear carpetas para componentes y servicios\nmkdir -p src/components src/services\n</code></pre>"},{"location":"ejercicios_react_vite/#22-explicacion-de-la-estructura","title":"2.2 Explicaci\u00f3n de la estructura","text":"<ul> <li><code>components/</code>: Contendr\u00e1 todos nuestros componentes React</li> <li><code>services/</code>: Contendr\u00e1 el c\u00f3digo para interactuar con la API</li> </ul>"},{"location":"ejercicios_react_vite/#paso-3-creacion-de-los-componentes-principales","title":"\ud83e\udde9 Paso 3: Creaci\u00f3n de los componentes principales","text":""},{"location":"ejercicios_react_vite/#31-crear-el-componente-postlist","title":"3.1 Crear el componente PostList","text":"<p>Este componente mostrar\u00e1 la lista de posts obtenidos de la API.</p> <p>Crea el archivo <code>src/components/PostList.jsx</code>:</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction PostList({ onSelectPost }) {\n  // Estado para almacenar los posts y el estado de carga\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // useEffect se ejecuta cuando el componente se monta\n  useEffect(() =&gt; {\n    // Funci\u00f3n para obtener los posts de la API\n    const fetchPosts = async () =&gt; {\n      try {\n        // Por ahora, hacemos la petici\u00f3n directamente aqu\u00ed\n        // M\u00e1s tarde la moveremos a un servicio\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n\n        if (!response.ok) {\n          throw new Error(`Error HTTP: ${response.status}`);\n        }\n\n        const data = await response.json();\n        setPosts(data); // Guardamos los posts en el estado\n      } catch (error) {\n        console.error(\"Error al cargar posts:\", error);\n      } finally {\n        setLoading(false); // Marcamos que ya termin\u00f3 la carga\n      }\n    };\n\n    fetchPosts(); // Llamamos a la funci\u00f3n\n  }, []); // El array vac\u00edo significa que solo se ejecuta una vez al montar el componente\n\n  // Si est\u00e1 cargando, mostramos un mensaje\n  if (loading) return &lt;p&gt;Cargando posts...&lt;/p&gt;;\n\n  return (\n    &lt;div className=\"post-list\"&gt;\n      &lt;h2&gt;Listado de Posts&lt;/h2&gt;\n      {/* Iteramos sobre la lista de posts */}\n      {posts.map(post =&gt; (\n        &lt;div \n          key={post.id} \n          className=\"post-card\"\n          onClick={() =&gt; onSelectPost(post.id)} // Al hacer clic, llamamos a la funci\u00f3n que nos pasaron\n        &gt;\n          &lt;h3&gt;{post.title}&lt;/h3&gt;\n          &lt;p&gt;{post.body.substring(0, 100)}...&lt;/p&gt; {/* Mostramos solo una parte del contenido */}\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\nexport default PostList;\n</code></pre>"},{"location":"ejercicios_react_vite/#32-crear-el-componente-postdetail","title":"3.2 Crear el componente PostDetail","text":"<p>Este componente mostrar\u00e1 los detalles de un post espec\u00edfico.</p> <p>Crea el archivo <code>src/components/PostDetail.jsx</code>:</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction PostDetail({ id, onBack }) {\n  // Estados para el post y la carga\n  const [post, setPost] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Obtener los detalles del post cuando cambia el id\n  useEffect(() =&gt; {\n    const fetchPost = async () =&gt; {\n      try {\n        // Por ahora, hacemos la petici\u00f3n directamente aqu\u00ed\n        const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);\n\n        if (!response.ok) {\n          throw new Error(`Error HTTP: ${response.status}`);\n        }\n\n        const data = await response.json();\n        setPost(data);\n      } catch (error) {\n        console.error(`Error al cargar post ${id}:`, error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPost();\n  }, [id]); // Este efecto se ejecuta cuando cambia el id\n\n  // Estados de carga y error\n  if (loading) return &lt;p&gt;Cargando detalles del post...&lt;/p&gt;;\n  if (!post) return &lt;p&gt;Post no encontrado&lt;/p&gt;;\n\n  return (\n    &lt;div className=\"post-detail\"&gt;\n      &lt;h2&gt;{post.title}&lt;/h2&gt;\n      &lt;p&gt;{post.body}&lt;/p&gt;\n      &lt;p&gt;&lt;small&gt;Post ID: {post.id} - Usuario ID: {post.userId}&lt;/small&gt;&lt;/p&gt;\n      &lt;button onClick={onBack}&gt;Volver a la lista&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default PostDetail;\n</code></pre>"},{"location":"ejercicios_react_vite/#33-actualizar-appjsx","title":"3.3 Actualizar App.jsx","text":"<p>Ahora vamos a modificar el componente principal para usar nuestros nuevos componentes.</p> <p>Modifica el archivo <code>src/App.jsx</code>:</p> <pre><code>import { useState } from 'react';\nimport PostList from './components/PostList';\nimport PostDetail from './components/PostDetail';\nimport './App.css';\n\nfunction App() {\n  // Estado para almacenar el ID del post seleccionado\n  const [selectedPostId, setSelectedPostId] = useState(null);\n\n  return (\n    &lt;div className=\"app\"&gt;\n      &lt;header&gt;\n        &lt;h1&gt;Mi Primera App React - JSONPlaceholder&lt;/h1&gt;\n      &lt;/header&gt;\n\n      &lt;main&gt;\n        {selectedPostId ? (\n          // Si hay un post seleccionado, mostramos sus detalles\n          &lt;PostDetail \n            id={selectedPostId} \n            onBack={() =&gt; setSelectedPostId(null)} \n          /&gt;\n        ) : (\n          // Si no, mostramos la lista de posts\n          &lt;PostList onSelectPost={setSelectedPostId} /&gt;\n        )}\n      &lt;/main&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"ejercicios_react_vite/#paso-4-creacion-del-servicio-para-consumir-la-api","title":"\ud83d\udd04 Paso 4: Creaci\u00f3n del servicio para consumir la API","text":""},{"location":"ejercicios_react_vite/#41-crear-el-servicio-de-posts","title":"4.1 Crear el servicio de posts","text":"<p>Vamos a mover la l\u00f3gica de consumo de API a un servicio separado.</p> <p>Crea el archivo <code>src/services/postService.js</code>:</p> <pre><code>// Implementaci\u00f3n simple de cach\u00e9 del lado del cliente\nconst cache = {\n  posts: null,           // Almacenar\u00e1 todos los posts\n  postDetails: {},       // Almacenar\u00e1 posts individuales por ID\n  timestamp: null,       // Cu\u00e1ndo se actualiz\u00f3 por \u00faltima vez la cach\u00e9\n  // Cach\u00e9 v\u00e1lido por 5 minutos (300,000 ms)\n  isValid: () =&gt; cache.timestamp &amp;&amp; (Date.now() - cache.timestamp &lt; 5 * 60 * 1000)\n};\n\n// Funci\u00f3n para obtener todos los posts\nexport async function getPosts() {\n  // Si tenemos datos en cach\u00e9 v\u00e1lidos, los devolvemos\n  if (cache.posts &amp;&amp; cache.isValid()) {\n    console.log('Usando posts desde cach\u00e9');\n    return cache.posts;\n  }\n\n  // Si no hay cach\u00e9 o expir\u00f3, hacemos la petici\u00f3n\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n\n    if (!response.ok) {\n      throw new Error(`Error HTTP: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    // Actualizamos la cach\u00e9\n    cache.posts = data;\n    cache.timestamp = Date.now();\n\n    return data;\n  } catch (error) {\n    console.error(\"Error en getPosts:\", error);\n    throw error;\n  }\n}\n\n// Funci\u00f3n para obtener un post por su ID\nexport async function getPostById(id) {\n  // Si tenemos el post espec\u00edfico en cach\u00e9 y es v\u00e1lido, lo devolvemos\n  if (cache.postDetails[id] &amp;&amp; cache.isValid()) {\n    console.log(`Usando post ${id} desde cach\u00e9`);\n    return cache.postDetails[id];\n  }\n\n  try {\n    const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);\n\n    if (!response.ok) {\n      throw new Error(`Error HTTP: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    // Actualizamos la cach\u00e9\n    cache.postDetails[id] = data;\n    cache.timestamp = Date.now();\n\n    return data;\n  } catch (error) {\n    console.error(`Error en getPostById(${id}):`, error);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"ejercicios_react_vite/#42-actualizar-los-componentes-para-usar-el-servicio","title":"4.2 Actualizar los componentes para usar el servicio","text":"<p>Actualiza <code>src/components/PostList.jsx</code>:</p> <pre><code>import { useState, useEffect } from 'react';\nimport { getPosts } from '../services/postService';\n\nfunction PostList({ onSelectPost }) {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    const fetchPosts = async () =&gt; {\n      try {\n        // Ahora usamos el servicio en lugar de hacer la petici\u00f3n directamente\n        const data = await getPosts();\n        setPosts(data);\n      } catch (error) {\n        console.error(\"Error al cargar posts:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPosts();\n  }, []);\n\n  if (loading) return &lt;p&gt;Cargando posts...&lt;/p&gt;;\n\n  return (\n    &lt;div className=\"post-list\"&gt;\n      &lt;h2&gt;Listado de Posts&lt;/h2&gt;\n      {posts.map(post =&gt; (\n        &lt;div \n          key={post.id} \n          className=\"post-card\"\n          onClick={() =&gt; onSelectPost(post.id)}\n        &gt;\n          &lt;h3&gt;{post.title}&lt;/h3&gt;\n          &lt;p&gt;{post.body.substring(0, 100)}...&lt;/p&gt;\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\nexport default PostList;\n</code></pre> <p>Actualiza <code>src/components/PostDetail.jsx</code>:</p> <pre><code>import { useState, useEffect } from 'react';\nimport { getPostById } from '../services/postService';\n\nfunction PostDetail({ id, onBack }) {\n  const [post, setPost] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    const fetchPost = async () =&gt; {\n      try {\n        // Ahora usamos el servicio\n        const data = await getPostById(id);\n        setPost(data);\n      } catch (error) {\n        console.error(`Error al cargar post ${id}:`, error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPost();\n  }, [id]);\n\n  if (loading) return &lt;p&gt;Cargando detalles del post...&lt;/p&gt;;\n  if (!post) return &lt;p&gt;Post no encontrado&lt;/p&gt;;\n\n  return (\n    &lt;div className=\"post-detail\"&gt;\n      &lt;h2&gt;{post.title}&lt;/h2&gt;\n      &lt;p&gt;{post.body}&lt;/p&gt;\n      &lt;p&gt;&lt;small&gt;Post ID: {post.id} - Usuario ID: {post.userId}&lt;/small&gt;&lt;/p&gt;\n      &lt;button onClick={onBack}&gt;Volver a la lista&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default PostDetail;\n</code></pre>"},{"location":"ejercicios_react_vite/#paso-5-anadir-estilos-basicos","title":"\ud83d\udc85 Paso 5: A\u00f1adir estilos b\u00e1sicos","text":""},{"location":"ejercicios_react_vite/#51-crear-estilos-para-la-aplicacion","title":"5.1 Crear estilos para la aplicaci\u00f3n","text":"<p>Actualiza el archivo <code>src/App.css</code>:</p> <pre><code>/* Estilos generales */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  line-height: 1.6;\n  color: #333;\n  background-color: #f9f9f9;\n}\n\n.app {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n/* Estilos del encabezado */\nheader {\n  margin-bottom: 30px;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #eaeaea;\n}\n\nheader h1 {\n  color: #0077cc;\n}\n\n/* Estilos para la lista de posts */\n.post-list {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.post-card {\n  border: 1px solid #ddd;\n  padding: 15px;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: transform 0.2s, box-shadow 0.2s;\n  background-color: white;\n}\n\n.post-card:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.post-card h3 {\n  color: #0077cc;\n  margin-bottom: 8px;\n}\n\n/* Estilos para los detalles del post */\n.post-detail {\n  background-color: white;\n  border-radius: 8px;\n  padding: 25px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n}\n\n.post-detail h2 {\n  color: #0077cc;\n  margin-bottom: 15px;\n}\n\n.post-detail p {\n  margin-bottom: 15px;\n}\n\n/* Estilos para botones */\nbutton {\n  padding: 8px 16px;\n  background-color: #0077cc;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: background-color 0.2s;\n  margin-top: 10px;\n}\n\nbutton:hover {\n  background-color: #005fa3;\n}\n</code></pre>"},{"location":"ejercicios_react_vite/#paso-6-probar-la-aplicacion","title":"\ud83d\udcca Paso 6: Probar la aplicaci\u00f3n","text":"<p>Ahora podemos probar nuestra aplicaci\u00f3n y ver c\u00f3mo funciona el sistema de cach\u00e9.</p> <ol> <li> <p>Inicia la aplicaci\u00f3n: <pre><code>npm run dev\n</code></pre></p> </li> <li> <p>Abre la consola del navegador (F12 o click derecho &gt; Inspeccionar)</p> </li> <li>Navega por la aplicaci\u00f3n:</li> <li>Carga inicial: Ver\u00e1s la petici\u00f3n a la API</li> <li>Selecciona un post: Ver\u00e1s la petici\u00f3n para ese post espec\u00edfico</li> <li>Vuelve a la lista: Ver\u00e1s el mensaje \"Usando posts desde cach\u00e9\"</li> <li>Selecciona el mismo post de nuevo: Ver\u00e1s \"Usando post X desde cach\u00e9\"</li> </ol>"},{"location":"ejercicios_react_vite/#paso-7-control-de-versiones-con-git","title":"\ud83d\udd04 Paso 7: Control de versiones con Git","text":""},{"location":"ejercicios_react_vite/#71-inicializar-repositorio-git","title":"7.1 Inicializar repositorio Git","text":"<pre><code># Inicializar repositorio Git\ngit init\n\n# A\u00f1adir todos los archivos al staging\ngit add .\n\n# Hacer el primer commit\ngit commit -m \"Implementaci\u00f3n inicial: consumo de API con cach\u00e9\"\n</code></pre>"},{"location":"ejercicios_react_vite/#72-crear-un-repositorio-en-github-opcional","title":"7.2 Crear un repositorio en GitHub (opcional)","text":"<ol> <li>Ve a GitHub y crea una cuenta si no tienes una</li> <li>Crea un nuevo repositorio (bot\u00f3n \"+\" en la esquina superior derecha)</li> <li>Sigue las instrucciones para subir tu repositorio local:</li> </ol> <pre><code>git remote add origin https://github.com/TU_USUARIO/TU_REPOSITORIO.git\ngit branch -M main\ngit push -u origin main\n</code></pre>"},{"location":"ejercicios_react_vite/#paso-8-desplegar-en-vercel","title":"\ud83d\ude80 Paso 8: Desplegar en Vercel","text":""},{"location":"ejercicios_react_vite/#81-preparar-la-aplicacion-para-produccion","title":"8.1 Preparar la aplicaci\u00f3n para producci\u00f3n","text":"<pre><code># Construir la versi\u00f3n de producci\u00f3n\nnpm run build\n</code></pre> <p>Esto crear\u00e1 una carpeta <code>dist/</code> con los archivos optimizados para producci\u00f3n.</p>"},{"location":"ejercicios_react_vite/#82-desplegar-en-vercel","title":"8.2 Desplegar en Vercel","text":"<ol> <li>Crea una cuenta en Vercel si no tienes una</li> <li>Instala la CLI de Vercel:</li> </ol> <pre><code>npm install -g vercel\n</code></pre> <ol> <li>Inicia sesi\u00f3n desde la terminal:</li> </ol> <pre><code>vercel login\n</code></pre> <ol> <li>Despliega la aplicaci\u00f3n:</li> </ol> <pre><code>vercel\n</code></pre> <ol> <li>Sigue las instrucciones en pantalla:</li> <li>Confirma el directorio del proyecto</li> <li>Configura el proyecto (puedes usar las opciones por defecto)</li> <li>Si quieres, puedes vincular a un proyecto existente</li> </ol> <p>\u00a1Y listo! Vercel te proporcionar\u00e1 una URL donde tu aplicaci\u00f3n estar\u00e1 desplegada.</p>"},{"location":"ejercicios_react_vite/#conclusion","title":"\ud83c\udf89 Conclusi\u00f3n","text":"<p>\u00a1Felicidades! Has creado una aplicaci\u00f3n React que:</p> <ol> <li>Consume una API externa (JSONPlaceholder)</li> <li>Implementa un sistema de cach\u00e9 para optimizar las peticiones</li> <li>Tiene una interfaz atractiva y responsive</li> <li>Est\u00e1 desplegada en la nube y accesible desde cualquier dispositivo</li> </ol>"},{"location":"ejercicios_react_vite/#recursos-adicionales","title":"\ud83d\udcda Recursos adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de React</li> <li>Documentaci\u00f3n de Vite</li> <li>JSONPlaceholder API</li> <li>Vercel Documentation</li> </ul>"},{"location":"extra/","title":"React \ud83d\ude80","text":""},{"location":"extra/#repaso-de-la-clase-anterior","title":"Repaso de la Clase Anterior","text":"<p>\"Antes de continuar con el nuevo tema, hagamos un repaso r\u00e1pido de lo que vimos la clase pasada:\"</p>"},{"location":"extra/#javascript-moderno","title":"JavaScript Moderno","text":"<p>Refrescamos conceptos clave como las arrow functions para escribir funciones de forma m\u00e1s concisa, m\u00e9todos de arrays para transformar datos, manipulaci\u00f3n de objetos y destructuring para extraer datos de forma m\u00e1s limpia.</p> <pre><code>// Arrow functions\nconst saludar = (nombre) =&gt; `Hola ${nombre}`;\n\n// M\u00e9todos de arrays\nconst numeros = [1, 2, 3, 4];\nconst duplicados = numeros.map(num =&gt; num * 2); // [2, 4, 6, 8]\nconst pares = numeros.filter(num =&gt; num % 2 === 0); // [2, 4]\nconst suma = numeros.reduce((acc, num) =&gt; acc + num, 0); // 10\n\n// Destructuring - extraer propiedades de objetos\nconst persona = { nombre: 'Ana', edad: 30, ciudad: 'Madrid' };\nconst { nombre, edad } = persona; // Extraemos solo nombre y edad\n// Ahora podemos usar 'nombre' y 'edad' directamente\n\n// Destructuring de arrays\nconst colores = ['rojo', 'verde', 'azul'];\nconst [primero, segundo] = colores; // primero = 'rojo', segundo = 'verde'\n</code></pre>"},{"location":"extra/#fundamentos-de-react","title":"Fundamentos de React","text":"<p>Vimos qu\u00e9 es React, una librer\u00eda de JavaScript para construir interfaces de usuario de forma declarativa, por qu\u00e9 es \u00fatil (reutilizaci\u00f3n de componentes, manejo eficiente del DOM), y c\u00f3mo nos permite crear aplicaciones m\u00e1s organizadas y mantenibles.</p> <pre><code>// React nos permite pensar en componentes reutilizables\n// En lugar de manipular el DOM directamente, describimos c\u00f3mo deber\u00eda verse\n</code></pre>"},{"location":"extra/#componentes-y-jsx","title":"Componentes y JSX","text":"<p>Aprendimos que los componentes son funciones que retornan elementos de interfaz, son los bloques de construcci\u00f3n de React, y JSX nos permite escribir HTML dentro de JavaScript de manera natural y expresiva.</p> <pre><code>// Componente simple\nfunction MiComponente() {\n  return &lt;h1&gt;\u00a1Hola desde React!&lt;/h1&gt;;\n}\n\n// JSX permite mezclar HTML con JavaScript\nfunction Bienvenida() {\n  const usuario = \"Mar\u00eda\";\n  return &lt;h2&gt;Bienvenida, {usuario}!&lt;/h2&gt;;\n}\n</code></pre>"},{"location":"extra/#estado-con-usestate","title":"Estado con useState","text":"<p>Exploramos c\u00f3mo manejar datos que cambian en el tiempo usando el hook <code>useState</code>, permitiendo que nuestros componentes sean din\u00e1micos e interactivos.</p> <pre><code>const [contador, setContador] = useState(0);\nconst [nombre, setNombre] = useState('');\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ul> <li>Usamos <code>const</code> porque aunque el valor del estado cambia, las variables <code>contador</code> y <code>setContador</code> nunca se reasignan</li> <li><code>contador</code> es la variable que contiene el valor actual del estado</li> <li><code>setContador</code> es la funci\u00f3n que usamos para actualizar el estado</li> <li><code>useState(0)</code> inicializa el estado con el valor 0</li> <li>Destructuring: <code>useState</code> retorna un array con dos elementos, los extraemos con <code>[contador, setContador]</code></li> </ul>"},{"location":"extra/#props","title":"Props","text":"<p>Vimos c\u00f3mo los componentes pueden comunicarse entre s\u00ed pasando datos de padres a hijos atrav\u00e9s de props, creando un flujo de informaci\u00f3n claro.</p> <pre><code>// Componente padre\n&lt;Saludo nombre=\"Juan\" edad={25} /&gt;\n\n// Componente hijo\nfunction Saludo({ nombre, edad }) {\n  return &lt;h1&gt;Hola {nombre}, tienes {edad} a\u00f1os&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"extra/#listas-y-eventos","title":"Listas y Eventos","text":"<p>Practicamos c\u00f3mo renderizar listas de elementos din\u00e1micamente y c\u00f3mo responder a interacciones del usuario con event handlers.</p> <pre><code>// Renderizar lista usando .map()\n// .map() transforma cada elemento del array en un componente JSX\n{usuarios.map(usuario =&gt; &lt;li key={usuario.id}&gt;{usuario.nombre}&lt;/li&gt;)}\n// Por cada usuario en el array, crea un &lt;li&gt; con su nombre\n// key={usuario.id} es obligatorio para que React identifique cada elemento\n\n// Manejar eventos\n&lt;button onClick={() =&gt; setContador(contador + 1)}&gt;Incrementar&lt;/button&gt;\n</code></pre> <p>\"\u00bfAlguna duda sobre estos conceptos antes de avanzar al siguiente tema?\"</p>"},{"location":"extra/#lo-que-vamos-a-aprender-hoy","title":"\ud83c\udfaf Lo que vamos a aprender hoy","text":"<ol> <li>useEffect - Para hacer cosas cuando el componente cambia</li> <li>useContext - Para compartir informaci\u00f3n entre p\u00e1ginas</li> <li>Formularios - Para que los usuarios escriban datos</li> <li>Rutas - Para tener varias p\u00e1ginas en tu app</li> <li>Fetch - Para traer informaci\u00f3n de internet</li> </ol>"},{"location":"extra/#1-useeffect-haz-algo-cuando","title":"1. useEffect - \"Haz algo cuando...\"","text":""},{"location":"extra/#que-es-useeffect","title":"\u00bfQu\u00e9 es useEffect?","text":"<p>Es como decirle a React: \"Cuando pase X cosa, haz Y\"</p>"},{"location":"extra/#por-que-necesitamos-useeffect","title":"\u00bfPor qu\u00e9 necesitamos useEffect?","text":"<p>Imagina que quieres:</p> <ul> <li>Cambiar el t\u00edtulo de la p\u00e1gina cuando el usuario haga algo</li> <li>Cargar datos cuando se abra una p\u00e1gina</li> <li>Limpiar un timer cuando se cierre un componente</li> <li>Escuchar el scroll de la p\u00e1gina</li> </ul> <p>El problema: React no sabe cu\u00e1ndo hacer estas cosas autom\u00e1ticamente. La soluci\u00f3n: useEffect le dice a React exactamente cu\u00e1ndo hacerlas.</p>"},{"location":"extra/#como-funciona","title":"\u00bfC\u00f3mo funciona?","text":"<p>React tiene un \"ciclo de vida\":</p> <ol> <li>Monta el componente (lo muestra por primera vez)</li> <li>Actualiza el componente (cuando cambia algo)</li> <li>Desmonta el componente (cuando ya no se necesita)</li> </ol> <p>useEffect nos permite \"engancharnos\" a estos momentos y decir:</p> <ul> <li>\"Haz esto cuando se monte\"</li> <li>\"Haz esto cuando se actualice\"</li> <li>\"Haz esto antes de desmontarlo\"</li> </ul>"},{"location":"extra/#instalacion","title":"Instalaci\u00f3n:","text":"<pre><code>npm install react-router-dom\n</code></pre>"},{"location":"extra/#formulario-completo-con-validacion","title":"Formulario completo con validaci\u00f3n:","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\nfunction Contador() {\n  const [numero, setNumero] = useState(0);\n\n  // Esto se ejecuta cada vez que cambia 'numero'\n  useEffect(() =&gt; {\n    document.title = `Tienes ${numero} clicks`;\n  }, [numero]);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;N\u00famero: {numero}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; setNumero(numero + 1)}&gt;\n        Hacer click\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\u00bfQu\u00e9 hace? Cada vez que haces click, cambia el t\u00edtulo de la pesta\u00f1a del navegador.</p>"},{"location":"extra/#los-3-casos-mas-comunes","title":"Los 3 casos m\u00e1s comunes:","text":"<pre><code>// 1. Hacer algo UNA SOLA VEZ cuando inicia el componente\nuseEffect(() =&gt; {\n  console.log(\"\u00a1Hola! El componente arranc\u00f3\");\n}, []); // Array vac\u00edo = solo una vez\n\n// 2. Hacer algo CADA VEZ que cambia algo espec\u00edfico\nuseEffect(() =&gt; {\n  console.log(\"El contador cambi\u00f3\");\n}, [contador]); // Solo cuando 'contador' cambia\n\n// 3. Hacer algo SIEMPRE que el componente se actualiza\nuseEffect(() =&gt; {\n  console.log(\"Algo cambi\u00f3\");\n}); // Sin array = siempre\n</code></pre>"},{"location":"extra/#2-usecontext-compartir-datos-facil","title":"2. useContext - \"Compartir datos f\u00e1cil\"","text":""},{"location":"extra/#que-es-context","title":"\u00bfQu\u00e9 es Context?","text":"<p>Context es como tener un almac\u00e9n global en tu aplicaci\u00f3n donde puedes guardar informaci\u00f3n que necesitas en muchos lugares.</p>"},{"location":"extra/#el-problema-sin-context","title":"El problema sin Context:","text":"<p>Imagina que tienes el nombre del usuario en la p\u00e1gina principal, pero lo necesitas en 5 componentes diferentes. Tendr\u00edas que pasarlo de padre a hijo, a nieto, etc.</p> <p>Esto se llama \"prop drilling\" y se ve as\u00ed: <pre><code>// \ud83d\ude35 Prop drilling - pasando datos por muchos niveles\nApp \u2192 Header \u2192 Navigation \u2192 UserMenu \u2192 UserName\n</code></pre></p> <p>Problemas del prop drilling:</p> <ul> <li>Muchos componentes intermedios reciben props que no usan</li> <li>Si cambias algo, tienes que actualizar muchos archivos</li> <li>Se vuelve confuso y dif\u00edcil de mantener</li> </ul>"},{"location":"extra/#la-solucion-con-context","title":"La soluci\u00f3n con Context:","text":"<p>Es como tener una caja com\u00fan donde todos pueden tomar lo que necesiten directamente.</p> <pre><code>// \ud83d\ude0a Con Context - acceso directo\nApp (tiene los datos) \u2190 Context \u2192 UserName (usa los datos)\n</code></pre>"},{"location":"extra/#cuando-usar-context","title":"\u00bfCu\u00e1ndo usar Context?","text":"<p>\u00dasalo para:</p> <ul> <li>Informaci\u00f3n del usuario (nombre, foto, permisos)</li> <li>Tema de la aplicaci\u00f3n (modo oscuro/claro)</li> <li>Idioma de la aplicaci\u00f3n</li> <li>Configuraciones globales</li> </ul> <p>NO lo uses para:</p> <ul> <li>Estados que solo necesita un componente</li> <li>Datos que cambian muy frecuentemente</li> <li>Estados locales de formularios</li> </ul>"},{"location":"extra/#ejemplo-practico","title":"Ejemplo pr\u00e1ctico:","text":"<pre><code>import React, { createContext, useContext, useState } from 'react';\n\n// 1. Crear la \"caja com\u00fan\"\nconst UsuarioContext = createContext();\n\n// 2. Componente que guarda los datos\nfunction App() {\n  const [usuario, setUsuario] = useState(\"Juan\");\n\n  return (\n    &lt;UsuarioContext.Provider value={{ usuario, setUsuario }}&gt;\n      &lt;Header /&gt;\n      &lt;Perfil /&gt;\n    &lt;/UsuarioContext.Provider&gt;\n  );\n}\n\n// 3. Componentes que usan los datos\nfunction Header() {\n  const { usuario } = useContext(UsuarioContext);\n  return &lt;h1&gt;Bienvenido, {usuario}!&lt;/h1&gt;;\n}\n\nfunction Perfil() {\n  const { usuario, setUsuario } = useContext(UsuarioContext);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Tu nombre: {usuario}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setUsuario(\"Mar\u00eda\")}&gt;\n        Cambiar a Mar\u00eda\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\u00bfQu\u00e9 hace? Tanto Header como Perfil pueden usar y cambiar el nombre del usuario sin complicaciones.</p>"},{"location":"extra/#3-formularios-capturar-lo-que-escribe-el-usuario","title":"3. Formularios - \"Capturar lo que escribe el usuario\"","text":""},{"location":"extra/#por-que-son-importantes-los-formularios","title":"\u00bfPor qu\u00e9 son importantes los formularios?","text":"<p>Los formularios son la forma principal en que los usuarios interact\u00faan con tu aplicaci\u00f3n:</p> <ul> <li>Registro de usuarios</li> <li>Login</li> <li>B\u00fasquedas</li> <li>Comentarios</li> <li>Configuraciones</li> </ul>"},{"location":"extra/#componentes-controlados-vs-no-controlados","title":"Componentes Controlados vs No Controlados","text":""},{"location":"extra/#componentes-no-controlados-no-recomendado","title":"Componentes NO Controlados (\u274c No recomendado)","text":"<p>El HTML maneja el estado del input: <pre><code>// React no sabe qu\u00e9 hay en el input\n&lt;input type=\"text\" /&gt;\n</code></pre></p>"},{"location":"extra/#componentes-controlados-recomendado","title":"Componentes Controlados (\u2705 Recomendado)","text":"<p>React maneja el estado del input: <pre><code>// React siempre sabe qu\u00e9 hay en el input\nconst [valor, setValor] = useState(\"\");\n&lt;input value={valor} onChange={(e) =&gt; setValor(e.target.value)} /&gt;\n</code></pre></p> <p>\u00bfPor qu\u00e9 controlados?</p> <ul> <li>React siempre sabe el valor actual</li> <li>Puedes validar en tiempo real</li> <li>Puedes formatear la entrada</li> <li>Puedes resetear el formulario f\u00e1cilmente</li> <li>Es m\u00e1s predecible</li> </ul>"},{"location":"extra/#estados-derivados","title":"Estados Derivados","text":"<p>Son valores que se calculan autom\u00e1ticamente basados en otros estados:</p> <pre><code>const [nombre, setNombre] = useState(\"\");\nconst [email, setEmail] = useState(\"\");\n\n// Estados derivados - se calculan autom\u00e1ticamente\nconst formularioCompleto = nombre &amp;&amp; email;\nconst mensaje = nombre ? `Hola ${nombre}` : \"Escribe tu nombre\";\nconst puedeEnviar = formularioCompleto &amp;&amp; email.includes(\"@\");\n</code></pre> <p>Ventajas:</p> <ul> <li>No necesitas useState adicionales</li> <li>Se actualizan autom\u00e1ticamente</li> <li>Menos posibilidad de errores</li> </ul> <pre><code>function MiFormulario() {\n  const [nombre, setNombre] = useState(\"\");\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        type=\"text\"\n        value={nombre}\n        onChange={(e) =&gt; setNombre(e.target.value)}\n        placeholder=\"Escribe tu nombre\"\n      /&gt;\n      &lt;p&gt;Hola, {nombre}!&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"extra/#lo-basico-un-input-controlado","title":"Lo b\u00e1sico: un input controlado","text":"<p><pre><code>function MiFormulario() {\n  const [nombre, setNombre] = useState(\"\");\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        type=\"text\"\n        value={nombre}\n        onChange={(e) =&gt; setNombre(e.target.value)}\n        placeholder=\"Escribe tu nombre\"\n      /&gt;\n      &lt;p&gt;Hola, {nombre}!&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <pre><code>function FormularioRegistro() {\n  const [datos, setDatos] = useState({\n    nombre: \"\",\n    email: \"\"\n  });\n  const [error, setError] = useState(\"\");\n\n  const manejarCambio = (e) =&gt; {\n    const { name, value } = e.target;\n    setDatos({\n      ...datos,\n      [name]: value\n    });\n  };\n\n  const enviarFormulario = (e) =&gt; {\n    e.preventDefault(); // Evita que la p\u00e1gina se recargue\n\n    if (!datos.nombre || !datos.email) {\n      setError(\"Por favor completa todos los campos\");\n      return;\n    }\n\n    setError(\"\");\n    alert(`Registro exitoso para ${datos.nombre}`);\n  };\n\n  return (\n    &lt;form onSubmit={enviarFormulario}&gt;\n      &lt;div&gt;\n        &lt;input\n          name=\"nombre\"\n          value={datos.nombre}\n          onChange={manejarCambio}\n          placeholder=\"Tu nombre\"\n        /&gt;\n      &lt;/div&gt;\n\n      &lt;div&gt;\n        &lt;input\n          name=\"email\"\n          type=\"email\"\n          value={datos.email}\n          onChange={manejarCambio}\n          placeholder=\"Tu email\"\n        /&gt;\n      &lt;/div&gt;\n\n      {error &amp;&amp; &lt;p style={{color: 'red'}}&gt;{error}&lt;/p&gt;}\n\n      &lt;button type=\"submit\"&gt;Registrarse&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre></p>"},{"location":"extra/#4-react-router-tener-varias-paginas","title":"4. React Router - \"Tener varias p\u00e1ginas\"","text":""},{"location":"extra/#que-es-react-router","title":"\u00bfQu\u00e9 es React Router?","text":"<p>React por defecto crea aplicaciones de \"una sola p\u00e1gina\" (SPA - Single Page Application). React Router te permite simular que tienes m\u00faltiples p\u00e1ginas.</p>"},{"location":"extra/#spa-vs-paginas-tradicionales","title":"SPA vs P\u00e1ginas Tradicionales","text":"<p>P\u00e1ginas tradicionales:</p> <ul> <li>Cada URL es un archivo HTML diferente</li> <li>Al hacer click, el navegador carga una p\u00e1gina nueva completa</li> <li>La p\u00e1gina \"parpadea\" al cargar</li> </ul> <p>SPA con React Router:</p> <ul> <li>Todo es el mismo archivo HTML</li> <li>JavaScript cambia el contenido seg\u00fan la URL</li> <li>No hay \"parpadeo\", es m\u00e1s r\u00e1pido y fluido</li> </ul>"},{"location":"extra/#conceptos-clave","title":"Conceptos clave","text":"<p>BrowserRouter: Es el contenedor principal que habilita el routing en tu app.</p> <p>Routes: Define todas las rutas posibles de tu aplicaci\u00f3n.</p> <p>Route: Cada ruta individual que conecta una URL con un componente.</p> <p>Link: Como un <code>&lt;a&gt;</code> pero para SPAs - no recarga la p\u00e1gina.</p>"},{"location":"extra/#por-que-usar-react-router","title":"\u00bfPor qu\u00e9 usar React Router?","text":"<ul> <li>URLs amigables: <code>/productos/123</code> en lugar de <code>/#productos</code></li> <li>Bot\u00f3n atr\u00e1s funciona: El usuario puede navegar con el navegador</li> <li>Compartir enlaces: Las URLs se pueden guardar y compartir</li> <li>SEO: Los buscadores pueden indexar las p\u00e1ginas</li> <li>Organizaci\u00f3n: Cada \"p\u00e1gina\" es un componente separado</li> </ul>"},{"location":"extra/#tipos-de-rutas-comunes","title":"Tipos de rutas comunes:","text":"<pre><code>// Ruta fija\n&lt;Route path=\"/contacto\" element={&lt;Contacto /&gt;} /&gt;\n\n// Ruta con par\u00e1metro\n&lt;Route path=\"/usuario/:id\" element={&lt;Usuario /&gt;} /&gt;\n\n// Ruta catch-all (para 404)\n&lt;Route path=\"*\" element={&lt;NoEncontrado /&gt;} /&gt;\n</code></pre>"},{"location":"extra/#ejemplo-super-simple","title":"Ejemplo s\u00faper simple:","text":"<pre><code>import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\n\n// P\u00e1ginas de tu app\nfunction Inicio() {\n  return &lt;h1&gt;Esta es la p\u00e1gina de inicio&lt;/h1&gt;;\n}\n\nfunction Contacto() {\n  return &lt;h1&gt;Esta es la p\u00e1gina de contacto&lt;/h1&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      {/* Men\u00fa de navegaci\u00f3n */}\n      &lt;nav&gt;\n        &lt;Link to=\"/\"&gt;Inicio&lt;/Link&gt; | \n        &lt;Link to=\"/contacto\"&gt;Contacto&lt;/Link&gt;\n      &lt;/nav&gt;\n\n      {/* Aqu\u00ed se muestran las p\u00e1ginas */}\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Inicio /&gt;} /&gt;\n        &lt;Route path=\"/contacto\" element={&lt;Contacto /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre>"},{"location":"extra/#ejemplo-super-simple_1","title":"Ejemplo s\u00faper simple:","text":"<pre><code>import { useParams } from 'react-router-dom';\n\nfunction PerfilUsuario() {\n  const { id } = useParams(); // Captura el ID de la URL\n\n  return &lt;h1&gt;Perfil del usuario #{id}&lt;/h1&gt;;\n}\n\n// En las rutas:\n&lt;Route path=\"/usuario/:id\" element={&lt;PerfilUsuario /&gt;} /&gt;\n\n// Link que lleva a esa p\u00e1gina:\n&lt;Link to=\"/usuario/123\"&gt;Ver usuario 123&lt;/Link&gt;\n</code></pre>"},{"location":"extra/#5-fetch-traer-datos-de-internet","title":"5. Fetch - \"Traer datos de internet\"","text":""},{"location":"extra/#que-es-fetch","title":"\u00bfQu\u00e9 es Fetch?","text":"<p>Fetch es la forma moderna de hacer peticiones HTTP en JavaScript. Es como \"pedirle\" datos a un servidor.</p>"},{"location":"extra/#por-que-necesitamos-fetch","title":"\u00bfPor qu\u00e9 necesitamos Fetch?","text":"<p>Las aplicaciones modernas no tienen todos los datos guardados localmente. Necesitan:</p> <ul> <li>Mostrar informaci\u00f3n de usuarios</li> <li>Cargar productos de una tienda</li> <li>Enviar formularios al servidor</li> <li>Actualizar datos en tiempo real</li> </ul>"},{"location":"extra/#como-funciona-una-peticion-http","title":"\u00bfC\u00f3mo funciona una petici\u00f3n HTTP?","text":"<ol> <li>Tu app hace una petici\u00f3n: \"Oye servidor, dame la lista de usuarios\"</li> <li>El servidor procesa: Busca en la base de datos</li> <li>El servidor responde: \"Aqu\u00ed tienes los usuarios en formato JSON\"</li> <li>Tu app usa los datos: Los muestra en pantalla</li> </ol>"},{"location":"extra/#estados-de-una-peticion","title":"Estados de una petici\u00f3n","text":"<p>Toda petici\u00f3n pasa por estos estados:</p> <ol> <li>Loading (Cargando): La petici\u00f3n se est\u00e1 ejecutando</li> <li>Success (\u00c9xito): La petici\u00f3n fue exitosa, tienes datos</li> <li>Error: Algo sali\u00f3 mal (no hay internet, servidor ca\u00eddo, etc.)</li> </ol> <p>\u00bfPor qu\u00e9 manejar estos estados?</p> <ul> <li>UX mejor: El usuario sabe qu\u00e9 est\u00e1 pasando</li> <li>No errores visuales: No mostrar datos que no existen</li> <li>Manejo de problemas: Qu\u00e9 hacer si falla la conexi\u00f3n</li> </ul>"},{"location":"extra/#fetch-vs-usestate-vs-useeffect","title":"Fetch vs useState vs useEffect","text":"<pre><code>// useState: Para guardar los datos que llegan\nconst [datos, setDatos] = useState(null);\nconst [cargando, setCargando] = useState(true);\nconst [error, setError] = useState(null);\n\n// useEffect: Para ejecutar fetch cuando se monta el componente\nuseEffect(() =&gt; {\n  // fetch: Para pedir los datos al servidor\n  fetch('https://api.ejemplo.com/datos')\n}, []);\n</code></pre>"},{"location":"extra/#apis-publicas-para-practicar","title":"APIs p\u00fablicas para practicar","text":"<ul> <li>JSONPlaceholder: https://jsonplaceholder.typicode.com/</li> <li>Usuarios, posts, comentarios falsos</li> <li>OpenWeatherMap: Datos del clima</li> <li>Rick and Morty API: Personajes de la serie</li> <li>PokeAPI: Informaci\u00f3n de Pok\u00e9mon</li> </ul> <pre><code>function ListaUsuarios() {\n  const [usuarios, setUsuarios] = useState([]);\n  const [cargando, setCargando] = useState(true);\n\n  useEffect(() =&gt; {\n    // Funci\u00f3n para traer datos\n    const traerUsuarios = async () =&gt; {\n      try {\n        const respuesta = await fetch('https://jsonplaceholder.typicode.com/users');\n        const datos = await respuesta.json();\n        setUsuarios(datos);\n      } catch (error) {\n        console.log('Error:', error);\n      } finally {\n        setCargando(false);\n      }\n    };\n\n    traerUsuarios();\n  }, []); // Solo una vez cuando inicia\n\n  if (cargando) {\n    return &lt;p&gt;Cargando usuarios...&lt;/p&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Lista de Usuarios&lt;/h2&gt;\n      {usuarios.map(usuario =&gt; (\n        &lt;div key={usuario.id}&gt;\n          &lt;h3&gt;{usuario.name}&lt;/h3&gt;\n          &lt;p&gt;{usuario.email}&lt;/p&gt;\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"extra/#el-concepto-basico","title":"El concepto b\u00e1sico:","text":"<pre><code>// Hook que puedes usar en cualquier componente\nfunction useDatos(url) {\n  const [datos, setDatos] = useState(null);\n  const [cargando, setCargando] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() =&gt; {\n    const traerDatos = async () =&gt; {\n      try {\n        const respuesta = await fetch(url);\n        const resultado = await respuesta.json();\n        setDatos(resultado);\n      } catch (err) {\n        setError('Algo sali\u00f3 mal');\n      } finally {\n        setCargando(false);\n      }\n    };\n\n    traerDatos();\n  }, [url]);\n\n  return { datos, cargando, error };\n}\n\n// \u00dasalo as\u00ed:\nfunction MiComponente() {\n  const { datos, cargando, error } = useDatos('https://api.ejemplo.com/datos');\n\n  if (cargando) return &lt;p&gt;Cargando...&lt;/p&gt;;\n  if (error) return &lt;p&gt;{error}&lt;/p&gt;;\n\n  return &lt;div&gt;{/* Mostrar datos */}&lt;/div&gt;;\n}\n</code></pre>"},{"location":"extra/#hook-personalizado-para-reutilizar","title":"Hook personalizado (para reutilizar):","text":""},{"location":"extra/#lista-de-tareas-que-todos-entienden","title":"Lista de Tareas que todos entienden","text":"<pre><code>import React, { useState, useEffect, createContext, useContext } from 'react';\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\n\n// Context para compartir las tareas\nconst TareasContext = createContext();\n\nfunction App() {\n  const [tareas, setTareas] = useState([]);\n\n  // Agregar nueva tarea\n  const agregarTarea = (texto) =&gt; {\n    const nuevaTarea = {\n      id: Date.now(),\n      texto: texto,\n      completada: false\n    };\n    setTareas([...tareas, nuevaTarea]);\n  };\n\n  // Marcar tarea como completada\n  const completarTarea = (id) =&gt; {\n    setTareas(tareas.map(tarea =&gt; \n      tarea.id === id \n        ? { ...tarea, completada: !tarea.completada }\n        : tarea\n    ));\n  };\n\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;TareasContext.Provider value={{ tareas, agregarTarea, completarTarea }}&gt;\n        &lt;div&gt;\n          &lt;nav&gt;\n            &lt;Link to=\"/\"&gt;Inicio&lt;/Link&gt; | \n            &lt;Link to=\"/tareas\"&gt;Mis Tareas&lt;/Link&gt;\n          &lt;/nav&gt;\n\n          &lt;Routes&gt;\n            &lt;Route path=\"/\" element={&lt;Inicio /&gt;} /&gt;\n            &lt;Route path=\"/tareas\" element={&lt;PaginaTareas /&gt;} /&gt;\n          &lt;/Routes&gt;\n        &lt;/div&gt;\n      &lt;/TareasContext.Provider&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n\nfunction Inicio() {\n  const { tareas } = useContext(TareasContext);\n  const completadas = tareas.filter(t =&gt; t.completada).length;\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\u00a1Bienvenido!&lt;/h1&gt;\n      &lt;p&gt;Tienes {completadas} tareas completadas de {tareas.length}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction PaginaTareas() {\n  const { tareas, agregarTarea, completarTarea } = useContext(TareasContext);\n  const [nuevaTarea, setNuevaTarea] = useState(\"\");\n\n  const manejarEnvio = (e) =&gt; {\n    e.preventDefault();\n    if (nuevaTarea.trim()) {\n      agregarTarea(nuevaTarea);\n      setNuevaTarea(\"\");\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Mis Tareas&lt;/h1&gt;\n\n      &lt;form onSubmit={manejarEnvio}&gt;\n        &lt;input\n          value={nuevaTarea}\n          onChange={(e) =&gt; setNuevaTarea(e.target.value)}\n          placeholder=\"Nueva tarea...\"\n        /&gt;\n        &lt;button type=\"submit\"&gt;Agregar&lt;/button&gt;\n      &lt;/form&gt;\n\n      &lt;ul&gt;\n        {tareas.map(tarea =&gt; (\n          &lt;li key={tarea.id}&gt;\n            &lt;input\n              type=\"checkbox\"\n              checked={tarea.completada}\n              onChange={() =&gt; completarTarea(tarea.id)}\n            /&gt;\n            &lt;span style={{\n              textDecoration: tarea.completada ? 'line-through' : 'none'\n            }}&gt;\n              {tarea.texto}\n            &lt;/span&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"extra/#resumen-para-recordar","title":"\ud83d\udcdd Resumen para recordar","text":""},{"location":"extra/#useeffect","title":"useEffect","text":"<ul> <li>\"Cuando pase algo, haz esto\"</li> <li><code>[]</code> = solo una vez</li> <li><code>[variable]</code> = cuando cambie esa variable</li> </ul>"},{"location":"extra/#usecontext","title":"useContext","text":"<ul> <li>\"Caja com\u00fan para compartir datos\"</li> <li>Crear context \u2192 Provider \u2192 useContext</li> </ul>"},{"location":"extra/#formularios","title":"Formularios","text":"<ul> <li>\"Capturar lo que escribe el usuario\"</li> <li><code>value</code> + <code>onChange</code> = input controlado</li> </ul>"},{"location":"extra/#router","title":"Router","text":"<ul> <li>\"Varias p\u00e1ginas en tu app\"</li> <li>BrowserRouter \u2192 Routes \u2192 Route</li> </ul>"},{"location":"extra/#fetch","title":"Fetch","text":"<ul> <li>\"Traer datos de internet\"</li> <li>useEffect + fetch + useState para loading</li> </ul>"},{"location":"index_/","title":"Fundamentos de JavaScript Moderno (ES6+)","text":""},{"location":"index_/#objetivo-de-esta-hora","title":"\ud83c\udfaf Objetivo de esta hora","text":"<p>Comprender y aplicar las caracter\u00edsticas principales de JavaScript moderno (ES6 en adelante), las cuales son esenciales para desarrollar interfaces modernas con React. Esta base permitir\u00e1 escribir c\u00f3digo m\u00e1s limpio, legible y mantenible, adem\u00e1s de facilitar la transici\u00f3n hacia el desarrollo con componentes funcionales y hooks.</p>"},{"location":"index_/#conceptos-clave-con-ejemplos","title":"\ud83e\udde0 Conceptos clave con ejemplos","text":""},{"location":"index_/#1-const-y-let","title":"1. <code>const</code> y <code>let</code>","text":""},{"location":"index_/#descripcion","title":"\ud83d\udcd8 Descripci\u00f3n:","text":"<ul> <li><code>const</code>: se usa para declarar constantes. No se puede cambiar su valor (reasignar).</li> <li><code>let</code>: se usa para declarar variables que pueden cambiar a lo largo del tiempo.</li> <li>Ambas respetan el alcance de bloque (<code>{}</code>), a diferencia de <code>var</code> que tiene alcance de funci\u00f3n.</li> </ul>"},{"location":"index_/#ejemplo","title":"\ud83e\uddea Ejemplo:","text":"<pre><code>const nombre = \"Ana\";\nlet edad = 30;\n\nedad = 31; // v\u00e1lido\nnombre = \"Pedro\"; // \u274c Error: no se puede reasignar una constante\n</code></pre>"},{"location":"index_/#ejemplos-adicionales","title":"\ud83c\udfaf Ejemplos adicionales:","text":"<p>Ejemplo 1: const con objetos y arrays <pre><code>// const NO hace el objeto inmutable, solo evita la reasignaci\u00f3n\nconst persona = { nombre: \"Ana\", edad: 25 };\npersona.edad = 26; // \u2705 V\u00e1lido - modifica propiedad\npersona = { nombre: \"Luis\" }; // \u274c Error - intenta reasignar\n\nconst numeros = [1, 2, 3];\nnumeros.push(4); // \u2705 V\u00e1lido - modifica array\nnumeros = [5, 6, 7]; // \u274c Error - intenta reasignar\n</code></pre></p>"},{"location":"index_/#cuando-usarlo","title":"\u2705 Cu\u00e1ndo usarlo:","text":"<ul> <li>Usa <code>const</code> por defecto.</li> <li>Usa <code>let</code> si sabes que la variable cambiar\u00e1 su valor (como un contador, input, etc.).</li> </ul>"},{"location":"index_/#2-arrow-functions-funciones-flecha","title":"2. Arrow Functions (Funciones flecha)","text":""},{"location":"index_/#descripcion_1","title":"\ud83d\udcd8 Descripci\u00f3n:","text":"<p>Las arrow functions son una forma m\u00e1s concisa de declarar funciones. No tienen su propio <code>this</code>, lo cual es \u00fatil en callbacks y funciones anidadas.</p>"},{"location":"index_/#ejemplo_1","title":"\ud83e\uddea Ejemplo:","text":"<pre><code>// Funci\u00f3n tradicional\nfunction saludar(nombre) {\n  return `Hola, ${nombre}`;\n}\n\n// Funci\u00f3n flecha equivalente\nconst saludar = (nombre) =&gt; `Hola, ${nombre}`;\n</code></pre>"},{"location":"index_/#otro-ejemplo","title":"\ud83e\udde9 Otro ejemplo:","text":"<pre><code>const numeros = [1, 2, 3];\nconst alCuadrado = numeros.map(num =&gt; num * num);\nconsole.log(alCuadrado); // [1, 4, 9]\n</code></pre>"},{"location":"index_/#ejemplos-detallados","title":"\ud83c\udfaf Ejemplos detallados:","text":"<p>Ejemplo 1: Diferentes sintaxis <pre><code>// Sin par\u00e1metros\nconst saludar = () =&gt; \"\u00a1Hola mundo!\";\n\n// Un par\u00e1metro (par\u00e9ntesis opcionales)\nconst duplicar = num =&gt; num * 2;\nconst duplicar2 = (num) =&gt; num * 2; // tambi\u00e9n v\u00e1lido\n\n// M\u00faltiples par\u00e1metros (par\u00e9ntesis obligatorios)\nconst sumar = (a, b) =&gt; a + b;\n\n// Con cuerpo de funci\u00f3n (necesita return)\nconst calcularDescuento = (precio, descuento) =&gt; {\n    const montoDescuento = precio * (descuento / 100);\n    const precioFinal = precio - montoDescuento;\n    return precioFinal;\n};\n</code></pre></p> <p>Ejemplo 2: Diferencia con <code>this</code> <pre><code>// Problema con funci\u00f3n tradicional\nconst boton = {\n    texto: \"Click me\",\n    clicks: 0,\n    configurar: function() {\n        // this aqu\u00ed es 'boton'\n        document.addEventListener('click', function() {\n            this.clicks++; // \u274c Error: this no es 'boton'\n        });\n    }\n};\n\n// Soluci\u00f3n con arrow function\nconst boton2 = {\n    texto: \"Click me\",\n    clicks: 0,\n    configurar: function() {\n        // this aqu\u00ed es 'boton'\n        document.addEventListener('click', () =&gt; {\n            this.clicks++; // \u2705 Funciona: this sigue siendo 'boton'\n        });\n    }\n};\n</code></pre></p>"},{"location":"index_/#cuando-usarlo_1","title":"\u2705 Cu\u00e1ndo usarlo:","text":"<ul> <li>Para funciones peque\u00f1as, especialmente dentro de <code>.map</code>, <code>.filter</code>, <code>.forEach</code>.</li> <li>Para mantener el contexto de <code>this</code> en componentes y objetos.</li> </ul>"},{"location":"index_/#3-destructuring-desestructuracion","title":"3. Destructuring (Desestructuraci\u00f3n)","text":""},{"location":"index_/#descripcion_2","title":"\ud83d\udcd8 Descripci\u00f3n:","text":"<p>Permite extraer valores de arrays u objetos en variables individuales, haciendo el c\u00f3digo m\u00e1s limpio.</p>"},{"location":"index_/#ejemplo-con-objetos","title":"\ud83e\uddea Ejemplo con objetos:","text":"<pre><code>const persona = {\n  nombre: \"Geovanny\",\n  edad: 28,\n  ciudad: \"Barranquilla\"\n};\n\nconst { nombre, edad } = persona;\nconsole.log(nombre); // \"Geovanny\"\nconsole.log(edad);   // 28\n</code></pre>"},{"location":"index_/#ejemplo-con-arrays","title":"\ud83e\uddea Ejemplo con arrays:","text":"<pre><code>const colores = [\"rojo\", \"verde\", \"azul\"];\nconst [primero, segundo] = colores;\n\nconsole.log(primero); // \"rojo\"\nconsole.log(segundo); // \"verde\"\n</code></pre>"},{"location":"index_/#ejemplos-avanzados","title":"\ud83c\udfaf Ejemplos avanzados:","text":"<p>Ejemplo 1: Renombrar variables <pre><code>const usuario = {\n    nombreCompleto: \"Ana Garc\u00eda\",\n    correo: \"ana@email.com\"\n};\n\n// Renombrar al desestructurar\nconst { nombreCompleto: nombre, correo: email } = usuario;\nconsole.log(nombre); // \"Ana Garc\u00eda\"\nconsole.log(email);  // \"ana@email.com\"\n</code></pre></p> <p>Ejemplo 2: Valores por defecto <pre><code>const config = {\n    tema: \"oscuro\",\n    // idioma no est\u00e1 definido\n};\n\nconst { tema, idioma = \"espa\u00f1ol\" } = config;\nconsole.log(tema);   // \"oscuro\"\nconsole.log(idioma); // \"espa\u00f1ol\" (valor por defecto)\n</code></pre></p> <p>Ejemplo 3: Desestructuraci\u00f3n en par\u00e1metros <pre><code>// Sin desestructuraci\u00f3n\nfunction mostrarUsuario(usuario) {\n    console.log(`${usuario.nombre} tiene ${usuario.edad} a\u00f1os`);\n}\n\n// Con desestructuraci\u00f3n\nfunction mostrarUsuario({ nombre, edad }) {\n    console.log(`${nombre} tiene ${edad} a\u00f1os`);\n}\n\nmostrarUsuario({ nombre: \"Luis\", edad: 30 });\n</code></pre></p>"},{"location":"index_/#cuando-usarlo_2","title":"\u2705 Cu\u00e1ndo usarlo:","text":"<ul> <li>Para extraer propiedades dentro de funciones, loops o directamente en argumentos.</li> </ul>"},{"location":"index_/#4-spread-y-rest-operators","title":"4. Spread y Rest Operators (<code>...</code>)","text":""},{"location":"index_/#descripcion_3","title":"\ud83d\udcd8 Descripci\u00f3n:","text":"<p>El operador <code>...</code> se usa para dos cosas:</p> <ul> <li>Spread: Expande elementos de un array u objeto.</li> <li>Rest: Agrupa m\u00faltiples elementos en un array u objeto.</li> </ul>"},{"location":"index_/#ejemplo-spread","title":"\ud83e\uddea Ejemplo - Spread:","text":"<pre><code>const numeros = [1, 2, 3];\nconst nuevosNumeros = [...numeros, 4]; // [1, 2, 3, 4]\n\nconst usuario = { nombre: \"Ana\", edad: 25 };\nconst usuarioActualizado = { ...usuario, ciudad: \"Lima\" };\n// { nombre: \"Ana\", edad: 25, ciudad: \"Lima\" }\n</code></pre>"},{"location":"index_/#ejemplo-rest","title":"\ud83e\uddea Ejemplo - Rest:","text":"<pre><code>function sumar(...numeros) {\n  return numeros.reduce((acc, n) =&gt; acc + n, 0);\n}\n\nconsole.log(sumar(1, 2, 3, 4)); // 10\n</code></pre>"},{"location":"index_/#ejemplos-detallados_1","title":"\ud83c\udfaf Ejemplos detallados:","text":"<p>Ejemplo 1: Spread para copiar arrays <pre><code>// Problema: copiar por referencia\nconst original = [1, 2, 3];\nconst copia1 = original; // \u274c No es una copia, es la misma referencia\ncopia1.push(4);\nconsole.log(original); // [1, 2, 3, 4] - \u00a1Se modific\u00f3 el original!\n\n// Soluci\u00f3n: usar spread\nconst original2 = [1, 2, 3];\nconst copia2 = [...original2]; // \u2705 Copia real\ncopia2.push(4);\nconsole.log(original2); // [1, 2, 3] - Original intacto\n</code></pre></p> <p>Ejemplo 2: Combinar arrays <pre><code>const frutas = [\"manzana\", \"pera\"];\nconst verduras = [\"lechuga\", \"tomate\"];\n\n// M\u00e9todo antiguo\nconst alimentos1 = frutas.concat(verduras);\n\n// Con spread (m\u00e1s legible)\nconst alimentos2 = [...frutas, ...verduras];\n// Tambi\u00e9n puedes agregar elementos extra\nconst alimentos3 = [...frutas, \"naranja\", ...verduras, \"zanahoria\"];\n</code></pre></p> <p>Ejemplo 3: Rest en desestructuraci\u00f3n <pre><code>const [primero, segundo, ...resto] = [1, 2, 3, 4, 5];\nconsole.log(primero); // 1\nconsole.log(segundo); // 2\nconsole.log(resto);   // [3, 4, 5]\n\nconst { nombre, ...otrosDatos } = {\n    nombre: \"Ana\",\n    edad: 25,\n    ciudad: \"Madrid\",\n    trabajo: \"Desarrolladora\"\n};\nconsole.log(nombre);      // \"Ana\"\nconsole.log(otrosDatos);  // { edad: 25, ciudad: \"Madrid\", trabajo: \"Desarrolladora\" }\n</code></pre></p>"},{"location":"index_/#cuando-usarlo_3","title":"\u2705 Cu\u00e1ndo usarlo:","text":"<ul> <li>Spread: Para copiar/modificar objetos y arrays sin mutarlos.</li> <li>Rest: Para recibir m\u00faltiples argumentos en una funci\u00f3n.</li> </ul>"},{"location":"index_/#5-template-literals","title":"5. Template Literals","text":""},{"location":"index_/#descripcion_4","title":"\ud83d\udcd8 Descripci\u00f3n:","text":"<p>Permiten construir cadenas de texto con variables embebidas usando backticks ` y <code>${variable}</code>.</p>"},{"location":"index_/#ejemplo_2","title":"\ud83e\uddea Ejemplo:","text":"<pre><code>const producto = \"Laptop\";\nconst precio = 1200;\n\nconst mensaje = `El producto ${producto} cuesta ${precio}`;\nconsole.log(mensaje); // El producto Laptop cuesta $1200\n</code></pre>"},{"location":"index_/#ejemplos-adicionales-para-principiantes","title":"\ud83c\udfaf Ejemplos adicionales para principiantes:","text":"<p>Ejemplo 1: Multil\u00ednea <pre><code>// M\u00e9todo antiguo\nconst textoAntiguo = \"Primera l\u00ednea\\n\" +\n                     \"Segunda l\u00ednea\\n\" +\n                     \"Tercera l\u00ednea\";\n\n// Con template literals\nconst textoNuevo = `Primera l\u00ednea\nSegunda l\u00ednea\nTercera l\u00ednea`;\n</code></pre></p> <p>Ejemplo 2: Expresiones complejas <pre><code>const items = [\"manzana\", \"pera\", \"uva\"];\nconst mensaje = `Tienes ${items.length} item${items.length !== 1 ? 's' : ''} en tu carrito`;\nconsole.log(mensaje); // \"Tienes 3 items en tu carrito\"\n\n// Operaciones matem\u00e1ticas\nconst ancho = 10;\nconst alto = 5;\nconsole.log(`El \u00e1rea es ${ancho * alto} metros cuadrados`); // \"El \u00e1rea es 50 metros cuadrados\"\n</code></pre></p> <p>Ejemplo 3: HTML din\u00e1mico <pre><code>const usuario = {\n    nombre: \"Geovanny\",\n    edad: 28,\n    foto: \"geovanny.jpg\"\n};\n\nconst tarjetaHTML = `\n    &lt;div class=\"tarjeta\"&gt;\n        &lt;img src=\"${usuario.foto}\" alt=\"${usuario.nombre}\"&gt;\n        &lt;h3&gt;${usuario.nombre}&lt;/h3&gt;\n        &lt;p&gt;Edad: ${usuario.edad} a\u00f1os&lt;/p&gt;\n    &lt;/div&gt;\n`;\n</code></pre></p>"},{"location":"index_/#cuando-usarlo_4","title":"\u2705 Cu\u00e1ndo usarlo:","text":"<ul> <li>Al construir mensajes, HTML din\u00e1mico, o logs de consola.</li> <li>Mejora la legibilidad frente a <code>\"Hola \" + nombre + \", bienvenido\"</code>.</li> </ul>"},{"location":"index_/#metodos-de-arrays","title":"\ud83d\udcda M\u00e9todos de Arrays","text":""},{"location":"index_/#que-son-los-metodos-de-arrays","title":"\ud83c\udfaf \u00bfQu\u00e9 son los m\u00e9todos de arrays?","text":"<p>Los m\u00e9todos de arrays son funciones integradas en JavaScript que nos permiten trabajar con listas de elementos de forma m\u00e1s f\u00e1cil y eficiente. En lugar de escribir bucles <code>for</code> complejos, podemos usar estos m\u00e9todos que ya vienen preparados.</p>"},{"location":"index_/#metodos-de-transformacion-y-busqueda","title":"\ud83d\udcda M\u00e9todos de Transformaci\u00f3n y B\u00fasqueda","text":""},{"location":"index_/#1-map-transformar-cada-elemento","title":"1. <code>map()</code> - Transformar cada elemento","text":""},{"location":"index_/#que-es","title":"\ud83e\udd14 \u00bfQu\u00e9 es?","text":"<p><code>map()</code> es como una m\u00e1quina transformadora: toma cada elemento de tu array y lo convierte en algo nuevo, creando un nuevo array con los resultados.</p>"},{"location":"index_/#sintaxis-basica","title":"\ud83d\udcdd Sintaxis b\u00e1sica:","text":"<pre><code>const nuevoArray = arrayOriginal.map((elemento) =&gt; {\n    // transformaci\u00f3n\n    return elementoTransformado;\n});\n</code></pre>"},{"location":"index_/#cuando-usarlo_5","title":"\ud83c\udfaf \u00bfCu\u00e1ndo usarlo?","text":"<p>Usa <code>map()</code> cuando necesites: - Transformar TODOS los elementos de un array - Crear un nuevo array basado en otro - Aplicar la misma operaci\u00f3n a cada elemento</p>"},{"location":"index_/#ejemplos-practicos","title":"\ud83d\udca1 Ejemplos pr\u00e1cticos:","text":"<p>Ejemplo 1: Convertir precios a otra moneda <pre><code>const preciosUSD = [10, 25, 30, 45];\nconst preciosMXN = preciosUSD.map(precio =&gt; precio * 20);\nconsole.log(preciosMXN); // [200, 500, 600, 900]\n</code></pre></p> <p>Ejemplo 2: Extraer informaci\u00f3n espec\u00edfica <pre><code>const usuarios = [\n    { nombre: \"Ana\", edad: 25, email: \"ana@mail.com\" },\n    { nombre: \"Luis\", edad: 30, email: \"luis@mail.com\" }\n];\n\n// Solo queremos los nombres\nconst nombres = usuarios.map(usuario =&gt; usuario.nombre);\nconsole.log(nombres); // [\"Ana\", \"Luis\"]\n</code></pre></p> <p>Ejemplo 3: Crear elementos HTML (\u00fatil en React) <pre><code>const productos = [\"Laptop\", \"Mouse\", \"Teclado\"];\nconst listaHTML = productos.map(producto =&gt; `&lt;li&gt;${producto}&lt;/li&gt;`);\n// [\"&lt;li&gt;Laptop&lt;/li&gt;\", \"&lt;li&gt;Mouse&lt;/li&gt;\", \"&lt;li&gt;Teclado&lt;/li&gt;\"]\n</code></pre></p>"},{"location":"index_/#2-filter-filtrar-elementos","title":"2. <code>filter()</code> - Filtrar elementos","text":""},{"location":"index_/#que-es_1","title":"\ud83e\udd14 \u00bfQu\u00e9 es?","text":"<p><code>filter()</code> es como un colador o filtro: solo deja pasar los elementos que cumplen una condici\u00f3n espec\u00edfica.</p>"},{"location":"index_/#sintaxis-basica_1","title":"\ud83d\udcdd Sintaxis b\u00e1sica:","text":"<pre><code>const arrayFiltrado = arrayOriginal.filter((elemento) =&gt; {\n    // condici\u00f3n\n    return true; // mantener elemento\n    return false; // descartar elemento\n});\n</code></pre>"},{"location":"index_/#cuando-usarlo_6","title":"\ud83c\udfaf \u00bfCu\u00e1ndo usarlo?","text":"<p>Usa <code>filter()</code> cuando necesites: - Obtener solo algunos elementos que cumplan una condici\u00f3n - Eliminar elementos no deseados - Crear subconjuntos de datos</p>"},{"location":"index_/#ejemplos-practicos_1","title":"\ud83d\udca1 Ejemplos pr\u00e1cticos:","text":"<p>Ejemplo 1: Filtrar n\u00fameros <pre><code>const numeros = [1, 5, 10, 15, 20, 25];\nconst mayoresQue10 = numeros.filter(num =&gt; num &gt; 10);\nconsole.log(mayoresQue10); // [15, 20, 25]\n</code></pre></p> <p>Ejemplo 2: Filtrar productos por precio <pre><code>const productos = [\n    { nombre: \"Laptop\", precio: 1200 },\n    { nombre: \"Mouse\", precio: 25 },\n    { nombre: \"Monitor\", precio: 300 },\n    { nombre: \"Teclado\", precio: 80 }\n];\n\n// Solo productos baratos (menos de 100)\nconst productosBaratos = productos.filter(producto =&gt; producto.precio &lt; 100);\nconsole.log(productosBaratos); \n// [{ nombre: \"Mouse\", precio: 25 }, { nombre: \"Teclado\", precio: 80 }]\n</code></pre></p> <p>Ejemplo 3: Filtrar tareas completadas <pre><code>const tareas = [\n    { id: 1, titulo: \"Estudiar JS\", completada: true },\n    { id: 2, titulo: \"Hacer ejercicio\", completada: false },\n    { id: 3, titulo: \"Leer libro\", completada: true }\n];\n\nconst tareasPendientes = tareas.filter(tarea =&gt; !tarea.completada);\n// Solo devuelve: [{ id: 2, titulo: \"Hacer ejercicio\", completada: false }]\n</code></pre></p>"},{"location":"index_/#3-find-encontrar-un-elemento","title":"3. <code>find()</code> - Encontrar UN elemento","text":""},{"location":"index_/#que-es_2","title":"\ud83e\udd14 \u00bfQu\u00e9 es?","text":"<p><code>find()</code> es como un detective: busca en el array hasta encontrar EL PRIMER elemento que cumple una condici\u00f3n y lo devuelve.</p>"},{"location":"index_/#sintaxis-basica_2","title":"\ud83d\udcdd Sintaxis b\u00e1sica:","text":"<pre><code>const elementoEncontrado = array.find((elemento) =&gt; {\n    // condici\u00f3n de b\u00fasqueda\n    return elemento.propiedad === valorBuscado;\n});\n</code></pre>"},{"location":"index_/#cuando-usarlo_7","title":"\ud83c\udfaf \u00bfCu\u00e1ndo usarlo?","text":"<p>Usa <code>find()</code> cuando necesites: - Buscar UN elemento espec\u00edfico - Encontrar un objeto por su ID - Obtener el primer elemento que cumple una condici\u00f3n</p>"},{"location":"index_/#ejemplos-practicos_2","title":"\ud83d\udca1 Ejemplos pr\u00e1cticos:","text":"<p>Ejemplo 1: Buscar un usuario por ID <pre><code>const usuarios = [\n    { id: 1, nombre: \"Ana\" },\n    { id: 2, nombre: \"Luis\" },\n    { id: 3, nombre: \"Mar\u00eda\" }\n];\n\nconst usuario = usuarios.find(u =&gt; u.id === 2);\nconsole.log(usuario); // { id: 2, nombre: \"Luis\" }\n</code></pre></p> <p>Ejemplo 2: Encontrar un producto <pre><code>const inventario = [\n    { codigo: \"A001\", producto: \"Laptop\", stock: 5 },\n    { codigo: \"A002\", producto: \"Mouse\", stock: 50 },\n    { codigo: \"A003\", producto: \"Teclado\", stock: 0 }\n];\n\nconst productoSinStock = inventario.find(item =&gt; item.stock === 0);\nconsole.log(productoSinStock); // { codigo: \"A003\", producto: \"Teclado\", stock: 0 }\n</code></pre></p>"},{"location":"index_/#4-findindex-encontrar-la-posicion","title":"4. <code>findIndex()</code> - Encontrar la POSICI\u00d3N","text":""},{"location":"index_/#que-es_3","title":"\ud83e\udd14 \u00bfQu\u00e9 es?","text":"<p><code>findIndex()</code> es como <code>find()</code>, pero en lugar de devolver el elemento, devuelve su posici\u00f3n (\u00edndice) en el array.</p>"},{"location":"index_/#sintaxis-basica_3","title":"\ud83d\udcdd Sintaxis b\u00e1sica:","text":"<pre><code>const posicion = array.findIndex((elemento) =&gt; {\n    // condici\u00f3n de b\u00fasqueda\n    return elemento.propiedad === valorBuscado;\n});\n</code></pre>"},{"location":"index_/#cuando-usarlo_8","title":"\ud83c\udfaf \u00bfCu\u00e1ndo usarlo?","text":"<p>Usa <code>findIndex()</code> cuando necesites: - Saber EN QU\u00c9 POSICI\u00d3N est\u00e1 un elemento - Actualizar o eliminar un elemento espec\u00edfico - Verificar si un elemento existe (devuelve -1 si no existe)</p>"},{"location":"index_/#ejemplos-practicos_3","title":"\ud83d\udca1 Ejemplos pr\u00e1cticos:","text":"<p>Ejemplo 1: Encontrar posici\u00f3n para actualizar <pre><code>const tareas = [\n    { id: 1, titulo: \"Estudiar\" },\n    { id: 2, titulo: \"Ejercicio\" },\n    { id: 3, titulo: \"Leer\" }\n];\n\n// Encontrar posici\u00f3n de la tarea con id 2\nconst indice = tareas.findIndex(tarea =&gt; tarea.id === 2);\nconsole.log(indice); // 1 (segunda posici\u00f3n)\n\n// Actualizar esa tarea\nif (indice !== -1) {\n    tareas[indice].titulo = \"Hacer ejercicio 30 min\";\n}\n</code></pre></p> <p>Ejemplo 2: Verificar si existe <pre><code>const emails = [\"ana@mail.com\", \"luis@mail.com\", \"maria@mail.com\"];\n\nconst existe = emails.findIndex(email =&gt; email === \"pedro@mail.com\");\nconsole.log(existe); // -1 (no existe)\n\nif (existe === -1) {\n    console.log(\"Email no registrado\");\n}\n</code></pre></p>"},{"location":"index_/#metodos-de-validacion-devuelven-truefalse","title":"\ud83d\udd0d M\u00e9todos de Validaci\u00f3n (Devuelven true/false)","text":""},{"location":"index_/#5-some-al-menos-uno-cumple","title":"5. <code>some()</code> - \u00bfAL MENOS UNO cumple?","text":""},{"location":"index_/#que-es_4","title":"\ud83e\udd14 \u00bfQu\u00e9 es?","text":"<p><code>some()</code> verifica si AL MENOS UN elemento del array cumple una condici\u00f3n. Es como preguntar \"\u00bfHay alguno que...?\"</p>"},{"location":"index_/#sintaxis-basica_4","title":"\ud83d\udcdd Sintaxis b\u00e1sica:","text":"<pre><code>const hayAlguno = array.some((elemento) =&gt; {\n    // condici\u00f3n\n    return condicion;\n});\n</code></pre>"},{"location":"index_/#cuando-usarlo_9","title":"\ud83c\udfaf \u00bfCu\u00e1ndo usarlo?","text":"<p>Usa <code>some()</code> cuando necesites saber si: - Existe al menos un elemento que cumple algo - Hay alg\u00fan error en una lista - Al menos un usuario est\u00e1 activo - Hay alg\u00fan producto en stock</p>"},{"location":"index_/#ejemplos-practicos_4","title":"\ud83d\udca1 Ejemplos pr\u00e1cticos:","text":"<p>Ejemplo 1: Verificar si hay productos caros <pre><code>const productos = [\n    { nombre: \"Pan\", precio: 2 },\n    { nombre: \"Leche\", precio: 3 },\n    { nombre: \"Laptop\", precio: 1200 }\n];\n\nconst hayProductosCars = productos.some(producto =&gt; producto.precio &gt; 1000);\nconsole.log(hayProductosCars); // true (por la laptop)\n</code></pre></p> <p>Ejemplo 2: Verificar errores en formulario <pre><code>const camposFormulario = [\n    { campo: \"nombre\", valor: \"Ana\", error: false },\n    { campo: \"email\", valor: \"\", error: true },\n    { campo: \"telefono\", valor: \"123456\", error: false }\n];\n\nconst hayErrores = camposFormulario.some(campo =&gt; campo.error === true);\nif (hayErrores) {\n    console.log(\"Por favor corrige los errores\"); // Se ejecuta\n}\n</code></pre></p> <p>Ejemplo 3: Verificar permisos <pre><code>const permisos = [\"leer\", \"escribir\"];\nconst requiereAdmin = permisos.some(permiso =&gt; permiso === \"admin\");\nconsole.log(requiereAdmin); // false\n</code></pre></p>"},{"location":"index_/#6-every-todos-cumplen","title":"6. <code>every()</code> - \u00bfTODOS cumplen?","text":""},{"location":"index_/#que-es_5","title":"\ud83e\udd14 \u00bfQu\u00e9 es?","text":"<p><code>every()</code> verifica si TODOS los elementos del array cumplen una condici\u00f3n. Es como preguntar \"\u00bfTodos son...?\"</p>"},{"location":"index_/#sintaxis-basica_5","title":"\ud83d\udcdd Sintaxis b\u00e1sica:","text":"<pre><code>const todosCumplen = array.every((elemento) =&gt; {\n    // condici\u00f3n\n    return condicion;\n});\n</code></pre>"},{"location":"index_/#cuando-usarlo_10","title":"\ud83c\udfaf \u00bfCu\u00e1ndo usarlo?","text":"<p>Usa <code>every()</code> cuando necesites verificar si: - Todos los campos est\u00e1n completos - Todos los usuarios est\u00e1n activos - Todas las calificaciones son aprobatorias - Todos los productos tienen stock</p>"},{"location":"index_/#ejemplos-practicos_5","title":"\ud83d\udca1 Ejemplos pr\u00e1cticos:","text":"<p>Ejemplo 1: Validar formulario completo <pre><code>const formulario = [\n    { campo: \"nombre\", valor: \"Ana\" },\n    { campo: \"email\", valor: \"ana@mail.com\" },\n    { campo: \"telefono\", valor: \"123456789\" }\n];\n\nconst formularioCompleto = formulario.every(campo =&gt; campo.valor !== \"\");\nconsole.log(formularioCompleto); // true (todos tienen valor)\n</code></pre></p> <p>Ejemplo 2: Verificar edades <pre><code>const edades = [22, 25, 30, 28, 19];\nconst todosSonMayores = edades.every(edad =&gt; edad &gt;= 18);\nconsole.log(todosSonMayores); // true\n\nconst todosMayoresDe21 = edades.every(edad =&gt; edad &gt; 21);\nconsole.log(todosMayoresDe21); // false (hay uno de 19)\n</code></pre></p> <p>Ejemplo 3: Verificar stock <pre><code>const carrito = [\n    { producto: \"Laptop\", cantidad: 1, hayStock: true },\n    { producto: \"Mouse\", cantidad: 2, hayStock: true },\n    { producto: \"Teclado\", cantidad: 1, hayStock: false }\n];\n\nconst todosDisponibles = carrito.every(item =&gt; item.hayStock);\nif (!todosDisponibles) {\n    console.log(\"Algunos productos no est\u00e1n disponibles\"); // Se ejecuta\n}\n</code></pre></p>"},{"location":"index_/#comparacion-visual","title":"\ud83d\udcca Comparaci\u00f3n Visual","text":"M\u00e9todo \u00bfQu\u00e9 devuelve? \u00bfCu\u00e1ndo usarlo? <code>map()</code> Nuevo array transformado Transformar TODOS los elementos <code>filter()</code> Nuevo array con elementos filtrados Obtener ALGUNOS elementos <code>find()</code> El PRIMER elemento encontrado Buscar UN elemento espec\u00edfico <code>findIndex()</code> La POSICI\u00d3N del elemento Saber D\u00d3NDE est\u00e1 un elemento <code>some()</code> <code>true</code> o <code>false</code> Verificar si AL MENOS UNO cumple <code>every()</code> <code>true</code> o <code>false</code> Verificar si TODOS cumplen"},{"location":"index_/#ejemplos-combinados","title":"\ud83c\udfae Ejemplos Combinados","text":""},{"location":"index_/#sistema-de-tareas","title":"Sistema de Tareas","text":"<pre><code>const tareas = [\n    { id: 1, titulo: \"Comprar pan\", completada: true, prioridad: \"baja\" },\n    { id: 2, titulo: \"Estudiar JS\", completada: false, prioridad: \"alta\" },\n    { id: 3, titulo: \"Hacer ejercicio\", completada: false, prioridad: \"media\" },\n    { id: 4, titulo: \"Leer emails\", completada: true, prioridad: \"alta\" }\n];\n\n// 1. Obtener solo t\u00edtulos de tareas (map)\nconst titulos = tareas.map(t =&gt; t.titulo);\n\n// 2. Filtrar tareas pendientes (filter)\nconst pendientes = tareas.filter(t =&gt; !t.completada);\n\n// 3. Buscar una tarea espec\u00edfica (find)\nconst tareaEstudiar = tareas.find(t =&gt; t.titulo.includes(\"Estudiar\"));\n\n// 4. Encontrar posici\u00f3n para actualizar (findIndex)\nconst posicion = tareas.findIndex(t =&gt; t.id === 3);\n\n// 5. \u00bfHay alguna tarea de alta prioridad pendiente? (some)\nconst urgente = tareas.some(t =&gt; t.prioridad === \"alta\" &amp;&amp; !t.completada);\n\n// 6. \u00bfTodas las tareas de alta prioridad est\u00e1n completadas? (every)\nconst altasCompletadas = tareas\n    .filter(t =&gt; t.prioridad === \"alta\")\n    .every(t =&gt; t.completada);\n</code></pre>"},{"location":"index_/#carrito-de-compras","title":"Carrito de Compras","text":"<pre><code>const carrito = [\n    { id: 1, producto: \"Laptop\", precio: 1200, cantidad: 1 },\n    { id: 2, producto: \"Mouse\", precio: 25, cantidad: 2 },\n    { id: 3, producto: \"Teclado\", precio: 80, cantidad: 1 }\n];\n\n// Calcular precio total con map y reduce\nconst total = carrito\n    .map(item =&gt; item.precio * item.cantidad) // [1200, 50, 80]\n    .reduce((suma, precio) =&gt; suma + precio, 0); // 1330\n\n// Verificar si hay productos caros\nconst hayProductosCostosos = carrito.some(item =&gt; item.precio &gt; 1000);\n\n// Buscar un producto espec\u00edfico\nconst laptop = carrito.find(item =&gt; item.producto === \"Laptop\");\n\n// Todos los productos cuestan menos de 2000?\nconst preciosRazonables = carrito.every(item =&gt; item.precio &lt; 2000);\n</code></pre>"},{"location":"index_/#consejos","title":"\ud83d\ude80 Consejos","text":"<ol> <li>Empieza con <code>map()</code> y <code>filter()</code> - Son los m\u00e1s comunes</li> <li>Recuerda el valor de retorno:</li> <li><code>map()</code> y <code>filter()</code> \u2192 nuevo array</li> <li><code>find()</code> \u2192 un elemento o <code>undefined</code></li> <li><code>findIndex()</code> \u2192 n\u00famero o <code>-1</code></li> <li><code>some()</code> y <code>every()</code> \u2192 <code>true</code> o <code>false</code></li> <li>No modifiques el array original - Estos m\u00e9todos crean copias</li> <li>Usa el m\u00e9todo correcto:</li> <li>\u00bfNecesitas transformar? \u2192 <code>map()</code></li> <li>\u00bfNecesitas filtrar? \u2192 <code>filter()</code></li> <li>\u00bfBuscas uno? \u2192 <code>find()</code></li> <li>\u00bfNecesitas verificar? \u2192 <code>some()</code> o <code>every()</code></li> </ol>"},{"location":"index_/#ejercicios-de-practica","title":"\ud83d\udcdd Ejercicios de Pr\u00e1ctica","text":""},{"location":"index_/#ejercicio-1-lista-de-estudiantes","title":"Ejercicio 1: Lista de Estudiantes","text":"<pre><code>const estudiantes = [\n    { nombre: \"Ana\", calificacion: 4, asistencia: 90 },\n    { nombre: \"Luis\", calificacion: 3, asistencia: 85 },\n    { nombre: \"Mar\u00eda\", calificacion: 5, asistencia: 95 },\n    { nombre: \"Carlos\", calificacion: 2, asistencia: 80 }\n];\n\n// TODO: \n// 1. Obt\u00e9n solo los nombres de los estudiantes\n// 2. Filtra estudiantes con calificaci\u00f3n mayor a 3\n// 3. Encuentra al estudiante \"Mar\u00eda\"\n// 4. \u00bfTodos tienen asistencia mayor a 75%?\n// 5. \u00bfHay alg\u00fan estudiante reprobado (calificaci\u00f3n &lt; 30)?\n</code></pre>"},{"location":"index_/#ejercicio-2-inventario-de-tienda","title":"Ejercicio 2: Inventario de Tienda","text":"<pre><code>const inventario = [\n    { codigo: \"A001\", nombre: \"Camisa\", precio: 25, stock: 50 },\n    { codigo: \"A002\", nombre: \"Pantal\u00f3n\", precio: 40, stock: 0 },\n    { codigo: \"A003\", nombre: \"Zapatos\", precio: 60, stock: 20 },\n    { codigo: \"A004\", nombre: \"Gorra\", precio: 15, stock: 0 }\n];\n\n// TODO:\n// 1. Crea un array con los precios con 10% de descuento\n// 2. Filtra productos sin stock\n// 3. Encuentra la posici\u00f3n del producto \"Zapatos\"\n// 4. \u00bfTodos los productos cuestan menos de $100?\n// 5. \u00bfHay alg\u00fan producto sin stock?\n</code></pre>"},{"location":"instalaciones_mac/","title":"\ud83e\uddf0 Gu\u00eda de Instalaci\u00f3n de React en Mac paso a paso","text":"<p>Esta gu\u00eda cubre la instalaci\u00f3n desde Node.js hasta la creaci\u00f3n de un proyecto React con Vite en macOS.</p>"},{"location":"instalaciones_mac/#1-instalar-nodejs","title":"1\ufe0f\u20e3 Instalar Node.js","text":"<p>React requiere Node.js (que incluye <code>npm</code>, el gestor de paquetes). Aqu\u00ed hay dos formas comunes de instalarlo:</p>"},{"location":"instalaciones_mac/#opcion-a-usar-node-version-manager-recomendado","title":"\u2705 Opci\u00f3n A: Usar Node Version Manager (recomendado)","text":"<ol> <li>Abre la terminal.</li> <li>Instala <code>nvm</code>:</li> </ol> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n</code></pre> <ol> <li>Cierra y vuelve a abrir la terminal, luego verifica que <code>nvm</code> est\u00e9 instalado:</li> </ol> <pre><code>command -v nvm\n</code></pre> <ol> <li>Instala la versi\u00f3n LTS de Node.js:</li> </ol> <pre><code>nvm install --lts\nnvm use --lts\n</code></pre> <ol> <li>Verifica que <code>node</code> y <code>npm</code> est\u00e1n instalados:</li> </ol> <pre><code>node -v\nnpm -v\n</code></pre>"},{"location":"instalaciones_mac/#2-crear-un-proyecto-react-con-vite","title":"2\ufe0f\u20e3 Crear un proyecto React con Vite","text":"<ol> <li>Usa <code>npm</code> para crear un nuevo proyecto con plantilla de React:</li> </ol> <pre><code>npm create vite@latest\n</code></pre> <ol> <li>Cuando el asistente pregunte:</li> <li>Nombre del proyecto: <code>tarea-react</code> (o el que quieras).</li> <li>Selecciona: <code>React</code></li> <li> <p>Lenguaje: <code>JavaScript</code> (puedes elegir TypeScript si lo deseas).</p> </li> <li> <p>Entra al directorio del proyecto:</p> </li> </ol> <pre><code>cd tarea-react\n</code></pre> <ol> <li>Instala las dependencias:</li> </ol> <pre><code>npm install\n</code></pre> <ol> <li>Ejecuta el servidor de desarrollo:</li> </ol> <pre><code>npm run dev\n</code></pre> <ol> <li>Abre el navegador en la direcci\u00f3n que te muestra, usualmente: http://localhost:5173</li> </ol>"},{"location":"instalaciones_mac/#3-estructura-de-carpetas","title":"3\ufe0f\u20e3 Estructura de carpetas","text":"<pre><code>tarea-react/\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 vite.config.js\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 App.jsx\n    \u2514\u2500\u2500 main.jsx\n</code></pre>"},{"location":"instalaciones_mac/#4-editar-tu-primer-componente","title":"4\ufe0f\u20e3 Editar tu primer componente","text":"<p>Edita <code>App.jsx</code> para modificar el contenido que se muestra en pantalla. Por ejemplo:</p> <pre><code>function App() {\n  return &lt;h1&gt;Hola, React en mi Mac! \ud83c\udf89&lt;/h1&gt;;\n}\n\nexport default App;\n</code></pre> <p>Guarda y ver\u00e1s los cambios autom\u00e1ticamente en el navegador.</p>"},{"location":"react-guide/","title":"\ud83d\ude80 Introducci\u00f3n a React - Gu\u00eda Detallada para Principiantes y Nivel Intermedio","text":""},{"location":"react-guide/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>\u00bfQu\u00e9 es React?</li> <li>Primer ejemplo: Hola Mundo</li> <li>JSX: JavaScript + XML</li> <li>Creando tu primer proyecto React</li> <li>Componentes: Los bloques de construcci\u00f3n</li> <li>Estado: Haciendo tu app interactiva</li> <li>Fragmentos: Agrupando elementos</li> <li>Estilos en React</li> <li>Resumen y pr\u00f3ximos pasos</li> </ol>"},{"location":"react-guide/#que-es-react","title":"\ud83e\udd14 \u00bfQu\u00e9 es React?","text":""},{"location":"react-guide/#definicion-tecnica-completa","title":"Definici\u00f3n t\u00e9cnica completa","text":"<p>React es una biblioteca JavaScript declarativa, eficiente y flexible para construir interfaces de usuario. Desarrollada por Facebook (ahora Meta) en 2013, React permite construir UIs complejas a partir de peque\u00f1as piezas de c\u00f3digo encapsuladas llamadas \"componentes\".</p> <p>A nivel t\u00e9cnico, React implementa:</p> <ul> <li>Virtual DOM: Una representaci\u00f3n en memoria del DOM real, que React utiliza para optimizar las actualizaciones de la interfaz.</li> <li>Sistema de reconciliaci\u00f3n (Reconciler): Algoritmo (conocido como \"React Fiber\" desde React 16) que determina qu\u00e9 partes del DOM necesitan actualizarse.</li> <li>Paradigma declarativo: Describe el \"qu\u00e9\" debe mostrarse, no el \"c\u00f3mo\" actualizarlo.</li> <li>Flujo de datos unidireccional: La informaci\u00f3n fluye en una sola direcci\u00f3n, facilitando el seguimiento de cambios.</li> </ul>"},{"location":"react-guide/#comparacion-con-otros-frameworks","title":"\ud83c\udfaf Comparaci\u00f3n con otros frameworks","text":"Caracter\u00edstica React Angular Vue Vanilla JS Tipo Biblioteca Framework completo Framework progresivo Lenguaje base Curva de aprendizaje Moderada Pronunciada Suave Variable Tama\u00f1o (gzipped) ~40KB ~143KB ~33KB 0KB Enfoque Solo UI, ecosistema para lo dem\u00e1s Todo incluido Adaptable Manual Renderizado Virtual DOM Real DOM + Dirty Checking Virtual DOM Real DOM Datos Unidireccional Bidireccional Bidireccional o unidireccional Manual"},{"location":"react-guide/#el-virtual-dom-explicado","title":"\ud83d\udd0d El Virtual DOM explicado","text":"<pre><code>Cuando actualizas un componente en React:\n\n1. Se genera un nuevo \u00e1rbol Virtual DOM\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Virtual DOM (Nuevo)   \u2502\n   \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510             \u2502\n   \u2502  \u2502 Div  \u2502             \u2502\n   \u2502  \u2502  \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2510 \u2502\n   \u2502  \u2502  \u2502 h1   \u2502   \u2502 p  \u2502 \u2502\n   \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n   \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u25bc\n2. Se compara con el Virtual DOM anterior\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Algoritmo de Diffing    \u2502\n   \u2502 \"\u00bfQu\u00e9 cambi\u00f3 realmente?\"|\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u25bc\n3. Solo se actualiza lo necesario en el DOM real\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 DOM Real              \u2502\n   \u2502 (Solo se actualiza    \u2502\n   \u2502  el elemento &lt;p&gt;)     \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"react-guide/#ventajas-tecnicas","title":"Ventajas t\u00e9cnicas:","text":"<ul> <li>Actualizaci\u00f3n selectiva: React solo modifica los nodos del DOM que realmente cambiaron.</li> <li>Actualizaciones por lotes: Agrupa m\u00faltiples cambios en una sola actualizaci\u00f3n.</li> <li>Optimizaci\u00f3n autom\u00e1tica: Prioriza actualizaciones cr\u00edticas con su algoritmo de conciliaci\u00f3n.</li> </ul>"},{"location":"react-guide/#limitaciones-de-react","title":"\ud83d\udeab Limitaciones de React","text":"<ol> <li> <p>Biblioteca, no framework: React solo maneja la vista (UI). Necesitar\u00e1s otras bibliotecas para:</p> <ul> <li>Manejo de estado global (Redux, Context API, Zustand)</li> <li>Enrutamiento (React Router)</li> <li>Llamadas a API (Axios, fetch)</li> </ul> </li> <li> <p>JSX requiere transpilaci\u00f3n: El c\u00f3digo no funciona directamente en navegadores sin compilaci\u00f3n previa.</p> </li> <li> <p>Empaquetado requerido: Necesitas herramientas como Webpack, Vite o Create React App.</p> </li> <li> <p>Ciclo de actualizaciones r\u00e1pido: La API y mejores pr\u00e1cticas evolucionan constantemente.</p> </li> </ol>"},{"location":"react-guide/#errores-comunes-para-principiantes","title":"\u26a0\ufe0f Errores comunes para principiantes","text":"<ol> <li> <p>Modificar estado directamente:     <pre><code>// \u274c INCORRECTO\nthis.state.count = this.state.count + 1;\n\n// \u2705 CORRECTO\nthis.setState({ count: this.state.count + 1 });\n// o en Hooks:\nsetCount(prevCount =&gt; prevCount + 1);\n</code></pre></p> </li> <li> <p>No entender la naturaleza as\u00edncrona de setState:    <pre><code>// \u274c PROBLEMA\nsetState({ count: count + 1 });\nconsole.log(count); // Muestra el valor antiguo, no el actualizado\n\n// \u2705 SOLUCI\u00d3N\nsetState({ count: count + 1 }, () =&gt; {\n  console.log(count); // Callback que se ejecuta despu\u00e9s de la actualizaci\u00f3n\n});\n</code></pre></p> </li> </ol>"},{"location":"react-guide/#primer-ejemplo-hola-mundo","title":"\ud83d\udc4b Primer ejemplo: Hola Mundo","text":""},{"location":"react-guide/#codigo-desglosado-a-nivel-tecnico","title":"C\u00f3digo desglosado a nivel t\u00e9cnico","text":"<pre><code>// 1. Importar dependencias (normalmente ser\u00eda as\u00ed)\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\n\n// 2. Encontrar el elemento contenedor\nconst divRoot = document.querySelector('#root');\n\n// 3. Crear la ra\u00edz React y renderizar\nconst root = ReactDOM.createRoot(divRoot);\nroot.render(&lt;h1&gt;Hola Mundo&lt;/h1&gt;);\n</code></pre>"},{"location":"react-guide/#analisis-tecnico-detallado","title":"\ud83d\udd2c An\u00e1lisis t\u00e9cnico detallado","text":"<ol> <li> <p>ReactDOM.createRoot vs ReactDOM.render</p> <ul> <li>React 18 introdujo <code>createRoot</code> que reemplaza al antiguo <code>render</code></li> <li>Permite el modo concurrente (Concurrent Mode)</li> <li>Mejora el rendimiento y habilita nuevas funcionalidades como Suspense</li> </ul> </li> <li> <p>Qu\u00e9 ocurre realmente durante el renderizado:    <pre><code>1. JSX &lt;h1&gt;Hola Mundo&lt;/h1&gt; se transpila a:\n   React.createElement('h1', null, 'Hola Mundo')\n\n2. createElement crea un objeto que describe el elemento:\n   {\n     type: 'h1',\n     props: {\n       children: 'Hola Mundo'\n     },\n     key: null,\n     ref: null\n   }\n\n3. Este objeto alimenta el algoritmo de reconciliaci\u00f3n\n\n4. React crea/actualiza el DOM real:\n   document.createElement('h1')\n   textNode = document.createTextNode('Hola Mundo')\n   h1.appendChild(textNode)\n   container.appendChild(h1)\n</code></pre></p> </li> </ol>"},{"location":"react-guide/#html-completo-con-explicaciones","title":"\ud83d\udce6 HTML completo con explicaciones","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Mi App React&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- React necesita un nodo DOM para \"montarse\" --&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n\n    &lt;!-- Scripts de React (versi\u00f3n de desarrollo) --&gt;\n    &lt;script src=\"https://unpkg.com/react@18/umd/react.development.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- Babel para transpilaci\u00f3n en el navegador (solo para desarrollo) --&gt;\n    &lt;script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- Nuestro c\u00f3digo React con la directiva para Babel --&gt;\n    &lt;script type=\"text/babel\"&gt;\n        // 1. Encontrar el contenedor\n        const container = document.getElementById('root');\n\n        // 2. Crear una ra\u00edz React (React 18+)\n        const root = ReactDOM.createRoot(container);\n\n        // 3. Definir componente funcional\n        function App() {\n            return &lt;h1&gt;Hola Mundo desde React&lt;/h1&gt;;\n        }\n\n        // 4. Renderizar el componente\n        root.render(&lt;App /&gt;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"react-guide/#limitaciones-de-este-enfoque","title":"\u26a0\ufe0f Limitaciones de este enfoque","text":"<ol> <li> <p>Solo para experimentaci\u00f3n: Este m\u00e9todo de cargar React directamente en HTML:</p> <ul> <li>No utiliza m\u00f3dulos ES6 (import/export)</li> <li>Transpila JSX en tiempo de ejecuci\u00f3n (lento)</li> <li>No tiene hot-reloading ni optimizaciones</li> </ul> </li> <li> <p>Rendimiento: Babel en el navegador es significativamente m\u00e1s lento que la transpilaci\u00f3n previa.</p> </li> <li> <p>Producci\u00f3n: Para producci\u00f3n necesitar\u00edas:</p> <ul> <li>Archivos de producci\u00f3n minificados (react.production.min.js)</li> <li>Eliminar Babel del navegador</li> <li>Pre-compilar tu c\u00f3digo</li> </ul> </li> </ol>"},{"location":"react-guide/#alternativas-de-renderizado","title":"\ud83d\udd04 Alternativas de renderizado","text":"<pre><code>// Opci\u00f3n 1: Antiguo m\u00e9todo (React &lt; 18)\nReactDOM.render(&lt;App /&gt;, container);\n\n// Opci\u00f3n 2: Modo estricto (ayuda a encontrar problemas)\nroot.render(\n  &lt;React.StrictMode&gt;\n    &lt;App /&gt;\n  &lt;/React.StrictMode&gt;\n);\n\n// Opci\u00f3n 3: Hidratar contenido renderizado en servidor\nReactDOM.hydrateRoot(container, &lt;App /&gt;);\n</code></pre>"},{"location":"react-guide/#modo-estricto-strictmode-explicado","title":"\ud83c\udf10 Modo estricto (StrictMode) explicado","text":"<p>React StrictMode:</p> <ul> <li>Identifica componentes con m\u00e9todos de ciclo de vida inseguros</li> <li>Advierte sobre legacy API usage</li> <li>Detecta efectos secundarios inesperados ejecutando el ciclo de vida dos veces</li> <li>Verifica uso de legacy context API</li> <li>Advierte sobre API deprecated</li> </ul>"},{"location":"react-guide/#jsx-javascript-xml","title":"\ud83c\udfa8 JSX: JavaScript + XML","text":""},{"location":"react-guide/#definicion-tecnica-completa_1","title":"Definici\u00f3n t\u00e9cnica completa","text":"<p>JSX (JavaScript XML) es una extensi\u00f3n de sintaxis para JavaScript que parece HTML pero con todo el poder de JavaScript. T\u00e9cnicamente, JSX:</p> <ul> <li>Es az\u00facar sint\u00e1ctico que se transpila a llamadas <code>React.createElement()</code></li> <li>Permite escribir c\u00f3digo declarativo que describe la UI</li> <li>Facilita la inclusi\u00f3n de l\u00f3gica JavaScript y marcado en el mismo lugar</li> <li>No es un string ni HTML, sino que produce \"elementos React\"</li> </ul>"},{"location":"react-guide/#el-proceso-de-transpilacion-al-detalle","title":"\ud83d\udd04 El proceso de transpilaci\u00f3n al detalle","text":"<pre><code>// JSX que escribes\nconst element = (\n  &lt;div className=\"container\"&gt;\n    &lt;h1 className=\"title\"&gt;Hola {nombre}&lt;/h1&gt;\n    &lt;p&gt;Bienvenido a React&lt;/p&gt;\n  &lt;/div&gt;\n);\n\n// Lo que Babel convierte\nconst element = React.createElement(\n  'div',\n  { className: 'container' },\n  React.createElement(\n    'h1',\n    { className: 'title' },\n    'Hola ', \n    nombre\n  ),\n  React.createElement(\n    'p',\n    null,\n    'Bienvenido a React'\n  )\n);\n\n// El objeto que React procesa internamente\n{\n  type: 'div',\n  props: {\n    className: 'container',\n    children: [\n      {\n        type: 'h1',\n        props: {\n          className: 'title',\n          children: ['Hola ', nombre]\n        }\n      },\n      {\n        type: 'p',\n        props: {\n          children: 'Bienvenido a React'\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"react-guide/#reglas-completas-de-jsx-con-explicaciones","title":"\ud83d\udccb Reglas completas de JSX con explicaciones","text":""},{"location":"react-guide/#1-elementos-deben-cerrarse","title":"1. Elementos deben cerrarse","text":"<p><pre><code>// \u274c INCORRECTO (en JSX)\n&lt;img src=\"foto.jpg\"&gt;\n&lt;br&gt;\n\n// \u2705 CORRECTO \n&lt;img src=\"foto.jpg\" /&gt;\n&lt;br /&gt;\n</code></pre> Por qu\u00e9: JSX sigue reglas m\u00e1s cercanas a XML que a HTML, requiriendo cierre de todas las etiquetas.</p>"},{"location":"react-guide/#2-atributos-en-camelcase","title":"2. Atributos en camelCase","text":"<p><pre><code>// \u274c INCORRECTO\n&lt;div class=\"container\" tabindex=\"0\" onclick={handleClick}&gt;\n\n// \u2705 CORRECTO\n&lt;div className=\"container\" tabIndex=\"0\" onClick={handleClick}&gt;\n</code></pre> Por qu\u00e9: JSX se convierte a objetos JavaScript donde las propiedades se escriben en camelCase.</p>"},{"location":"react-guide/#3-atributos-especificos-renombrados","title":"3. Atributos espec\u00edficos renombrados","text":"HTML JSX Raz\u00f3n <code>class</code> <code>className</code> <code>class</code> es palabra reservada en JS <code>for</code> <code>htmlFor</code> <code>for</code> es palabra reservada en JS <code>tabindex</code> <code>tabIndex</code> Consistencia con camelCase <code>maxlength</code> <code>maxLength</code> Consistencia con camelCase"},{"location":"react-guide/#4-expresiones-javascript-en-llaves","title":"4. Expresiones JavaScript en llaves <code>{}</code>","text":"<pre><code>const nombre = \"Juan\";\nconst edad = 25;\nconst esAdmin = true;\n\nreturn (\n  &lt;div&gt;\n    {/* Variables */}\n    &lt;h1&gt;Hola {nombre}&lt;/h1&gt;\n\n    {/* Expresiones */}\n    &lt;p&gt;En 5 a\u00f1os tendr\u00e1s {edad + 5} a\u00f1os&lt;/p&gt;\n\n    {/* Operador ternario (if inline) */}\n    &lt;p&gt;{esAdmin ? 'Eres administrador' : 'Usuario normal'}&lt;/p&gt;\n\n    {/* Llamadas a funciones */}\n    &lt;p&gt;{formatearNombre(nombre)}&lt;/p&gt;\n\n    {/* Expresiones con operadores l\u00f3gicos */}\n    {esAdmin &amp;&amp; &lt;AdminPanel /&gt;}\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"react-guide/#5-comentarios-en-jsx","title":"5. Comentarios en JSX","text":"<pre><code>&lt;div&gt;\n  {/* Este es un comentario JSX */}\n  &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n  {\n    // Tambi\u00e9n funciona as\u00ed\n    // pero requiere las llaves\n  }\n&lt;/div&gt;\n</code></pre>"},{"location":"react-guide/#6-espacios-en-blanco","title":"6. Espacios en blanco","text":"<p>JSX elimina espacios en blanco al inicio y final de l\u00ednea, y colapsa espacios consecutivos en uno solo.</p> <pre><code>// Estos dos son equivalentes:\n&lt;p&gt;Hola     Mundo&lt;/p&gt;\n&lt;p&gt;Hola Mundo&lt;/p&gt;\n\n// Para preservar espacios:\n&lt;p&gt;Hola{' '}Mundo&lt;/p&gt;\n</code></pre>"},{"location":"react-guide/#limitaciones-de-jsx","title":"\u26a0\ufe0f Limitaciones de JSX","text":"<ol> <li> <p>No es HTML v\u00e1lido:</p> <ul> <li>No todos los atributos HTML funcionan igual (<code>class</code> \u2192 <code>className</code>)</li> <li>Requiere que todos los elementos se cierren (<code>&lt;img /&gt;</code>, no <code>&lt;img&gt;</code>)</li> <li>No permite m\u00faltiples elementos ra\u00edz sin un contenedor</li> </ul> </li> <li> <p>Requiere transpilaci\u00f3n:</p> <ul> <li>No se ejecuta directamente en navegadores</li> <li>Necesita herramientas como Babel o TypeScript</li> </ul> </li> <li> <p>Errores comunes:</p> <ul> <li>Devolver m\u00faltiples elementos sin envolverlos</li> <li>Olvidar que <code>{}</code> en JSX eval\u00faa expresiones, no sentencias</li> <li>Problemas con el scope de <code>this</code> en funciones</li> </ul> </li> <li> <p>Diferencias de estilo en l\u00ednea:    <pre><code>// \u274c INCORRECTO (sintaxis CSS normal)\n&lt;div style=\"color: red; font-size: 16px;\"&gt;&lt;/div&gt;\n\n// \u2705 CORRECTO (objeto JavaScript)\n&lt;div style={{ color: 'red', fontSize: '16px' }}&gt;&lt;/div&gt;\n</code></pre></p> </li> </ol>"},{"location":"react-guide/#jsx-vs-alternativas","title":"\ud83d\udd04 JSX vs Alternativas","text":"Caracter\u00edstica JSX Template Strings React.createElement Frameworks con templates Sintaxis Similar a HTML JavaScript puro JavaScript puro Similar a HTML Tipado Verificable con TypeScript Sin verificaci\u00f3n de estructura Verificable pero verboso Var\u00eda seg\u00fan framework Legibilidad Alta para estructuras complejas Baja para UI complejas Muy baja para estructuras anidadas Alta Curva aprendizaje Media (reglas espec\u00edficas) Baja Baja pero tedioso Var\u00eda Herramientas Requiere transpilaci\u00f3n No requiere procesamiento No requiere procesamiento Requiere compilaci\u00f3n"},{"location":"react-guide/#creando-tu-primer-proyecto-react","title":"\ud83d\udee0\ufe0f Creando tu primer proyecto React","text":""},{"location":"react-guide/#opciones-de-configuracion-comparadas","title":"Opciones de configuraci\u00f3n comparadas","text":"M\u00e9todo Ventajas Desventajas Mejor para CDN (script tags) Sin instalaci\u00f3n, r\u00e1pido inicio No para producci\u00f3n, sin m\u00f3dulos, sin HMR Prototipos, demos Create React App Configuraci\u00f3n cero, todo incluido Pesado, dif\u00edcil personalizar a fondo Principiantes, apps medianas Vite Extremadamente r\u00e1pido, ligero Menos plugins que webpack La mayor\u00eda de proyectos nuevos Next.js SSR, SSG, optimizaciones Framework completo, m\u00e1s que React Sitios con SEO, producci\u00f3n Manual (webpack) Control total, personalizable Complejo, mucha configuraci\u00f3n Necesidades muy espec\u00edficas"},{"location":"react-guide/#comparacion-de-tamanos-y-rendimiento","title":"\ud83d\udcca Comparaci\u00f3n de tama\u00f1os y rendimiento","text":"<pre><code>Tiempo de arranque en desarrollo (segundos, MacBook Pro M1):\n- CDN: ~0.5s\n- Vite: ~0.3s \n- Create React App: ~5s\n- Next.js: ~2s\n- Webpack manual: ~3s (depende de configuraci\u00f3n)\n\nTama\u00f1o de build (app \"Hola Mundo\"):\n- CRA: ~200KB (gzipped)\n- Vite: ~80KB (gzipped)\n- Next.js: ~100KB (gzipped) \n- Manual: var\u00eda seg\u00fan configuraci\u00f3n\n</code></pre>"},{"location":"react-guide/#vite-configuracion-moderna-recomendada","title":"\ud83d\ude80 Vite: Configuraci\u00f3n moderna recomendada","text":"<pre><code># Crear nuevo proyecto\nnpm create vite@latest my-react-app -- --template react\n\n# Navegar al proyecto\ncd my-react-app\n\n# Instalar dependencias\nnpm install\n\n# Iniciar servidor de desarrollo\nnpm run dev\n</code></pre>"},{"location":"react-guide/#estructura-del-proyecto-explicada-vite","title":"\ud83d\udcc1 Estructura del proyecto explicada (Vite)","text":"<pre><code>my-react-app/\n\u251c\u2500\u2500 node_modules/        # Dependencias instaladas\n\u251c\u2500\u2500 public/              # Archivos est\u00e1ticos que no requieren procesamiento\n\u2502   \u2514\u2500\u2500 vite.svg         # Favicon y otros recursos\n\u251c\u2500\u2500 src/                 # C\u00f3digo fuente de la aplicaci\u00f3n\n\u2502   \u251c\u2500\u2500 assets/          # Im\u00e1genes, fuentes, etc. que pasan por build\n\u2502   \u251c\u2500\u2500 App.css          # Estilos del componente App\n\u2502   \u251c\u2500\u2500 App.jsx          # Componente principal\n\u2502   \u251c\u2500\u2500 index.css        # Estilos globales\n\u2502   \u2514\u2500\u2500 main.jsx         # Punto de entrada de la aplicaci\u00f3n\n\u251c\u2500\u2500 .eslintrc.cjs        # Configuraci\u00f3n de ESLint\n\u251c\u2500\u2500 .gitignore           # Archivos ignorados por git\n\u251c\u2500\u2500 index.html           # Plantilla HTML base\n\u251c\u2500\u2500 package.json         # Dependencias y scripts\n\u251c\u2500\u2500 package-lock.json    # Versiones exactas de dependencias\n\u2514\u2500\u2500 vite.config.js       # Configuraci\u00f3n de Vite\n</code></pre>"},{"location":"react-guide/#proceso-de-compilacion-y-bundling","title":"\ud83d\udd04 Proceso de compilaci\u00f3n y bundling","text":"<p>El proceso de construcci\u00f3n de una app React implica varias transformaciones:</p> <ol> <li> <p>Transpilaci\u00f3n de JSX y ES6+: </p> <ul> <li>JSX \u2192 <code>React.createElement()</code></li> <li>ES6+ \u2192 JavaScript compatible con navegadores</li> </ul> </li> <li> <p>Resoluci\u00f3n de m\u00f3dulos:</p> <ul> <li><code>import</code> y <code>export</code> \u2192 C\u00f3digo compatible con navegadores</li> <li>Dependencias NPM \u2192 Incluidas en el bundle</li> </ul> </li> <li> <p>Optimizaci\u00f3n y minificaci\u00f3n:</p> <ul> <li>Eliminaci\u00f3n de c\u00f3digo no utilizado (tree-shaking)</li> <li>Minificaci\u00f3n de JavaScript y CSS</li> <li>Optimizaci\u00f3n de im\u00e1genes y otros recursos</li> </ul> </li> <li> <p>Divisi\u00f3n de c\u00f3digo (code splitting):</p> <ul> <li>Separar c\u00f3digo en chunks para carga bajo demanda</li> <li>Utiliza <code>import()</code> din\u00e1mico o React.lazy()</li> </ul> </li> </ol>"},{"location":"react-guide/#problemas-comunes-y-soluciones","title":"\u26a0\ufe0f Problemas comunes y soluciones","text":"<ol> <li> <p>\"Module not found\":    <pre><code>ERROR: Cannot find module 'react'\n</code></pre> Soluci\u00f3n: <code>npm install react react-dom</code></p> </li> <li> <p>\"Unexpected token\" en JSX:    <pre><code>SyntaxError: Unexpected token '&lt;'\n</code></pre> Soluci\u00f3n: Aseg\u00farate de que Babel est\u00e1 configurado con el preset de React</p> </li> <li> <p>CORS al cargar recursos:    <pre><code>Access to fetch at 'http://...' has been blocked by CORS policy\n</code></pre> Soluci\u00f3n: Configura proxies en vite.config.js o usa herramientas como CORS Anywhere</p> </li> <li> <p>Hot Reload no funciona:    Soluci\u00f3n: Verifica que tu componente exporta por defecto o usa HMR expl\u00edcitamente</p> </li> </ol>"},{"location":"react-guide/#buenas-practicas-de-estructura-de-proyecto","title":"\ud83d\udccb Buenas pr\u00e1cticas de estructura de proyecto","text":"<pre><code>src/\n\u251c\u2500\u2500 assets/              # Recursos est\u00e1ticos (im\u00e1genes, fuentes)\n\u251c\u2500\u2500 components/          # Componentes reutilizables\n\u2502   \u251c\u2500\u2500 Button/\n\u2502   \u2502   \u251c\u2500\u2500 Button.jsx   # Componente\n\u2502   \u2502   \u251c\u2500\u2500 Button.css   # Estilos (o .module.css)\n\u2502   \u2502   \u251c\u2500\u2500 Button.test.jsx  # Tests\n\u2502   \u2502   \u2514\u2500\u2500 index.js     # Archivo de barril (re-exporta)\n\u2502   \u2514\u2500\u2500 Card/\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 hooks/               # Custom hooks\n\u251c\u2500\u2500 pages/ o views/      # Componentes de p\u00e1gina o vistas\n\u251c\u2500\u2500 services/            # L\u00f3gica de servicios (API, auth)\n\u251c\u2500\u2500 utils/               # Funciones utilitarias\n\u251c\u2500\u2500 contexts/            # Contextos de React\n\u251c\u2500\u2500 store/ o state/      # Estado global (Redux, Zustand)\n\u251c\u2500\u2500 styles/              # Estilos globales\n\u251c\u2500\u2500 types/               # Definiciones de tipos (TypeScript)\n\u251c\u2500\u2500 constants/           # Valores constantes\n\u251c\u2500\u2500 App.jsx              # Componente ra\u00edz\n\u2514\u2500\u2500 main.jsx             # Punto de entrada\n</code></pre>"},{"location":"react-guide/#componentes-los-bloques-de-construccion","title":"\ud83e\udde9 Componentes: Los bloques de construcci\u00f3n","text":""},{"location":"react-guide/#definicion-tecnica-completa_2","title":"Definici\u00f3n t\u00e9cnica completa","text":"<p>En React, un componente es: - Una funci\u00f3n o clase que acepta props (propiedades) como entrada - Retorna elementos React que describen lo que debe renderizarse en la UI - Puede mantener estado interno y efectos secundarios - Sigue un ciclo de vida espec\u00edfico controlado por React</p> <p>Hay dos tipos principales de componentes en React:</p>"},{"location":"react-guide/#comparacion-detallada-componentes-funcionales-vs-de-clase","title":"\ud83d\udd04 Comparaci\u00f3n detallada: Componentes funcionales vs. de clase","text":"Caracter\u00edstica Componentes funcionales Componentes de clase Sintaxis Funci\u00f3n que retorna JSX Clase que extiende React.Component Estado Hooks (useState, useReducer) this.state y this.setState() Ciclo de vida useEffect componentDidMount, componentDidUpdate, etc. Acceso a contexto useContext contextType o Consumer Referencias useRef createRef() o callback refs Manejo de props Desestructuraci\u00f3n directa this.props Optimizaci\u00f3n React.memo, useMemo, useCallback PureComponent, shouldComponentUpdate Tendencia actual Recomendados (enfoque moderno) Legacy (no recomendados para nuevo c\u00f3digo)"},{"location":"react-guide/#codigo-comparativo","title":"\ud83d\udcca C\u00f3digo comparativo","text":"<pre><code>// COMPONENTE FUNCIONAL (moderno)\nimport React, { useState, useEffect } from 'react';\n\nfunction UserProfile({ userId }) {\n  // Estado\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Efectos (ciclo de vida)\n  useEffect(() =&gt; {\n    const fetchUser = async () =&gt; {\n      setLoading(true);\n      try {\n        const response = await fetch(`/api/users/${userId}`);\n        const data = await response.json();\n        setUser(data);\n      } catch (error) {\n        console.error(\"Error fetching user:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUser();\n\n    // Limpieza al desmontar\n    return () =&gt; {\n      console.log(\"Componente desmontado\");\n    };\n  }, [userId]); // Dependencias\n\n  // Renderizado condicional\n  if (loading) return &lt;div&gt;Cargando...&lt;/div&gt;;\n  if (!user) return &lt;div&gt;Usuario no encontrado&lt;/div&gt;;\n\n  return (\n    &lt;div className=\"user-profile\"&gt;\n      &lt;h2&gt;{user.name}&lt;/h2&gt;\n      &lt;p&gt;Email: {user.email}&lt;/p&gt;\n      &lt;p&gt;Role: {user.role}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// MISMO COMPONENTE CON CLASES (legacy)\nimport React, { Component } from 'react';\n\nclass UserProfile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.fetchUser();\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Componente desmontado\");\n  }\n\n  async fetchUser() {\n    this.setState({ loading: true });\n    try {\n      const response = await fetch(`/api/users/${this.props.userId}`);\n      const data = await response.json();\n      this.setState({ user: data });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n    } finally {\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    const { loading, user } = this.state;\n\n    if (loading) return &lt;div&gt;Cargando...&lt;/div&gt;;\n    if (!user) return &lt;div&gt;Usuario no encontrado&lt;/div&gt;;\n\n    return (\n      &lt;div className=\"user-profile\"&gt;\n        &lt;h2&gt;{user.name}&lt;/h2&gt;\n        &lt;p&gt;Email: {user.email}&lt;/p&gt;\n        &lt;p&gt;Role: {user.role}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>"},{"location":"react-guide/#props-en-profundidad","title":"\ud83c\udfaf Props en profundidad","text":"<p>Las props (propiedades) son la forma principal de pasar datos entre componentes en React:</p>"},{"location":"react-guide/#1-sintaxis-completa","title":"1. Sintaxis completa","text":"<pre><code>// Definici\u00f3n de componente con props\nconst Button = (props) =&gt; {\n  return (\n    &lt;button \n      className={`btn ${props.variant}`} \n      onClick={props.onClick}\n      disabled={props.disabled}\n    &gt;\n      {props.icon &amp;&amp; &lt;span className=\"icon\"&gt;{props.icon}&lt;/span&gt;}\n      {props.children}\n    &lt;/button&gt;\n  );\n};\n\n// Uso del componente\n&lt;Button \n  variant=\"primary\" \n  onClick={handleClick} \n  disabled={isLoading}\n  icon={&lt;FaSave /&gt;}\n&gt;\n  Guardar cambios\n&lt;/Button&gt;\n</code></pre>"},{"location":"react-guide/#2-desestructuracion-de-props","title":"2. Desestructuraci\u00f3n de props","text":"<pre><code>// M\u00e1s limpio con desestructuraci\u00f3n\nconst Button = ({ variant, onClick, disabled, icon, children }) =&gt; {\n  return (\n    &lt;button \n      className={`btn ${variant}`} \n      onClick={onClick}\n      disabled={disabled}\n    &gt;\n      {icon &amp;&amp; &lt;span className=\"icon\"&gt;{icon}&lt;/span&gt;}\n      {children}\n    &lt;/button&gt;\n  );\n};\n</code></pre>"},{"location":"react-guide/#3-valores-por-defecto","title":"3. Valores por defecto","text":"<pre><code>// Con valores por defecto\nconst Button = ({ \n  variant = \"default\", \n  onClick, \n  disabled = false, \n  icon, \n  children \n}) =&gt; {\n  // ...igual que antes\n};\n\n// Alternativa (menos usada ahora)\nButton.defaultProps = {\n  variant: \"default\",\n  disabled: false\n};\n</code></pre>"},{"location":"react-guide/#4-proptypes-validacion-de-props","title":"4. PropTypes (validaci\u00f3n de props)","text":"<pre><code>import PropTypes from 'prop-types';\n\nconst Button = ({ variant, onClick, disabled, icon, children }) =&gt; {\n  // ...igual que antes\n};\n\nButton.propTypes = {\n  variant: PropTypes.oneOf(['default', 'primary', 'secondary', 'danger']),\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  icon: PropTypes.element,\n  children: PropTypes.node.isRequired\n};\n</code></pre>"},{"location":"react-guide/#5-typescript-mejor-que-proptypes","title":"5. TypeScript (mejor que PropTypes)","text":"<pre><code>type ButtonProps = {\n  variant?: 'default' | 'primary' | 'secondary' | 'danger';\n  onClick: () =&gt; void;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  children: React.ReactNode;\n};\n\nconst Button = ({ \n  variant = 'default', \n  onClick, \n  disabled = false, \n  icon, \n  children \n}: ButtonProps) =&gt; {\n  // ...igual que antes\n};\n</code></pre>"},{"location":"react-guide/#ciclo-de-vida-de-los-componentes","title":"\ud83d\udd04 Ciclo de vida de los componentes","text":""},{"location":"react-guide/#ciclo-de-vida-en-componentes-funcionales-hooks","title":"Ciclo de vida en componentes funcionales (Hooks)","text":"<pre><code>import React, { useState, useEffect, useLayoutEffect } from 'react';\n\nfunction ComponentLifecycle() {\n  console.log(\"1. Renderizado (o re-renderizado)\");\n\n  const [count, setCount] = useState(0);\n\n  // Se ejecuta despu\u00e9s de cada renderizado\n  useEffect(() =&gt; {\n    console.log(\"3. Efecto ejecutado (similar a componentDidMount + componentDidUpdate)\");\n\n    // C\u00f3digo de efecto\n    document.title = `Contador: ${count}`;\n\n    // Funci\u00f3n de limpieza (opcional)\n    return () =&gt; {\n      console.log(\"4. Limpieza antes del pr\u00f3ximo efecto o desmontaje\");\n      document.title = \"React App\";\n    };\n  }, [count]); // Array de dependencias\n\n  // Se ejecuta una sola vez (montaje)\n  useEffect(() =&gt; {\n    console.log(\"Solo al montar el componente\");\n\n    return () =&gt; {\n      console.log(\"Solo al desmontar el componente\");\n    };\n  }, []); // Array de dependencias vac\u00edo\n\n  // useLayoutEffect se ejecuta sincr\u00f3nicamente despu\u00e9s de las mutaciones del DOM\n  useLayoutEffect(() =&gt; {\n    console.log(\"2. LayoutEffect (antes de que el navegador pinte)\");\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Contador: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#diagrama-del-ciclo-de-vida-hooks","title":"Diagrama del ciclo de vida (Hooks)","text":"<pre><code>Montaje:\n1. Llamada a la funci\u00f3n del componente\n2. Se ejecutan los hooks (useState, useReducer, etc.)\n3. Se renderiza el componente (JSX \u2192 DOM Virtual)\n4. Se actualiza el DOM real\n5. Se ejecutan los useLayoutEffect\n6. El navegador pinta la pantalla\n7. Se ejecutan los useEffect\n\nActualizaci\u00f3n:\n1. Re-llamada a la funci\u00f3n del componente\n2. Se recuperan valores de Hooks\n3. Se re-renderiza el componente\n4. Se actualiza el DOM real\n5. Se ejecutan funciones de limpieza de useLayoutEffect\n6. Se ejecutan los nuevos useLayoutEffect\n7. El navegador pinta la pantalla\n8. Se ejecutan funciones de limpieza de useEffect\n9. Se ejecutan los nuevos useEffect\n\nDesmontaje:\n1. Se ejecutan funciones de limpieza de useLayoutEffect\n2. Se ejecutan funciones de limpieza de useEffect\n</code></pre>"},{"location":"react-guide/#errores-comunes-con-componentes","title":"\u26a0\ufe0f Errores comunes con componentes","text":"<ol> <li> <p>Modificar props <pre><code>// \u274c INCORRECTO\nfunction Form(props) {\n  props.defaultValue = \"Nuevo valor\"; // Error: props son inmutables\n  // ...\n}\n\n// \u2705 CORRECTO\nfunction Form(props) {\n  const [value, setValue] = useState(props.defaultValue);\n  // ...\n}\n</code></pre></p> </li> <li> <p>Olvidar dependencias en useEffect <pre><code>// \u274c INCORRECTO\nuseEffect(() =&gt; {\n  fetchData(userId); // Warning: 'userId' no est\u00e1 en las dependencias\n}, []); \n\n// \u2705 CORRECTO\nuseEffect(() =&gt; {\n  fetchData(userId);\n}, [userId]); \n</code></pre></p> </li> <li> <p>No manejar la asincron\u00eda correctamente <pre><code>// \u274c INCORRECTO (puede causar memory leak)\nuseEffect(() =&gt; {\n  fetchData().then(data =&gt; {\n    if (data) setItems(data); // Error si el componente se desmont\u00f3\n  });\n}, []);\n\n// \u2705 CORRECTO\nuseEffect(() =&gt; {\n  let mounted = true;\n  fetchData().then(data =&gt; {\n    if (mounted &amp;&amp; data) setItems(data);\n  });\n  return () =&gt; { mounted = false; };\n}, []);\n</code></pre></p> </li> <li> <p>Renderizado condicional incorrecto <pre><code>// \u274c INCORRECTO\nfunction Component() {\n  if (!user) return; // Devuelve undefined, no es v\u00e1lido\n  return &lt;div&gt;{user.name}&lt;/div&gt;;\n}\n\n// \u2705 CORRECTO\nfunction Component() {\n  if (!user) return null; // o &lt;&gt;&lt;/&gt; o &lt;div&gt;&lt;/div&gt;\n  return &lt;div&gt;{user.name}&lt;/div&gt;;\n}\n</code></pre></p> </li> </ol>"},{"location":"react-guide/#optimizacion-de-componentes","title":"\ud83d\ude80 Optimizaci\u00f3n de componentes","text":""},{"location":"react-guide/#1-memorizacion-para-evitar-re-renderizados-innecesarios","title":"1. Memorizaci\u00f3n para evitar re-renderizados innecesarios","text":"<pre><code>// Memorizar un componente completo\nconst MemoizedComponent = React.memo(MyComponent);\n\n// Memorizar valores costosos de calcular\nconst memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);\n\n// Memorizar callbacks\nconst memoizedCallback = useCallback(() =&gt; {\n  doSomething(a, b);\n}, [a, b]);\n</code></pre>"},{"location":"react-guide/#2-lazy-loading-de-componentes","title":"2. Lazy loading de componentes","text":"<pre><code>// Importaci\u00f3n normal (carga inmediata)\nimport HeavyComponent from './HeavyComponent';\n\n// Importaci\u00f3n lazy (carga bajo demanda)\nconst HeavyComponent = React.lazy(() =&gt; import('./HeavyComponent'));\n\n// Uso con Suspense\nfunction App() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Cargando...&lt;/div&gt;}&gt;\n      &lt;HeavyComponent /&gt;\n    &lt;/Suspense&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#3-renderizado-condicional-eficiente","title":"3. Renderizado condicional eficiente","text":"<pre><code>// Evitar renderizado innecesario de secciones grandes\nfunction Dashboard({ user }) {\n  // Extraer solo lo que necesitas del estado global\n  const { isAdmin } = useSelector(state =&gt; ({\n    isAdmin: state.auth.user?.role === 'admin'\n  }));\n\n  return (\n    &lt;div&gt;\n      &lt;CommonHeader /&gt;\n      &lt;MainContent /&gt;\n\n      {/* Secci\u00f3n pesada que solo se renderiza para admins */}\n      {isAdmin &amp;&amp; &lt;AdminPanel /&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#estado-haciendo-tu-app-interactiva","title":"\ud83d\udcbe Estado: Haciendo tu app interactiva","text":""},{"location":"react-guide/#definicion-tecnica-completa_3","title":"Definici\u00f3n t\u00e9cnica completa","text":"<p>El estado en React es un sistema para mantener y actualizar datos que pueden cambiar con el tiempo dentro de un componente. T\u00e9cnicamente:</p> <ul> <li>Se crea utilizando el hook <code>useState</code> o <code>useReducer</code> en componentes funcionales</li> <li>Est\u00e1 encapsulado dentro del componente (o compartido mediante Context/Redux)</li> <li>Es inmutable y solo debe modificarse mediante las funciones actualizadoras</li> <li>Cuando cambia, desencadena un re-renderizado del componente</li> <li>Es as\u00edncrono por naturaleza (las actualizaciones se agrupan por rendimiento)</li> </ul>"},{"location":"react-guide/#tipos-de-estado-en-react","title":"\ud83d\udd04 Tipos de estado en React","text":""},{"location":"react-guide/#1-estado-local-usestate","title":"1. Estado local (useState)","text":"<pre><code>import { useState } from 'react';\n\nfunction Counter() {\n  // Estado simple (n\u00famero)\n  const [count, setCount] = useState(0);\n\n  // Estado como objeto\n  const [user, setUser] = useState({\n    name: '',\n    email: '',\n    isLoggedIn: false\n  });\n\n  // Actualizar estado simple\n  const increment = () =&gt; setCount(count + 1);\n\n  // Actualizar estado complejo\n  const updateEmail = (newEmail) =&gt; {\n    setUser(prevUser =&gt; ({\n      ...prevUser,  // Mantener las dem\u00e1s propiedades\n      email: newEmail  // Actualizar solo email\n    }));\n  };\n\n  // Actualizaci\u00f3n basada en el estado anterior\n  const incrementByTen = () =&gt; {\n    // Forma segura cuando dependes del valor previo\n    setCount(prevCount =&gt; prevCount + 10);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={increment}&gt;+1&lt;/button&gt;\n      &lt;button onClick={incrementByTen}&gt;+10&lt;/button&gt;\n\n      &lt;input \n        value={user.email}\n        onChange={(e) =&gt; updateEmail(e.target.value)}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#2-estado-complejo-usereducer","title":"2. Estado complejo (useReducer)","text":"<pre><code>import { useReducer } from 'react';\n\n// Definir las acciones posibles\nconst ACTIONS = {\n  DEPOSIT: 'deposit',\n  WITHDRAW: 'withdraw',\n  ADD_TRANSACTION: 'add_transaction'\n};\n\n// Reducer: funci\u00f3n pura que actualiza el estado\nfunction bankReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.DEPOSIT:\n      return {\n        ...state,\n        balance: state.balance + action.payload,\n      };\n    case ACTIONS.WITHDRAW:\n      if (state.balance &lt; action.payload) {\n        return {\n          ...state,\n          error: 'Fondos insuficientes'\n        };\n      }\n      return {\n        ...state,\n        balance: state.balance - action.payload,\n        error: null\n      };\n    case ACTIONS.ADD_TRANSACTION:\n      return {\n        ...state,\n        transactions: [...state.transactions, action.payload]\n      };\n    default:\n      return state;\n  }\n}\n\nfunction BankAccount() {\n  // Estado inicial\n  const initialState = {\n    balance: 0,\n    transactions: [],\n    error: null\n  };\n\n  // Crear estado con reducer\n  const [state, dispatch] = useReducer(bankReducer, initialState);\n\n  // Funciones para actualizar el estado\n  const handleDeposit = (amount) =&gt; {\n    dispatch({ \n      type: ACTIONS.DEPOSIT, \n      payload: amount \n    });\n\n    dispatch({\n      type: ACTIONS.ADD_TRANSACTION,\n      payload: { type: 'deposit', amount, date: new Date() }\n    });\n  };\n\n  const handleWithdraw = (amount) =&gt; {\n    dispatch({ \n      type: ACTIONS.WITHDRAW, \n      payload: amount \n    });\n\n    if (state.balance &gt;= amount) {\n      dispatch({\n        type: ACTIONS.ADD_TRANSACTION,\n        payload: { type: 'withdrawal', amount, date: new Date() }\n      });\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Saldo: ${state.balance}&lt;/h2&gt;\n      {state.error &amp;&amp; &lt;p className=\"error\"&gt;{state.error}&lt;/p&gt;}\n\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; handleDeposit(100)}&gt;Depositar $100&lt;/button&gt;\n        &lt;button onClick={() =&gt; handleWithdraw(50)}&gt;Retirar $50&lt;/button&gt;\n      &lt;/div&gt;\n\n      &lt;h3&gt;Transacciones recientes&lt;/h3&gt;\n      &lt;ul&gt;\n        {state.transactions.map((tx, index) =&gt; (\n          &lt;li key={index}&gt;\n            {tx.type}: ${tx.amount} - {tx.date.toLocaleDateString()}\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#3-estado-compartido-context-api","title":"3. Estado compartido (Context API)","text":"<pre><code>import { createContext, useContext, useState } from 'react';\n\n// 1. Crear el contexto\nconst ThemeContext = createContext();\n\n// 2. Crear proveedor\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState('light');\n\n  const toggleTheme = () =&gt; {\n    setTheme(prevTheme =&gt; prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  // Valores disponibles en el contexto\n  const value = {\n    theme,\n    toggleTheme,\n    isDark: theme === 'dark'\n  };\n\n  return (\n    &lt;ThemeContext.Provider value={value}&gt;\n      {children}\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\n// 3. Hook personalizado para acceder al contexto\nfunction useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme debe usarse dentro de un ThemeProvider');\n  }\n  return context;\n}\n\n// 4. Componente que consume el contexto\nfunction ThemedButton() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    &lt;button \n      className={`btn ${theme === 'dark' ? 'btn-light' : 'btn-dark'}`}\n      onClick={toggleTheme}\n    &gt;\n      Cambiar a modo {theme === 'light' ? 'oscuro' : 'claro'}\n    &lt;/button&gt;\n  );\n}\n\n// 5. Aplicaci\u00f3n con el contexto\nfunction App() {\n  return (\n    &lt;ThemeProvider&gt;\n      &lt;div className=\"app\"&gt;\n        &lt;Header /&gt;\n        &lt;MainContent /&gt;\n        &lt;Footer /&gt;\n      &lt;/div&gt;\n    &lt;/ThemeProvider&gt;\n  );\n}\n\nfunction Header() {\n  const { theme } = useTheme();\n  return (\n    &lt;header className={`header header-${theme}`}&gt;\n      &lt;h1&gt;Mi Aplicaci\u00f3n&lt;/h1&gt;\n      &lt;ThemedButton /&gt;\n    &lt;/header&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#useeffect-para-efectos-secundarios","title":"\ud83d\udd04 useEffect para efectos secundarios","text":"<pre><code>import { useState, useEffect } from 'react';\n\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Efecto para cargar datos del usuario\n  useEffect(() =&gt; {\n    // Resetear estado al cambiar userId\n    setIsLoading(true);\n    setError(null);\n\n    // Funci\u00f3n as\u00edncrona para fetch\n    const fetchUser = async () =&gt; {\n      try {\n        const response = await fetch(`https://api.example.com/users/${userId}`);\n\n        if (!response.ok) {\n          throw new Error(`Error HTTP: ${response.status}`);\n        }\n\n        const data = await response.json();\n        setUser(data);\n      } catch (err) {\n        setError(err.message || 'Error al cargar usuario');\n        setUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    // Iniciar fetch\n    fetchUser();\n\n    // Funci\u00f3n de limpieza\n    return () =&gt; {\n      // Cancelar requests pendientes si es necesario\n      // Esto es importante para evitar actualizaciones de estado\n      // en componentes desmontados\n    };\n  }, [userId]); // Dependencias\n\n  // Efecto para t\u00edtulo del documento\n  useEffect(() =&gt; {\n    if (user) {\n      document.title = `Perfil de ${user.name}`;\n    } else {\n      document.title = 'Perfil de Usuario';\n    }\n\n    // Restaurar t\u00edtulo original al desmontar\n    return () =&gt; {\n      document.title = 'Mi Aplicaci\u00f3n';\n    };\n  }, [user]);\n\n  // Renderizado condicional basado en estado\n  if (isLoading) return &lt;div&gt;Cargando...&lt;/div&gt;;\n  if (error) return &lt;div&gt;Error: {error}&lt;/div&gt;;\n  if (!user) return &lt;div&gt;Usuario no encontrado&lt;/div&gt;;\n\n  return (\n    &lt;div className=\"user-profile\"&gt;\n      &lt;h2&gt;{user.name}&lt;/h2&gt;\n      &lt;p&gt;Email: {user.email}&lt;/p&gt;\n      {/* M\u00e1s informaci\u00f3n del usuario */}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#errores-comunes-y-limitaciones-del-estado","title":"\u26a0\ufe0f Errores comunes y limitaciones del estado","text":"<ol> <li> <p>Mutar el estado directamente <pre><code>// \u274c INCORRECTO - Mutaci\u00f3n directa\nconst [items, setItems] = useState([1, 2, 3]);\n\nconst addItem = () =&gt; {\n  items.push(4);  // \u274c Muta el array original\n  setItems(items);  // React no detecta el cambio\n};\n\n// \u2705 CORRECTO - Crear nueva referencia\nconst addItem = () =&gt; {\n  setItems([...items, 4]);  // Nuevo array\n};\n</code></pre></p> </li> <li> <p>Actualizar estado en bucle infinito <pre><code>// \u274c INCORRECTO - Actualizaci\u00f3n en renderizado\nfunction Component() {\n  const [count, setCount] = useState(0);\n\n  // Esto causa un bucle infinito\n  setCount(count + 1);\n\n  return &lt;div&gt;{count}&lt;/div&gt;;\n}\n\n// \u2705 CORRECTO - Actualizaci\u00f3n en evento o efecto\nfunction Component() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    // Solo se ejecuta una vez al montar\n    setCount(1);\n  }, []);\n\n  return &lt;div&gt;{count}&lt;/div&gt;;\n}\n</code></pre></p> </li> <li> <p>Actualizaci\u00f3n as\u00edncrona no sincronizada <pre><code>// \u274c INCORRECTO - Asumir actualizaci\u00f3n s\u00edncrona\nconst handleClick = () =&gt; {\n  setCount(count + 1);\n  console.log(count);  // Muestra valor antiguo\n};\n\n// \u2705 CORRECTO - Usar efecto o callback\nconst handleClick = () =&gt; {\n  setCount(prevCount =&gt; {\n    const newCount = prevCount + 1;\n    console.log(newCount);  // Valor correcto\n    return newCount;\n  });\n};\n\n// O con useEffect\nuseEffect(() =&gt; {\n  console.log(count);  // Se ejecuta despu\u00e9s de la actualizaci\u00f3n\n}, [count]);\n</code></pre></p> </li> <li> <p>Estado inicial costoso <pre><code>// \u274c INCORRECTO - C\u00e1lculo costoso en cada renderizado\nfunction Component() {\n  // Esto se ejecuta en cada renderizado\n  const [items, setItems] = useState(calculateExpensiveInitialState());\n\n  // ...\n}\n\n// \u2705 CORRECTO - Funci\u00f3n inicializadora\nfunction Component() {\n  // La funci\u00f3n se ejecuta solo en el montaje inicial\n  const [items, setItems] = useState(() =&gt; calculateExpensiveInitialState());\n\n  // ...\n}\n</code></pre></p> </li> <li> <p>Estructura de estado inadecuada <pre><code>// \u274c INCORRECTO - Demasiados estados relacionados\nconst [firstName, setFirstName] = useState('');\nconst [lastName, setLastName] = useState('');\nconst [email, setEmail] = useState('');\nconst [age, setAge] = useState(0);\n\n// \u2705 CORRECTO - Agrupar estados relacionados\nconst [formData, setFormData] = useState({\n  firstName: '',\n  lastName: '',\n  email: '',\n  age: 0\n});\n\n// Actualizar solo una propiedad\nconst updateField = (field, value) =&gt; {\n  setFormData({\n    ...formData,\n    [field]: value\n  });\n};\n</code></pre></p> </li> <li> <p>Sobrecarga de renderizado <pre><code>// \u274c PROBLEMA - Muchas actualizaciones de estado desencadenan m\u00faltiples renderizados\nconst handleSubmit = () =&gt; {\n  setIsLoading(true);\n  setFormErrors({});\n  setSubmitCount(c =&gt; c + 1);\n  // Cada setX causa un renderizado separado\n};\n\n// \u2705 MEJOR - Usar useReducer para actualizaciones relacionadas\nconst [state, dispatch] = useReducer(formReducer, initialState);\n\nconst handleSubmit = () =&gt; {\n  // Una sola actualizaci\u00f3n\n  dispatch({ type: 'SUBMIT_START' });\n};\n</code></pre></p> </li> </ol>"},{"location":"react-guide/#comparacion-enfoques-de-estado","title":"\ud83d\udd04 Comparaci\u00f3n: Enfoques de estado","text":"Enfoque Ventajas Desventajas Mejor para useState Simple, f\u00e1cil de entender No escala bien para l\u00f3gica compleja Estado simple, componentes peque\u00f1os useReducer Centraliza l\u00f3gica, testeable M\u00e1s c\u00f3digo, m\u00e1s complejo Estados complejos, transiciones con l\u00f3gica Context API Evita prop drilling, nativo Causa re-renderizado completo, no optimizado Datos globales de baja frecuencia (tema, auth) Redux Centralizado, DevTools, middleware Boilerplate, curva aprendizaje Aplicaciones grandes, estado complejo Zustand API simple, m\u00ednimo boilerplate Biblioteca externa Balance entre simplicidad y potencia Jotai/Recoil At\u00f3mico, optimizado Nuevas APIs para aprender Optimizaci\u00f3n de renderizado"},{"location":"react-guide/#fragmentos-agrupando-elementos","title":"\ud83c\udfac Fragmentos: Agrupando elementos","text":""},{"location":"react-guide/#definicion-tecnica-completa_4","title":"Definici\u00f3n t\u00e9cnica completa","text":"<p>Los Fragments en React son una caracter\u00edstica que permite agrupar m\u00faltiples elementos hijos sin a\u00f1adir nodos adicionales al DOM. T\u00e9cnicamente:</p> <ul> <li>Son representados internamente como <code>React.Fragment</code></li> <li>No tienen representaci\u00f3n en el DOM (no generan elementos HTML adicionales)</li> <li>Pueden recibir la prop <code>key</code> (en sintaxis expl\u00edcita) para listas</li> <li>Permiten devolver m\u00faltiples elementos desde un componente</li> <li>Se renderizan como sus hijos directos</li> </ul>"},{"location":"react-guide/#sintaxis-y-uso-avanzado","title":"\ud83d\udd04 Sintaxis y uso avanzado","text":""},{"location":"react-guide/#1-sintaxis-completa-necesaria-para-props-como-key","title":"1. Sintaxis completa (necesaria para props como key)","text":"<pre><code>import { Fragment } from 'react';\n\nfunction ListItems({ items }) {\n  return (\n    &lt;&gt;\n      {items.map(item =&gt; (\n        // Necesita sintaxis expl\u00edcita para usar key\n        &lt;Fragment key={item.id}&gt;\n          &lt;dt&gt;{item.term}&lt;/dt&gt;\n          &lt;dd&gt;{item.description}&lt;/dd&gt;\n        &lt;/Fragment&gt;\n      ))}\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#2-sintaxis-abreviada-no-acepta-props","title":"2. Sintaxis abreviada (no acepta props)","text":"<pre><code>function Component() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n      &lt;p&gt;P\u00e1rrafo 1&lt;/p&gt;\n      &lt;p&gt;P\u00e1rrafo 2&lt;/p&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#3-fragments-anidados","title":"3. Fragments anidados","text":"<pre><code>function NestedFragments() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;T\u00edtulo Principal&lt;/h1&gt;\n      &lt;&gt;\n        &lt;h2&gt;Subt\u00edtulo&lt;/h2&gt;\n        &lt;p&gt;P\u00e1rrafo anidado&lt;/p&gt;\n      &lt;/&gt;\n      &lt;p&gt;P\u00e1rrafo final&lt;/p&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#comparacion-de-enfoques-para-multiples-elementos","title":"\ud83d\udd04 Comparaci\u00f3n de enfoques para m\u00faltiples elementos","text":"Enfoque DOM Resultante Ventajas Desventajas Fragments <code>&lt;h1&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;</code> No a\u00f1ade nodos DOM, mantiene sem\u00e1ntica Puede complicar debugging Div <code>&lt;div&gt;&lt;h1&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</code> F\u00e1cil de debuggear, CSS aplicable Rompe sem\u00e1ntica, interfiere con layouts Array <code>&lt;h1&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;</code> Soluci\u00f3n nativa de JS Requiere keys manualmente"},{"location":"react-guide/#comparacion-en-codigo","title":"Comparaci\u00f3n en c\u00f3digo","text":"<pre><code>// 1. Usando Fragment (recomendado)\nfunction WithFragment() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n      &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n    &lt;/&gt;\n  );\n}\n\n// 2. Usando div (no ideal)\nfunction WithDiv() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n      &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// 3. Usando array (menos com\u00fan)\nfunction WithArray() {\n  return [\n    &lt;h1 key=\"title\"&gt;T\u00edtulo&lt;/h1&gt;,\n    &lt;p key=\"paragraph\"&gt;P\u00e1rrafo&lt;/p&gt;\n  ];\n}\n</code></pre>"},{"location":"react-guide/#casos-de-uso-especificos","title":"\ud83c\udfaf Casos de uso espec\u00edficos","text":""},{"location":"react-guide/#1-listas-de-elementos-semanticamente-relacionados","title":"1. Listas de elementos sem\u00e1nticamente relacionados","text":"<pre><code>function GlossaryList({ terms }) {\n  return (\n    &lt;dl&gt;\n      {terms.map(term =&gt; (\n        &lt;Fragment key={term.id}&gt;\n          &lt;dt&gt;{term.term}&lt;/dt&gt;\n          &lt;dd&gt;{term.definition}&lt;/dd&gt;\n        &lt;/Fragment&gt;\n      ))}\n    &lt;/dl&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#2-tablas-con-filas-condicionales","title":"2. Tablas con filas condicionales","text":"<pre><code>function Table({ data, showDetails }) {\n  return (\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;ID&lt;/th&gt;\n          &lt;th&gt;Nombre&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        {data.map(item =&gt; (\n          &lt;Fragment key={item.id}&gt;\n            &lt;tr&gt;\n              &lt;td&gt;{item.id}&lt;/td&gt;\n              &lt;td&gt;{item.name}&lt;/td&gt;\n            &lt;/tr&gt;\n            {showDetails &amp;&amp; (\n              &lt;tr className=\"details-row\"&gt;\n                &lt;td colSpan=\"2\"&gt;\n                  {item.details}\n                &lt;/td&gt;\n              &lt;/tr&gt;\n            )}\n          &lt;/Fragment&gt;\n        ))}\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#3-evitar-divs-innecesarios-en-layouts-flexboxgrid","title":"3. Evitar divs innecesarios en layouts flexbox/grid","text":"<pre><code>function FlexLayout() {\n  return (\n    &lt;div className=\"flex-container\"&gt;\n      {/* Grupos l\u00f3gicos sin divs extras que romper\u00edan el layout */}\n      &lt;&gt;\n        &lt;h2&gt;Secci\u00f3n 1&lt;/h2&gt;\n        &lt;p&gt;Contenido secci\u00f3n 1&lt;/p&gt;\n      &lt;/&gt;\n\n      &lt;&gt;\n        &lt;h2&gt;Secci\u00f3n 2&lt;/h2&gt;\n        &lt;p&gt;Contenido secci\u00f3n 2&lt;/p&gt;\n      &lt;/&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react-guide/#limitaciones-y-consideraciones","title":"\u26a0\ufe0f Limitaciones y consideraciones","text":"<ol> <li> <p>Debugging m\u00e1s dif\u00edcil</p> <ul> <li>Los Fragments no aparecen en el DOM</li> <li>Dificulta la inspecci\u00f3n de elementos</li> <li>Las herramientas de React DevTools s\u00ed los muestran</li> </ul> </li> <li> <p>No acepta atributos (excepto key)</p> <ul> <li>No puedes a\u00f1adir clases, eventos o atributos</li> <li>La \u00fanica prop que acepta es <code>key</code> (y solo con sintaxis expl\u00edcita)</li> </ul> </li> <li> <p>Problemas potenciales con CSS</p> <ul> <li>No puedes seleccionar los Fragments con CSS</li> <li>Imposible aplicar estilos, m\u00e1rgenes o padding a grupos</li> </ul> </li> <li> <p>Compatibilidad con bibliotecas externas</p> <ul> <li>Algunas bibliotecas externas pueden tener problemas con Fragments</li> <li>Especialmente las que manipulan el DOM directamente</li> </ul> </li> </ol>"},{"location":"react-guide/#estilos-en-react","title":"\ud83c\udfa8 Estilos en React","text":""},{"location":"react-guide/#enfoque-completo-de-estilos-en-react","title":"Enfoque completo de estilos en React","text":"<p>React ofrece m\u00faltiples enfoques para aplicar estilos, cada uno con sus propias ventajas e inconvenientes. A continuaci\u00f3n se detallan los principales m\u00e9todos:</p>"},{"location":"react-guide/#1-css-global","title":"1. CSS Global","text":"<p>El m\u00e9todo m\u00e1s tradicional, importando archivos CSS en los componentes:</p> <pre><code>// index.css (archivo CSS global)\nbody {\n  font-family: 'Segoe UI', sans-serif;\n  margin: 0;\n  padding: 0;\n}\n\n.button {\n  background-color: #0070f3;\n  color: white;\n  border: none;\n  padding: 10px 15px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.button:hover {\n  background-color: #0051a2;\n}\n\n// App.jsx\nimport './index.css';\n\nfunction App() {\n  return (\n    &lt;div className=\"app\"&gt;\n      &lt;button className=\"button\"&gt;Click me&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Ventajas: - Familiar para desarrolladores de HTML/CSS tradicional - Soporte para todas las caracter\u00edsticas CSS (media queries, pseudo-selectores) - Cacheable y optimizable</p> <p>Desventajas: - Colisiones de nombres (namespace global) - Dif\u00edcil de mantener en aplicaciones grandes - No hay encapsulaci\u00f3n a nivel de componente</p>"},{"location":"react-guide/#2-css-modules","title":"2. CSS Modules","text":"<p>Archivos CSS encapsulados a nivel de componente:</p> <pre><code>// Button.module.css\n.button {\n  background-color: #0070f3;\n  color: white;\n  border: none;\n  padding: 10px 15px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.primary {\n  background-color: #0070f3;\n}\n\n.secondary {\n  background-color: #6c757d;\n}\n\n// Button.jsx\nimport styles from './Button.module.css';\n\nfunction Button({ children, variant = 'primary' }) {\n  return (\n    &lt;button className={`${styles.button} ${styles[variant]}`}&gt;\n      {children}\n    &lt;/button&gt;\n  );\n}\n</code></pre> <p>Ventajas: - Encapsulaci\u00f3n a nivel de componente - Evita colisiones de nombres (clases con hashing \u00fanico) - Soporte para todas las caracter\u00edsticas CSS - Ideal para aplicaciones medianas a grandes</p> <p>Desventajas: - Requiere configuraci\u00f3n de build (aunque incluida en CRA/Vite) - A\u00fan no soluciona estilos din\u00e1micos - No es ideal para estilos altamente condicionales</p>"},{"location":"react-guide/#3-estilos-en-linea-inline-styles","title":"3. Estilos en l\u00ednea (Inline Styles)","text":"<p>Definici\u00f3n de estilos directamente como objetos JavaScript:</p> <pre><code>function Button({ children, variant = 'primary' }) {\n  // Objeto de estilos base\n  const baseStyle = {\n    backgroundColor: variant === 'primary' ? '#0070f3' : '#6c757d',\n    color: 'white',\n    border: 'none',\n    padding: '10px 15px',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    // Nombres en camelCase, no kebab-case\n    fontSize: '16px',\n    fontWeight: 'bold'\n  };\n\n  // Estilos condicionales\n  const dynamicStyles = {\n    // A\u00f1adir estilos basados en props\n    opacity: props.disabled ? 0.6 : 1,\n    // Transformaciones basadas en estado\n    transform: props.active ? 'scale(0.98)' : 'scale(1)'\n  };\n\n  return (\n    &lt;button \n      style={{ ...baseStyle, ...dynamicStyles }}\n      disabled={props.disabled}\n    &gt;\n      {children}\n    &lt;/button&gt;\n  );\n}\n</code></pre> <p>Ventajas: - Altamente din\u00e1mico (basado en props/estado) - No hay conflictos de nombres - Integraci\u00f3n perfecta con la l\u00f3gica de componentes - No requiere archivos adicionales</p> <p>Desventajas: - No soporta media queries, pseudo-selectores - Problemas de rendimiento en listas grandes - Sintaxis diferente al CSS normal (camelCase vs kebab-case) - Dif\u00edcil de mantener para estilos complejos</p>"},{"location":"react-guide/#4-css-in-js-styled-components-emotion","title":"4. CSS-in-JS (Styled Components, Emotion)","text":"<p>Bibliotecas que permiten definir componentes con estilos incorporados:</p> <pre><code>// Con styled-components\nimport styled from 'styled-components';\n\n// Crear un componente estilizado\nconst StyledButton = styled.button`\n  background-color: ${props =&gt; props.primary ? '#0070f3' : '#6c757d'};\n  color: white;\n  border: none;\n  padding: 10px 15px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &amp;:hover {\n    background-color: ${props =&gt; props.primary ? '#0051a2' : '#5a6268'};\n  }\n\n  ${props =&gt; props.large &amp;&amp; `\n    font-size: 18px;\n    padding: 12px 20px;\n  `}\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\n// Usar el componente estilizado\nfunction Button({ children, primary, large }) {\n  return (\n    &lt;StyledButton primary={primary} large={large}&gt;\n      {children}\n    &lt;/StyledButton&gt;\n  );\n}\n</code></pre> <p>Ventajas: - Estilos din\u00e1micos basados en props - Soporte para CSS completo (media queries, nesting, pseudo-selectores) - Encapsulaci\u00f3n completa - Elimina CSS no utilizado autom\u00e1ticamente</p> <p>Desventajas: - Aumenta el tama\u00f1o del bundle - Curva de aprendizaje adicional - Posible impacto en rendimiento (aunque m\u00ednimo) - Requiere biblioteca adicional</p>"},{"location":"react-guide/#5-utility-first-css-tailwind-css","title":"5. Utility-first CSS (Tailwind CSS)","text":"<p>Framework de utilidades CSS que permite aplicar clases predefinidas:</p> <pre><code>// Requiere configuraci\u00f3n de Tailwind\nfunction Button({ children, variant = 'primary', size = 'md' }) {\n  // Clases base\n  const baseClasses = \"font-bold rounded cursor-pointer focus:outline-none\";\n\n  // Clases condicionales\n  const variantClasses = {\n    primary: \"bg-blue-500 hover:bg-blue-700 text-white\",\n    secondary: \"bg-gray-500 hover:bg-gray-700 text-white\",\n    success: \"bg-green-500 hover:bg-green-700 text-white\"\n  };\n\n  const sizeClasses = {\n    sm: \"py-1 px-2 text-sm\",\n    md: \"py-2 px-4 text-base\",\n    lg: \"py-3 px-6 text-lg\"\n  };\n\n  return (\n    &lt;button \n      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]}`}\n    &gt;\n      {children}\n    &lt;/button&gt;\n  );\n}\n</code></pre> <p>Ventajas: - Desarrollo r\u00e1pido sin escribir CSS personalizado - Sistema de dise\u00f1o consistente - Excelente para prototipado y desarrollo inicial - Altamente configurable</p> <p>Desventajas: - Clases largas en el HTML (posible desorden visual) - Curva de aprendizaje para memorizar clases - Puede sentirse restrictivo para dise\u00f1os muy personalizados</p>"},{"location":"react-guide/#comparacion-tecnica-de-enfoques","title":"\ud83d\udd04 Comparaci\u00f3n t\u00e9cnica de enfoques","text":"Caracter\u00edstica CSS Global CSS Modules Inline Styles CSS-in-JS Utility CSS Encapsulaci\u00f3n \u274c No \u2705 S\u00ed \u2705 S\u00ed \u2705 S\u00ed \u274c No Media Queries \u2705 S\u00ed \u2705 S\u00ed \u274c No \u2705 S\u00ed \u2705 S\u00ed Pseudo-selectores \u2705 S\u00ed \u2705 S\u00ed \u274c No \u2705 S\u00ed \u2705 S\u00ed Estilos din\u00e1micos \u274c Limitado \u274c Limitado \u2705 S\u00ed \u2705 S\u00ed \u26a0\ufe0f Parcial Rendimiento \u2705 Excelente \u2705 Excelente \u26a0\ufe0f Puede impactar \u26a0\ufe0f Puede impactar \u2705 Excelente Tama\u00f1o bundle \u2705 Peque\u00f1o \u2705 Peque\u00f1o \u2705 Peque\u00f1o \u26a0\ufe0f Aumenta \u26a0\ufe0f Grande inicialmente DevTools soporte \u2705 Excelente \u2705 Bueno \u26a0\ufe0f Limitado \u26a0\ufe0f Var\u00eda \u2705 Bueno Temas/Theming \u26a0\ufe0f Complejo \u26a0\ufe0f Complejo \u26a0\ufe0f Manual \u2705 Excelente \u2705 Bueno Integraci\u00f3n React \u26a0\ufe0f B\u00e1sica \u2705 Buena \u2705 Nativa \u2705 Excelente \u2705 Buena"},{"location":"react-guide/#errores-comunes-y-limitaciones","title":"\u26a0\ufe0f Errores comunes y limitaciones","text":"<ol> <li> <p>Mezclar demasiados enfoques <pre><code>// \u274c ANTI-PATR\u00d3N: Mezcla inconsistente\nfunction Component() {\n  return (\n    &lt;div className=\"container\" style={{ marginTop: '20px' }}&gt;\n      &lt;StyledHeading&gt;T\u00edtulo&lt;/StyledHeading&gt;\n      &lt;p className={styles.paragraph}&gt;Contenido&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></p> </li> <li> <p>Sobrecarga de estilos en l\u00ednea <pre><code>// \u274c INCORRECTO: Inline styles masivos\nfunction Card() {\n  return (\n    &lt;div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: '#fff',\n      borderRadius: '8px',\n      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n      padding: '20px',\n      margin: '10px',\n      maxWidth: '400px',\n      // ...20 propiedades m\u00e1s\n    }}&gt;\n      {/* Contenido */}\n    &lt;/div&gt;\n  );\n}\n</code></pre></p> </li> <li> <p>No reutilizar estilos comunes <pre><code>// \u274c INCORRECTO: Repetici\u00f3n constante\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;button style={{ color: 'white', bgColor: 'blue', padding: '10px' }}&gt;Bot\u00f3n 1&lt;/button&gt;\n      &lt;button style={{ color: 'white', bgColor: 'blue', padding: '10px' }}&gt;Bot\u00f3n 2&lt;/button&gt;\n      &lt;button style={{ color: 'white', bgColor: 'blue', padding: '10px' }}&gt;Bot\u00f3n 3&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></p> </li> <li> <p>Animar con inline styles <pre><code>// \u274c INCORRECTO: Animaciones con inline styles\nfunction AnimatedButton() {\n  const [isHovered, setIsHovered] = useState(false);\n\n  return (\n    &lt;button\n      style={{\n        backgroundColor: isHovered ? 'darkblue' : 'blue',\n        transition: 'background-color 0.3s' // No funcionar\u00e1 bien\n      }}\n      onMouseEnter={() =&gt; setIsHovered(true)}\n      onMouseLeave={() =&gt; setIsHovered(false)}\n    &gt;\n      Hover me\n    &lt;/button&gt;\n  );\n}\n</code></pre></p> </li> </ol>"},{"location":"react-guide/#recomendaciones-especificas","title":"\ud83c\udfaf Recomendaciones espec\u00edficas","text":"<ol> <li> <p>Para proyectos peque\u00f1os o aprendizaje:</p> <ul> <li>CSS Modules o CSS Global</li> </ul> </li> <li> <p>Para proyectos medianos a grandes:</p> <ul> <li>CSS Modules + componentes de dise\u00f1o</li> <li>CSS-in-JS (styled-components/emotion)</li> <li>Utility CSS (Tailwind) si el equipo est\u00e1 familiarizado</li> </ul> </li> <li> <p>Para aplicaciones empresariales:</p> <ul> <li>Sistema de dise\u00f1o con componentes estilizados reutilizables</li> <li>Enfoque consistente en todo el equipo</li> <li>Documentaci\u00f3n de componentes (Storybook)</li> </ul> </li> <li> <p>Para rendimiento \u00f3ptimo:</p> <ul> <li>CSS Modules</li> <li>Evitar exceso de estilos en l\u00ednea</li> <li>Minimizar cambios de estilo din\u00e1micos</li> </ul> </li> </ol>"},{"location":"react-guide/#resumen-y-proximos-pasos","title":"\ud83d\ude80 Resumen y pr\u00f3ximos pasos","text":""},{"location":"react-guide/#lo-que-hemos-aprendido","title":"Lo que hemos aprendido:","text":"<ol> <li> <p>React: Una biblioteca declarativa para interfaces de usuario que utiliza Virtual DOM para optimizar actualizaciones.</p> </li> <li> <p>JSX: Sintaxis que combina JavaScript y XML, permitiendo escribir estructuras de UI con todo el poder de JavaScript.</p> </li> <li> <p>Componentes: Bloques reutilizables que pueden ser funcionales (recomendados) o de clase (legacy), con ciclos de vida y propiedades.</p> </li> <li> <p>Props: Mecanismo para pasar datos a componentes de forma inmutable, permitiendo comunicaci\u00f3n padre-hijo.</p> </li> <li> <p>Estado: Sistema para manejar datos mutables dentro de componentes, con hooks como useState y useReducer.</p> </li> <li> <p>Fragments: Forma de agrupar elementos sin a\u00f1adir nodos extra al DOM, mejorando la sem\u00e1ntica y rendimiento.</p> </li> <li> <p>Estilos: M\u00faltiples enfoques (CSS Modules, CSS-in-JS, inline styles), cada uno con ventajas para casos de uso espec\u00edficos.</p> </li> </ol>"},{"location":"react-guide/#conceptos-avanzados-para-explorar","title":"Conceptos avanzados para explorar:","text":"<ol> <li>Hooks personalizados: Extraer l\u00f3gica reutilizable en funciones con nombre use*.</li> <li>Context API: Compartir estado entre componentes sin prop drilling.</li> <li>Optimizaci\u00f3n de rendimiento: useMemo, useCallback, React.memo.</li> <li>Suspense y React.lazy: Carga diferida de componentes.</li> <li>Manejo de formularios: Formularios controlados vs no controlados.</li> <li>Testing en React: Jest, React Testing Library.</li> <li>Enrutamiento: React Router para navegaci\u00f3n.</li> <li>Manejo de estado global: Redux, Zustand, Jotai, Recoil.</li> <li>Server Components: Nueva arquitectura con React 18+.</li> <li>Server-Side Rendering (SSR): Next.js, Remix.</li> </ol>"},{"location":"react-guide/#proyecto-de-practica-sugerido","title":"\ud83d\udca1 Proyecto de pr\u00e1ctica sugerido","text":"<p>Crea una aplicaci\u00f3n de lista de tareas (Todo App) con React que incluya:</p> <ul> <li>Componentes reutilizables (Bot\u00f3n, Card, Input)</li> <li>Estado local con useState para tareas</li> <li>Estado global con Context para preferencias de usuario</li> <li>Estilos con CSS Modules o styled-components</li> <li>Almacenamiento en localStorage</li> <li>Filtrado y b\u00fasqueda de tareas</li> <li>Animaciones b\u00e1sicas</li> <li>Modo oscuro/claro con Context</li> </ul> <p>Este proyecto te permitir\u00e1 aplicar todos los conceptos aprendidos en un caso pr\u00e1ctico y ser\u00e1 una excelente adici\u00f3n a tu portafolio.</p>"},{"location":"referencias/","title":"\ud83d\udcda Referencias de React","text":"<ul> <li>Documentaci\u00f3n oficial de React</li> <li>Aprende React \u2013 React Docs</li> <li>Vite \u2013 Herramienta recomendada para React moderno</li> <li>JSX en profundidad</li> <li>Gu\u00eda de componentes y props</li> </ul>"},{"location":"referencias/#instalacion-en-macos","title":"\ud83d\udce5 Instalaci\u00f3n en macOS","text":"<p>Puedes consultar la gu\u00eda paso a paso aqu\u00ed: \ud83d\udc49 Gu\u00eda de instalaci\u00f3n en macOS</p>"},{"location":"repositorio/","title":"Repositorio y Recursos de la Clase","text":""},{"location":"repositorio/#contenido-de-la-clase","title":"\ud83d\udcda Contenido de la Clase","text":"<p>Consumimos una API p\u00fablica, Test y Despliegue</p>"},{"location":"repositorio/#demo-en-vivo","title":"\ud83d\ude80 Demo en Vivo","text":"<p>Puedes ver la aplicaci\u00f3n desplegada y funcionando en:</p> <ul> <li>Demo desplegada: https://gilded-praline-e439e2.netlify.app/</li> </ul>"},{"location":"repositorio/#repositorios-de-ejemplo","title":"\ud83d\udcc1 Repositorios de Ejemplo","text":""},{"location":"repositorio/#tienda-react","title":"Tienda React","text":"<p>Ejemplo completo de una tienda desarrollada con React:</p> <ul> <li>Repositorio: https://github.com/geovannymcode/tienda-react</li> </ul>"},{"location":"repositorio/#curso-react","title":"Curso React","text":"<p>Material adicional y ejemplos del curso:</p> <ul> <li>Repositorio: https://github.com/geovannymcode/course-react</li> </ul>"},{"location":"repositorio/#tecnologias-utilizadas","title":"\ud83d\udee0\ufe0f Tecnolog\u00edas Utilizadas","text":"<ul> <li>React</li> <li>API p\u00fablica</li> <li>Testing</li> <li>Netlify (Despliegue)</li> </ul>"},{"location":"sesion_01/","title":"\ud83d\ude80 Introducci\u00f3n a React - Gu\u00eda S\u00faper Detallada para Principiantes","text":""},{"location":"sesion_01/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>\u00bfQu\u00e9 es React?</li> <li>Primer ejemplo: Hola Mundo</li> <li>JSX: La sintaxis especial de React</li> <li>Creando tu primer proyecto React</li> <li>Componentes: Los bloques de construcci\u00f3n</li> <li>Estado: Haciendo tu app interactiva</li> <li>Fragmentos: Agrupando elementos</li> <li>Estilos en React</li> </ol>"},{"location":"sesion_01/#que-es-react","title":"\ud83e\udd14 \u00bfQu\u00e9 es React?","text":""},{"location":"sesion_01/#definicion-simple-para-principiantes","title":"Definici\u00f3n simple para principiantes","text":"<p>React es una herramienta de JavaScript que nos ayuda a crear interfaces de usuario (lo que ves en la pantalla) de manera m\u00e1s f\u00e1cil y eficiente. Piensa en React como un \"constructor de LEGO\" para p\u00e1ginas web: te proporciona piezas reutilizables que puedes combinar para crear aplicaciones complejas.</p>"},{"location":"sesion_01/#caracteristicas-clave-explicadas","title":"\ud83c\udfaf Caracter\u00edsticas clave explicadas","text":""},{"location":"sesion_01/#1-declaratividad","title":"1. Declaratividad","text":"<p>\u00bfQu\u00e9 significa? En lugar de decirle al navegador C\u00d3MO hacer algo paso a paso, le dices QU\u00c9 quieres que muestre.</p> <p>Analog\u00eda:  - Imperativo (JavaScript tradicional): \"Ve a la cocina, abre el refrigerador, saca la leche, cierra el refrigerador, busca un vaso...\" - Declarativo (React): \"Quiero un vaso de leche\"</p> <p>Ejemplo pr\u00e1ctico: <pre><code>// Imperativo (JavaScript tradicional)\nconst div = document.createElement('div');\ndiv.innerHTML = 'Hola';\ndiv.style.color = 'blue';\ndocument.body.appendChild(div);\n\n// Declarativo (React)\nreturn &lt;div style={{color: 'blue'}}&gt;Hola&lt;/div&gt;\n</code></pre></p>"},{"location":"sesion_01/#2-actualizaciones-selectivas-del-dom","title":"2. Actualizaciones selectivas del DOM","text":"<p>\u00bfQu\u00e9 es el DOM? Document Object Model - es la representaci\u00f3n de tu p\u00e1gina HTML que el navegador usa.</p> <p>El problema: Actualizar el DOM es LENTO. Si cambias todo cada vez que algo peque\u00f1o cambia, tu app ser\u00e1 lenta.</p> <p>La soluci\u00f3n de React: Solo actualiza las partes que realmente cambiaron.</p> <p>Analog\u00eda: Es como editar un documento - no reescribes todo el documento cuando corriges una palabra, solo cambias esa palabra.</p>"},{"location":"sesion_01/#3-flujo-de-datos-unidireccional","title":"3. Flujo de datos unidireccional","text":"<p>\u00bfQu\u00e9 significa? Los datos fluyen en una sola direcci\u00f3n: de arriba hacia abajo (de componentes padres a hijos).</p> <p>Visualizaci\u00f3n: <pre><code>App (tiene los datos principales)\n  \u2193\nHeader (recibe datos del App)\n  \u2193\nMenu (recibe datos del Header)\n</code></pre></p> <p>Beneficio: Es m\u00e1s f\u00e1cil entender de d\u00f3nde vienen los datos y rastrear errores.</p>"},{"location":"sesion_01/#4-componentes-reutilizables","title":"4. Componentes reutilizables","text":"<p>\u00bfQu\u00e9 son? Piezas de c\u00f3digo que puedes usar m\u00faltiples veces, como moldes.</p> <p>Ejemplo del mundo real: Un bot\u00f3n que usas en toda tu app: <pre><code>// Defines una vez\nconst BotonAzul = ({texto}) =&gt; (\n  &lt;button style={{background: 'blue'}}&gt;{texto}&lt;/button&gt;\n);\n\n// Usas muchas veces\n&lt;BotonAzul texto=\"Guardar\" /&gt;\n&lt;BotonAzul texto=\"Cancelar\" /&gt;\n&lt;BotonAzul texto=\"Enviar\" /&gt;\n</code></pre></p>"},{"location":"sesion_01/#versatilidad-de-react","title":"\ud83c\udf10 Versatilidad de React","text":"<p>React no solo sirve para p\u00e1ginas web. Con el mismo conocimiento puedes crear:</p> <ul> <li>P\u00e1ginas web (React DOM)</li> <li>Apps m\u00f3viles (React Native) - Instagram, Facebook</li> <li>Apps de escritorio (Electron) - Discord, VS Code</li> <li>Aplicaciones del servidor (Next.js)</li> </ul>"},{"location":"sesion_01/#primer-ejemplo-hola-mundo","title":"\ud83d\udc4b Primer ejemplo: Hola Mundo","text":""},{"location":"sesion_01/#codigo-basico-de-react","title":"C\u00f3digo b\u00e1sico de React","text":"<pre><code>const divRoot = document.querySelector('#root');\n\nReactDOM.render(\n  &lt;h1&gt;Hola Mundo&lt;/h1&gt;,\n  divRoot\n);\n</code></pre>"},{"location":"sesion_01/#explicacion-linea-por-linea","title":"\ud83d\udd0d Explicaci\u00f3n l\u00ednea por l\u00ednea","text":""},{"location":"sesion_01/#linea-1-const-divroot-documentqueryselectorroot","title":"L\u00ednea 1: <code>const divRoot = document.querySelector('#root');</code>","text":"<ul> <li>\u00bfQu\u00e9 hace? Busca un elemento HTML con <code>id=\"root\"</code></li> <li>\u00bfPor qu\u00e9? React necesita un lugar donde \"vivir\" en tu p\u00e1gina HTML</li> <li>Analog\u00eda: Es como decirle a React \"aqu\u00ed es donde vas a construir todo\"</li> </ul>"},{"location":"sesion_01/#linea-3-6-reactdomrender","title":"L\u00ednea 3-6: <code>ReactDOM.render(...)</code>","text":"<ul> <li>ReactDOM: Es el puente entre React y el navegador</li> <li>render: Significa \"mostrar\" o \"dibujar\"</li> <li>Primer par\u00e1metro <code>&lt;h1&gt;Hola Mundo&lt;/h1&gt;</code>: QU\u00c9 mostrar</li> <li>Segundo par\u00e1metro <code>divRoot</code>: D\u00d3NDE mostrarlo</li> </ul>"},{"location":"sesion_01/#html-minimo-necesario","title":"\ud83d\udce6 HTML m\u00ednimo necesario","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Mi App React&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- React va a vivir aqu\u00ed --&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n\n    &lt;!-- Scripts de React --&gt;\n    &lt;script src=\"react.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"react-dom.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"sesion_01/#jsx-javascript-xml","title":"\ud83c\udfa8 JSX: JavaScript + XML","text":""},{"location":"sesion_01/#que-es-jsx","title":"\u00bfQu\u00e9 es JSX?","text":"<p>JSX es una sintaxis especial que te permite escribir algo que parece HTML dentro de JavaScript. NO es HTML real, es az\u00facar sint\u00e1ctico que se transforma en JavaScript.</p>"},{"location":"sesion_01/#comparacion-jsx-vs-javascript-puro","title":"Comparaci\u00f3n: JSX vs JavaScript puro","text":"<p>Con JSX (f\u00e1cil de leer): <pre><code>const elemento = (\n  &lt;div className=\"contenedor\"&gt;\n    &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n    &lt;p&gt;Este es un p\u00e1rrafo&lt;/p&gt;\n  &lt;/div&gt;\n);\n</code></pre></p> <p>Sin JSX (dif\u00edcil de leer): <pre><code>const elemento = React.createElement(\n  'div',\n  { className: 'contenedor' },\n  React.createElement('h1', null, 'T\u00edtulo'),\n  React.createElement('p', null, 'Este es un p\u00e1rrafo')\n);\n</code></pre></p>"},{"location":"sesion_01/#reglas-importantes-de-jsx","title":"\ud83c\udfaf Reglas importantes de JSX","text":""},{"location":"sesion_01/#1-las-etiquetas-deben-cerrarse","title":"1. Las etiquetas deben cerrarse","text":"<pre><code>// \u274c Mal\n&lt;img src=\"foto.jpg\"&gt;\n&lt;br&gt;\n\n// \u2705 Bien\n&lt;img src=\"foto.jpg\" /&gt;\n&lt;br /&gt;\n</code></pre>"},{"location":"sesion_01/#2-usa-classname-en-lugar-de-class","title":"2. Usa <code>className</code> en lugar de <code>class</code>","text":"<pre><code>// \u274c HTML normal\n&lt;div class=\"mi-clase\"&gt;\n\n// \u2705 JSX\n&lt;div className=\"mi-clase\"&gt;\n</code></pre>"},{"location":"sesion_01/#3-javascript-va-entre-llaves","title":"3. JavaScript va entre llaves <code>{}</code>","text":"<pre><code>const nombre = \"Juan\";\nconst edad = 25;\n\nreturn (\n  &lt;div&gt;\n    &lt;h1&gt;Hola {nombre}&lt;/h1&gt;\n    &lt;p&gt;Tienes {edad} a\u00f1os&lt;/p&gt;\n    &lt;p&gt;En 5 a\u00f1os tendr\u00e1s {edad + 5}&lt;/p&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"sesion_01/#primer-proyecto-react-configuracion-manual","title":"\ud83d\udee0\ufe0f Primer Proyecto React: Configuraci\u00f3n Manual","text":""},{"location":"sesion_01/#estructura-del-proyecto-explicada","title":"Estructura del proyecto explicada","text":"<pre><code>01-intro-react/\n\u251c\u2500\u2500 index.html      # P\u00e1gina principal\n\u251c\u2500\u2500 src/           # Carpeta de c\u00f3digo fuente\n\u2502   \u2514\u2500\u2500 app.js     # Tu c\u00f3digo React\n</code></pre>"},{"location":"sesion_01/#indexhtml","title":"\ud83d\udcc4 index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;React App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- React necesita un contenedor vac\u00edo --&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n\n    &lt;!-- 1. React: La librer\u00eda principal --&gt;\n    &lt;script src=\"https://unpkg.com/react@18/umd/react.development.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- 2. ReactDOM: Para interactuar con el navegador --&gt;\n    &lt;script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- 3. Babel: Traduce JSX a JavaScript --&gt;\n    &lt;script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- 4. Tu c\u00f3digo (nota el type=\"text/babel\") --&gt;\n    &lt;script type=\"text/babel\"&gt;\n        // Variables en React\n        const productName = \"Zapatos deportivos\";\n        const price = 99.99;\n\n        // Componente React\n        const ProductInfo = () =&gt; {\n            return (\n                &lt;div&gt;\n                    &lt;h1&gt;Producto: {productName}&lt;/h1&gt;\n                    &lt;p&gt;Precio: ${price}&lt;/p&gt;\n                    &lt;p&gt;Con descuento: ${price * 0.9}&lt;/p&gt;\n                &lt;/div&gt;\n            );\n        };\n\n        // Renderizar en el DOM\n        const root = document.getElementById('root');\n        ReactDOM.render(&lt;ProductInfo /&gt;, root);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"sesion_01/#conceptos-clave-del-ejemplo","title":"\ud83d\udd11 Conceptos clave del ejemplo","text":""},{"location":"sesion_01/#1-las-tres-librerias-necesarias","title":"1. Las tres librer\u00edas necesarias","text":"<ul> <li>React: El n\u00facleo, contiene la l\u00f3gica de componentes</li> <li>ReactDOM: Conecta React con el navegador</li> <li>Babel: Traduce JSX a JavaScript que el navegador entiende</li> </ul>"},{"location":"sesion_01/#2-typetextbabel","title":"2. type=\"text/babel\"","text":"<p>Le dice al navegador que este script contiene JSX y necesita ser transformado por Babel.</p>"},{"location":"sesion_01/#3-variables-en-jsx","title":"3. Variables en JSX","text":"<pre><code>const precio = 100;\n&lt;p&gt;El precio es: {precio}&lt;/p&gt;        // Muestra: El precio es: 100\n&lt;p&gt;Con IVA: {precio * 1.21}&lt;/p&gt;      // Muestra: Con IVA: 121\n&lt;p&gt;Oferta: {precio &gt; 50 ? 'Caro' : 'Barato'}&lt;/p&gt;  // Muestra: Oferta: Caro\n</code></pre>"},{"location":"sesion_01/#componentes-los-bloques-de-construccion","title":"\ud83e\udde9 Componentes: Los bloques de construcci\u00f3n","text":""},{"location":"sesion_01/#que-es-un-componente","title":"\u00bfQu\u00e9 es un componente?","text":"<p>Un componente es una pieza reutilizable de interfaz. Piensa en ellos como funciones que devuelven HTML (JSX).</p>"},{"location":"sesion_01/#anatomia-de-un-componente","title":"Anatom\u00eda de un componente","text":"<pre><code>// 1. Definici\u00f3n del componente (es una funci\u00f3n)\nfunction MiComponente(props) {\n    // 2. L\u00f3gica del componente (opcional)\n    const saludo = \"Hola \" + props.nombre;\n\n    // 3. Lo que muestra (return con JSX)\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;{saludo}&lt;/h1&gt;\n            &lt;p&gt;Bienvenido a React&lt;/p&gt;\n        &lt;/div&gt;\n    );\n}\n\n// 4. Uso del componente\n&lt;MiComponente nombre=\"Juan\" /&gt;\n</code></pre>"},{"location":"sesion_01/#tipos-de-componentes","title":"\ud83d\udce6 Tipos de componentes","text":""},{"location":"sesion_01/#1-componente-funcional-moderno","title":"1. Componente funcional (moderno)","text":"<pre><code>const Saludo = ({ nombre }) =&gt; {\n    return &lt;h1&gt;Hola {nombre}&lt;/h1&gt;;\n};\n\n// Versi\u00f3n a\u00fan m\u00e1s corta\nconst Saludo = ({ nombre }) =&gt; &lt;h1&gt;Hola {nombre}&lt;/h1&gt;;\n</code></pre>"},{"location":"sesion_01/#2-componente-de-clase-antiguo-menos-comun","title":"2. Componente de clase (antiguo, menos com\u00fan)","text":"<pre><code>class Saludo extends React.Component {\n    render() {\n        return &lt;h1&gt;Hola {this.props.nombre}&lt;/h1&gt;;\n    }\n}\n</code></pre>"},{"location":"sesion_01/#props-pasando-datos-a-componentes","title":"\ud83c\udfaf Props: Pasando datos a componentes","text":"<p>Props (propiedades) son la forma de pasar informaci\u00f3n a un componente.</p> <pre><code>// Definir componente que recibe props\nconst TarjetaProducto = ({ nombre, precio, imagen }) =&gt; {\n    return (\n        &lt;div className=\"tarjeta\"&gt;\n            &lt;img src={imagen} alt={nombre} /&gt;\n            &lt;h3&gt;{nombre}&lt;/h3&gt;\n            &lt;p&gt;${precio}&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n\n// Usar el componente con diferentes props\n&lt;TarjetaProducto \n    nombre=\"Laptop\" \n    precio={1200} \n    imagen=\"laptop.jpg\" \n/&gt;\n\n&lt;TarjetaProducto \n    nombre=\"Mouse\" \n    precio={25} \n    imagen=\"mouse.jpg\" \n/&gt;\n</code></pre>"},{"location":"sesion_01/#composicion-de-componentes","title":"\ud83c\udfd7\ufe0f Composici\u00f3n de componentes","text":"<p>Los componentes pueden contener otros componentes:</p> <pre><code>const App = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;Header /&gt;\n            &lt;main&gt;\n                &lt;Sidebar /&gt;\n                &lt;Content /&gt;\n            &lt;/main&gt;\n            &lt;Footer /&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>"},{"location":"sesion_01/#ejemplo-visual-real-aplicacion-de-productos","title":"\ud83d\uddbc\ufe0f Ejemplo Visual Real: Aplicaci\u00f3n de Productos","text":""},{"location":"sesion_01/#imagen-1-estructura-de-componentes-con-navegacion","title":"Imagen 1: Estructura de componentes con navegaci\u00f3n","text":"<p>La primera imagen muestra una aplicaci\u00f3n React real con la siguiente estructura:</p> <p>An\u00e1lisis de la interfaz:</p> <ol> <li>Componente Principal (<code>ProductApp</code>) - Contenedor rojo</li> <li>Es el componente ra\u00edz que contiene toda la aplicaci\u00f3n</li> <li> <p>Gestiona qu\u00e9 componente mostrar seg\u00fan la navegaci\u00f3n</p> </li> <li> <p>Men\u00fa de Navegaci\u00f3n (<code>MenuItem</code>) - Items azules</p> </li> <li><code>Inicio</code> - Muestra el feed principal</li> <li><code>Categor\u00edas</code> - Lista de categor\u00edas de productos</li> <li><code>Ofertas</code> - Productos en oferta</li> <li><code>ProductCard</code> - Componente de tarjeta de producto</li> <li> <p><code>PersonForm</code> - Formulario de informaci\u00f3n personal</p> </li> <li> <p>\u00c1rea de Contenido - \u00c1rea verde</p> </li> <li>Muestra el componente seleccionado</li> <li>En este caso, muestra un feed tipo red social</li> <li>Cada post es un componente reutilizable</li> </ol> <p>C\u00f3digo aproximado de esta estructura: <pre><code>// ProductApp.jsx\nconst ProductApp = () =&gt; {\n    const [vistaActual, setVistaActual] = useState('Inicio');\n\n    return (\n        &lt;div className=\"product-app\"&gt;\n            &lt;Menu onSeleccionar={setVistaActual} /&gt;\n            &lt;main className=\"contenido-principal\"&gt;\n                {vistaActual === 'Inicio' &amp;&amp; &lt;Feed /&gt;}\n                {vistaActual === 'ProductCard' &amp;&amp; &lt;ProductCard /&gt;}\n                {vistaActual === 'PersonForm' &amp;&amp; &lt;PersonForm /&gt;}\n                {/* ... m\u00e1s vistas */}\n            &lt;/main&gt;\n        &lt;/div&gt;\n    );\n};\n\n// Menu.jsx\nconst Menu = ({ onSeleccionar }) =&gt; {\n    const opciones = ['Inicio', 'Categor\u00edas', 'Ofertas', 'ProductCard', 'PersonForm'];\n\n    return (\n        &lt;nav className=\"menu\"&gt;\n            &lt;h2&gt;Menu&lt;/h2&gt;\n            {opciones.map(opcion =&gt; (\n                &lt;MenuItem \n                    key={opcion}\n                    texto={opcion}\n                    onClick={() =&gt; onSeleccionar(opcion)}\n                /&gt;\n            ))}\n        &lt;/nav&gt;\n    );\n};\n\n// Feed.jsx (el \u00e1rea verde con posts)\nconst Feed = () =&gt; {\n    const posts = [\n        { id: 1, autor: 'John Smith', fecha: 'May 8', contenido: '...', likes: 1000 },\n        { id: 2, autor: 'Abagail Libbie', fecha: 'May 3', contenido: '...', likes: 500 },\n        // m\u00e1s posts...\n    ];\n\n    return (\n        &lt;div className=\"feed\"&gt;\n            {posts.map(post =&gt; (\n                &lt;Post key={post.id} {...post} /&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n</code></pre></p> <p>Conceptos clave ilustrados: - Navegaci\u00f3n SPA (Single Page Application): No recarga la p\u00e1gina - Estado compartido: <code>vistaActual</code> controla qu\u00e9 mostrar - Componentes reutilizables: Cada <code>MenuItem</code> y <code>Post</code> es reutilizable - Props: Pasar funciones (<code>onSeleccionar</code>) y datos</p> <p></p>"},{"location":"sesion_01/#imagen-2-estado-del-formulario","title":"Imagen 2: Estado del formulario","text":"<p>La segunda imagen muestra el componente <code>PersonForm</code> cuando est\u00e1 activo:</p> <p>An\u00e1lisis del formulario:</p> <ol> <li>Navegaci\u00f3n actualizada</li> <li><code>PersonForm</code> est\u00e1 resaltado (morado)</li> <li> <p>Indica que este componente est\u00e1 activo</p> </li> <li> <p>Formulario con m\u00faltiples campos</p> </li> <li>First Name / Last Name</li> <li>Birthday / Phone Number</li> <li>Email / Occupation</li> <li>Botones Save / Cancel</li> </ol> <p>C\u00f3digo del componente PersonForm con estado: <pre><code>// PersonForm.jsx\nconst PersonForm = () =&gt; {\n    // Estado para cada campo del formulario\n    const [formData, setFormData] = useState({\n        firstName: '',\n        lastName: '',\n        birthday: '',\n        phoneNumber: '',\n        email: '',\n        occupation: ''\n    });\n\n    // Manejar cambios en los inputs\n    const handleChange = (e) =&gt; {\n        const { name, value } = e.target;\n        setFormData(prevData =&gt; ({\n            ...prevData,\n            [name]: value\n        }));\n    };\n\n    // Manejar env\u00edo del formulario\n    const handleSubmit = (e) =&gt; {\n        e.preventDefault();\n        console.log('Datos guardados:', formData);\n        // Aqu\u00ed ir\u00edan las acciones de guardado\n    };\n\n    const handleCancel = () =&gt; {\n        // Limpiar formulario o navegar atr\u00e1s\n        setFormData({\n            firstName: '',\n            lastName: '',\n            birthday: '',\n            phoneNumber: '',\n            email: '',\n            occupation: ''\n        });\n    };\n\n    return (\n        &lt;div className=\"person-form-container\"&gt;\n            &lt;h2&gt;Personal Information&lt;/h2&gt;\n            &lt;form onSubmit={handleSubmit}&gt;\n                &lt;div className=\"form-row\"&gt;\n                    &lt;input\n                        type=\"text\"\n                        name=\"firstName\"\n                        placeholder=\"First Name\"\n                        value={formData.firstName}\n                        onChange={handleChange}\n                    /&gt;\n                    &lt;input\n                        type=\"text\"\n                        name=\"lastName\"\n                        placeholder=\"Last Name\"\n                        value={formData.lastName}\n                        onChange={handleChange}\n                    /&gt;\n                &lt;/div&gt;\n\n                &lt;div className=\"form-row\"&gt;\n                    &lt;input\n                        type=\"date\"\n                        name=\"birthday\"\n                        placeholder=\"Birthday\"\n                        value={formData.birthday}\n                        onChange={handleChange}\n                    /&gt;\n                    &lt;input\n                        type=\"tel\"\n                        name=\"phoneNumber\"\n                        placeholder=\"Phone Number\"\n                        value={formData.phoneNumber}\n                        onChange={handleChange}\n                    /&gt;\n                &lt;/div&gt;\n\n                &lt;div className=\"form-row\"&gt;\n                    &lt;input\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        value={formData.email}\n                        onChange={handleChange}\n                    /&gt;\n                    &lt;input\n                        type=\"text\"\n                        name=\"occupation\"\n                        placeholder=\"Occupation\"\n                        value={formData.occupation}\n                        onChange={handleChange}\n                    /&gt;\n                &lt;/div&gt;\n\n                &lt;div className=\"form-buttons\"&gt;\n                    &lt;button type=\"submit\" className=\"btn-save\"&gt;\n                        Save\n                    &lt;/button&gt;\n                    &lt;button type=\"button\" onClick={handleCancel} className=\"btn-cancel\"&gt;\n                        Cancel\n                    &lt;/button&gt;\n                &lt;/div&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre></p> <p>Conceptos de estado ilustrados:</p> <ol> <li> <p>Estado del formulario vac\u00edo inicial <pre><code>// Al cargar el componente\n{\n    firstName: '',\n    lastName: '',\n    birthday: '',\n    phoneNumber: '',\n    email: '',\n    occupation: ''\n}\n</code></pre></p> </li> <li> <p>Estado mientras el usuario escribe <pre><code>// Despu\u00e9s de llenar algunos campos\n{\n    firstName: 'Juan',\n    lastName: 'P\u00e9rez',\n    birthday: '1990-05-15',\n    phoneNumber: '555-0123',\n    email: 'juan@email.com',\n    occupation: 'Desarrollador'\n}\n</code></pre></p> </li> <li> <p>Flujo de actualizaci\u00f3n del estado <pre><code>Usuario escribe en input\n        \u2193\nonChange se dispara\n        \u2193\nhandleChange se ejecuta\n        \u2193\nsetFormData actualiza el estado\n        \u2193\nReact re-renderiza el componente\n        \u2193\nInput muestra el nuevo valor\n</code></pre></p> </li> </ol> <p>Caracter\u00edsticas clave del formulario: - Controlled inputs: El valor viene del estado - Two-way binding: Estado \u2194 Input sincronizados - Single source of truth: Todo el estado en un objeto - Inmutabilidad: Usamos spread operator para actualizar</p>"},{"location":"sesion_01/#resumen-visual","title":"\ud83c\udfaf Resumen visual","text":"<p>Estas im\u00e1genes muestran perfectamente: 1. C\u00f3mo los componentes se organizan en una aplicaci\u00f3n real 2. C\u00f3mo funciona la navegaci\u00f3n sin recargar la p\u00e1gina 3. C\u00f3mo el estado controla lo que se muestra 4. C\u00f3mo los formularios manejan datos en React</p> <p>Visualizaci\u00f3n de la jerarqu\u00eda completa: <pre><code>ProductApp (componente ra\u00edz)\n\u251c\u2500\u2500 Menu (navegaci\u00f3n lateral)\n\u2502   \u251c\u2500\u2500 MenuItem \"Inicio\"\n\u2502   \u251c\u2500\u2500 MenuItem \"Categor\u00edas\"\n\u2502   \u251c\u2500\u2500 MenuItem \"Ofertas\"\n\u2502   \u251c\u2500\u2500 MenuItem \"ProductCard\"\n\u2502   \u2514\u2500\u2500 MenuItem \"PersonForm\"\n\u2514\u2500\u2500 ContenidoPrincipal (\u00e1rea din\u00e1mica)\n    \u251c\u2500\u2500 Feed (cuando seleccionas \"Inicio\")\n    \u2502   \u251c\u2500\u2500 Post 1\n    \u2502   \u251c\u2500\u2500 Post 2\n    \u2502   \u2514\u2500\u2500 ...m\u00e1s posts\n    \u2514\u2500\u2500 PersonForm (cuando seleccionas \"PersonForm\")\n        \u251c\u2500\u2500 Inputs de formulario\n        \u2514\u2500\u2500 Botones de acci\u00f3n\n</code></pre></p>"},{"location":"sesion_01/#estado-haciendo-tu-app-interactiva","title":"\ud83d\udcbe Estado: Haciendo tu app interactiva","text":""},{"location":"sesion_01/#que-es-el-estado","title":"\u00bfQu\u00e9 es el estado?","text":"<p>El estado es informaci\u00f3n que puede cambiar con el tiempo en tu componente. Cuando el estado cambia, React actualiza autom\u00e1ticamente lo que se muestra en pantalla.</p>"},{"location":"sesion_01/#ejemplo-simple-contador","title":"Ejemplo simple: Contador","text":"<pre><code>import { useState } from 'react';\n\nconst Contador = () =&gt; {\n    // Declarar una variable de estado\n    const [cuenta, setCuenta] = useState(0);\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Contador: {cuenta}&lt;/h1&gt;\n            &lt;button onClick={() =&gt; setCuenta(cuenta + 1)}&gt;\n                Incrementar\n            &lt;/button&gt;\n            &lt;button onClick={() =&gt; setCuenta(cuenta - 1)}&gt;\n                Decrementar\n            &lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>"},{"location":"sesion_01/#desglose-del-usestate","title":"\ud83d\udd0d Desglose del useState","text":"<pre><code>const [cuenta, setCuenta] = useState(0);\n//     \u2191         \u2191              \u2191\n//   valor    funci\u00f3n      valor inicial\n//   actual   para cambiar\n</code></pre> <ul> <li><code>cuenta</code>: El valor actual del estado</li> <li><code>setCuenta</code>: Funci\u00f3n para actualizar el estado</li> <li><code>useState(0)</code>: Hook que crea el estado con valor inicial 0</li> </ul>"},{"location":"sesion_01/#ejemplo-mas-complejo-formulario","title":"\ud83d\udcdd Ejemplo m\u00e1s complejo: Formulario","text":"<pre><code>const FormularioContacto = () =&gt; {\n    // M\u00faltiples estados\n    const [nombre, setNombre] = useState('');\n    const [email, setEmail] = useState('');\n    const [mensaje, setMensaje] = useState('');\n\n    const handleSubmit = (e) =&gt; {\n        e.preventDefault();\n        console.log({ nombre, email, mensaje });\n    };\n\n    return (\n        &lt;form onSubmit={handleSubmit}&gt;\n            &lt;input\n                type=\"text\"\n                placeholder=\"Tu nombre\"\n                value={nombre}\n                onChange={(e) =&gt; setNombre(e.target.value)}\n            /&gt;\n\n            &lt;input\n                type=\"email\"\n                placeholder=\"Tu email\"\n                value={email}\n                onChange={(e) =&gt; setEmail(e.target.value)}\n            /&gt;\n\n            &lt;textarea\n                placeholder=\"Tu mensaje\"\n                value={mensaje}\n                onChange={(e) =&gt; setMensaje(e.target.value)}\n            /&gt;\n\n            &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n\n            {/* Vista previa en tiempo real */}\n            &lt;div&gt;\n                &lt;h3&gt;Vista previa:&lt;/h3&gt;\n                &lt;p&gt;Nombre: {nombre}&lt;/p&gt;\n                &lt;p&gt;Email: {email}&lt;/p&gt;\n                &lt;p&gt;Mensaje: {mensaje}&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n    );\n};\n</code></pre>"},{"location":"sesion_01/#reglas-del-estado","title":"\ud83c\udfaf Reglas del Estado","text":"<ol> <li> <p>Nunca modifiques el estado directamente <pre><code>// \u274c MAL\ncuenta = cuenta + 1;\n\n// \u2705 BIEN\nsetCuenta(cuenta + 1);\n</code></pre></p> </li> <li> <p>El estado es as\u00edncrono <pre><code>setCuenta(cuenta + 1);\nconsole.log(cuenta); // Todav\u00eda muestra el valor anterior\n</code></pre></p> </li> <li> <p>Actualizaciones basadas en estado previo <pre><code>// Si necesitas el valor anterior, usa una funci\u00f3n\nsetCuenta(prevCuenta =&gt; prevCuenta + 1);\n</code></pre></p> </li> </ol>"},{"location":"sesion_01/#fragmentos-agrupando-elementos-sin-divs-extra","title":"\ud83c\udf81 Fragmentos: Agrupando elementos sin divs extra","text":""},{"location":"sesion_01/#el-problema","title":"El problema","text":"<p>React requiere que los componentes devuelvan UN solo elemento. Esto puede llevar a \"div soup\" (sopa de divs):</p> <pre><code>// \u274c Esto da ERROR\nconst Componente = () =&gt; {\n    return (\n        &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n        &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n    );\n};\n\n// \ud83e\udd14 Funciona pero agrega un div innecesario\nconst Componente = () =&gt; {\n    return (\n        &lt;div&gt;  {/* div extra que no necesitamos */}\n            &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n            &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>"},{"location":"sesion_01/#la-solucion-fragments","title":"La soluci\u00f3n: Fragments","text":""},{"location":"sesion_01/#opcion-1-fragment-explicito","title":"Opci\u00f3n 1: Fragment expl\u00edcito","text":"<pre><code>import { Fragment } from 'react';\n\nconst Componente = () =&gt; {\n    return (\n        &lt;Fragment&gt;\n            &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n            &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n        &lt;/Fragment&gt;\n    );\n};\n</code></pre>"},{"location":"sesion_01/#opcion-2-sintaxis-corta-recomendada","title":"Opci\u00f3n 2: Sintaxis corta (recomendada)","text":"<pre><code>const Componente = () =&gt; {\n    return (\n        &lt;&gt;\n            &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n            &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>"},{"location":"sesion_01/#por-que-usar-fragments","title":"\ud83c\udfaf \u00bfPor qu\u00e9 usar Fragments?","text":"<ol> <li>DOM m\u00e1s limpio: No agrega elementos HTML innecesarios</li> <li>Mejor rendimiento: Menos nodos en el DOM</li> <li>CSS m\u00e1s f\u00e1cil: No interfiere con Flexbox o Grid</li> </ol> <p>Ejemplo pr\u00e1ctico: <pre><code>// Lista de definiciones sin divs extra\nconst Glosario = () =&gt; {\n    return (\n        &lt;dl&gt;\n            &lt;Termino /&gt;\n            &lt;Definicion /&gt;\n        &lt;/dl&gt;\n    );\n};\n\nconst Termino = () =&gt; (\n    &lt;&gt;\n        &lt;dt&gt;React&lt;/dt&gt;\n        &lt;dt&gt;React.js&lt;/dt&gt;\n    &lt;/&gt;\n);\n\nconst Definicion = () =&gt; (\n    &lt;dd&gt;Una librer\u00eda de JavaScript para construir interfaces&lt;/dd&gt;\n);\n</code></pre></p>"},{"location":"sesion_01/#estilos-globales-en-react","title":"\ud83c\udfa8 Estilos Globales en React","text":""},{"location":"sesion_01/#creando-estilos-globales","title":"Creando estilos globales","text":""},{"location":"sesion_01/#1-crear-archivo-css","title":"1. Crear archivo CSS","text":"<pre><code>/* src/index.css */\n\n/* Reset b\u00e1sico */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n/* Estilos globales */\nhtml, body {\n    background-color: #21232a;\n    color: white;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    font-size: 16px;\n    line-height: 1.6;\n}\n\n/* Contenedor principal */\n#root {\n    min-height: 100vh;\n    padding: 2rem;\n}\n\n/* Estilos reutilizables */\n.contenedor {\n    max-width: 1200px;\n    margin: 0 auto;\n}\n\n.boton {\n    background: #61dafb;\n    color: #21232a;\n    border: none;\n    padding: 0.5rem 1rem;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 1rem;\n}\n\n.boton:hover {\n    background: #4fc3f7;\n}\n</code></pre>"},{"location":"sesion_01/#2-importar-en-mainjsx","title":"2. Importar en main.jsx","text":"<pre><code>// main.jsx o index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';  // \ud83d\udc48 Importar estilos globales\nimport App from './App';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n    &lt;React.StrictMode&gt;\n        &lt;App /&gt;\n    &lt;/React.StrictMode&gt;\n);\n</code></pre>"},{"location":"sesion_01/#diferentes-formas-de-aplicar-estilos-en-react","title":"\ud83c\udfaf Diferentes formas de aplicar estilos en React","text":""},{"location":"sesion_01/#1-clases-css-classname","title":"1. Clases CSS (className)","text":"<pre><code>const Componente = () =&gt; (\n    &lt;div className=\"contenedor\"&gt;\n        &lt;button className=\"boton boton-primario\"&gt;\n            Click me\n        &lt;/button&gt;\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"sesion_01/#2-estilos-inline","title":"2. Estilos inline","text":"<pre><code>const Componente = () =&gt; (\n    &lt;div style={{ \n        backgroundColor: 'blue', \n        padding: '20px',\n        borderRadius: '8px' \n    }}&gt;\n        Contenido\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"sesion_01/#3-css-modules-mas-avanzado","title":"3. CSS Modules (m\u00e1s avanzado)","text":"<pre><code>/* Button.module.css */\n.boton {\n    background: blue;\n    color: white;\n}\n</code></pre> <pre><code>import styles from './Button.module.css';\n\nconst Button = () =&gt; (\n    &lt;button className={styles.boton}&gt;Click&lt;/button&gt;\n);\n</code></pre>"},{"location":"sesion_01/#mejores-practicas-para-estilos","title":"\ud83d\udccb Mejores pr\u00e1cticas para estilos","text":"<ol> <li> <p>Usar rem en lugar de px para tama\u00f1os <pre><code>/* Mejor escalabilidad */\nfont-size: 1.2rem;  /* en lugar de 19.2px */\npadding: 1rem;      /* en lugar de 16px */\n</code></pre></p> </li> <li> <p>Variables CSS para colores <pre><code>:root {\n    --color-primario: #61dafb;\n    --color-fondo: #21232a;\n    --color-texto: #ffffff;\n}\n\nbody {\n    background-color: var(--color-fondo);\n    color: var(--color-texto);\n}\n</code></pre></p> </li> <li> <p>Mobile-first approach <pre><code>/* Estilos para m\u00f3vil primero */\n.contenedor {\n    padding: 1rem;\n}\n\n/* Luego ajustes para pantallas grandes */\n@media (min-width: 768px) {\n    .contenedor {\n        padding: 2rem;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"sesion_01/#resumen-y-proximos-pasos","title":"\ud83d\ude80 Resumen y pr\u00f3ximos pasos","text":""},{"location":"sesion_01/#lo-que-hemos-aprendido","title":"Lo que hemos aprendido:","text":"<ol> <li>React es una librer\u00eda para crear interfaces de usuario</li> <li>JSX nos permite escribir \"HTML\" en JavaScript</li> <li>Componentes son bloques reutilizables de c\u00f3digo</li> <li>Props pasan datos a los componentes</li> <li>Estado hace las apps interactivas</li> <li>Fragments agrupan elementos sin divs extra</li> <li>Estilos se pueden aplicar de varias formas</li> </ol>"},{"location":"sesion_01/#proyecto-de-practica-sugerido","title":"\ud83d\udca1 Proyecto de pr\u00e1ctica sugerido","text":"<p>Crea una app de lista de tareas con React que incluya:</p> <ul> <li>Componente de formulario para agregar tareas</li> <li>Lista de tareas con checkbox</li> <li>Contador de tareas pendientes</li> <li>Estilos personalizados</li> <li>Uso de estado para manejar las tareas</li> </ul>"},{"location":"sesion_01_01/","title":"\ud83d\ude80 Inicio de Proyectos React: Vite vs Create React App","text":""},{"location":"sesion_01_01/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>\u00bfPor qu\u00e9 necesitamos herramientas especiales?</li> <li>\u00bfQu\u00e9 es Vite?</li> <li>\u00bfQu\u00e9 es Create React App?</li> <li>Configuraci\u00f3n del entorno de trabajo</li> <li>Crear proyecto con Vite - Paso a paso</li> <li>Crear proyecto con CRA - Paso a paso</li> <li>Comparaci\u00f3n detallada</li> <li>\u00bfCu\u00e1l elegir?</li> </ol>"},{"location":"sesion_01_01/#por-que-necesitamos-herramientas-especiales","title":"\ud83e\udd14 \u00bfPor qu\u00e9 necesitamos herramientas especiales?","text":""},{"location":"sesion_01_01/#el-problema-con-el-metodo-manual","title":"El problema con el m\u00e9todo manual","text":"<p>En la secci\u00f3n anterior, creamos React manualmente con CDN: <pre><code>&lt;script src=\"https://unpkg.com/react@18/umd/react.development.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"&gt;&lt;/script&gt;\n</code></pre></p> <p>Problemas de este enfoque: - \u274c Lento: Babel traduce JSX en el navegador (malo para producci\u00f3n) - \u274c Sin m\u00f3dulos: No puedes dividir tu c\u00f3digo en archivos - \u274c Sin optimizaci\u00f3n: No hay minificaci\u00f3n ni tree-shaking - \u274c Sin hot reload: Debes recargar manualmente - \u274c Sin herramientas: No hay linting, testing, etc.</p>"},{"location":"sesion_01_01/#la-solucion-herramientas-de-construccion-build-tools","title":"La soluci\u00f3n: Herramientas de construcci\u00f3n (Build Tools)","text":"<p>Las herramientas como Vite y Create React App resuelven estos problemas: - \u2705 Compilaci\u00f3n previa: JSX se traduce antes de llegar al navegador - \u2705 Sistema de m\u00f3dulos: Importa/exporta entre archivos - \u2705 Optimizaci\u00f3n autom\u00e1tica: C\u00f3digo minificado y optimizado - \u2705 Hot Module Replacement: Cambios instant\u00e1neos sin recargar - \u2705 Ecosistema completo: Testing, linting, etc.</p>"},{"location":"sesion_01_01/#que-es-vite","title":"\u26a1 \u00bfQu\u00e9 es Vite?","text":""},{"location":"sesion_01_01/#definicion-simple","title":"Definici\u00f3n simple","text":"<p>Vite (pronunciado \"vit\", significa \"r\u00e1pido\" en franc\u00e9s) es una herramienta moderna de construcci\u00f3n que hace el desarrollo con React extremadamente r\u00e1pido.</p>"},{"location":"sesion_01_01/#por-que-es-tan-rapido","title":"\u00bfPor qu\u00e9 es tan r\u00e1pido?","text":""},{"location":"sesion_01_01/#1-servidor-de-desarrollo-nativo","title":"1. Servidor de desarrollo nativo","text":"<pre><code>Tradicional (Webpack):         Vite:\nBundlea TODO \u2192 Sirve          Sirve archivos \u2192 Bundlea solo lo necesario\n(Lento al inicio)             (Instant\u00e1neo)\n</code></pre>"},{"location":"sesion_01_01/#2-esbuild-bajo-el-capo","title":"2. ESBuild bajo el cap\u00f3","text":"<ul> <li>Escrito en Go (no JavaScript)</li> <li>10-100x m\u00e1s r\u00e1pido que alternativas</li> <li>Compila TypeScript/JSX al instante</li> </ul>"},{"location":"sesion_01_01/#3-hot-module-replacement-hmr-optimizado","title":"3. Hot Module Replacement (HMR) optimizado","text":"<ul> <li>Solo actualiza el m\u00f3dulo que cambi\u00f3</li> <li>Mantiene el estado de la aplicaci\u00f3n</li> </ul>"},{"location":"sesion_01_01/#visualizacion-del-proceso-de-vite","title":"Visualizaci\u00f3n del proceso de Vite","text":"<pre><code>Tu c\u00f3digo JSX \u2192 ESBuild \u2192 JavaScript \u2192 Navegador\n    \u2191                                      \u2193\n    \u2514\u2500\u2500\u2500\u2500 HMR actualiza solo cambios \u2190\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"sesion_01_01/#que-es-create-react-app-cra","title":"\ud83d\udce6 \u00bfQu\u00e9 es Create React App (CRA)?","text":""},{"location":"sesion_01_01/#definicion-simple_1","title":"Definici\u00f3n simple","text":"<p>Create React App es la herramienta oficial de Facebook/Meta para crear aplicaciones React. Es como una \"caja con todo incluido\".</p>"},{"location":"sesion_01_01/#que-incluye-cra","title":"\u00bfQu\u00e9 incluye CRA?","text":"<pre><code>create-react-app/\n\u251c\u2500\u2500 \ud83d\udce6 Webpack (bundler)\n\u251c\u2500\u2500 \ud83c\udfa8 CSS/SASS support\n\u251c\u2500\u2500 \ud83e\uddea Jest (testing)\n\u251c\u2500\u2500 \ud83d\udcdd ESLint (linting)\n\u251c\u2500\u2500 \ud83d\udd27 Babel (transpiler)\n\u251c\u2500\u2500 \ud83d\ude80 Build scripts\n\u2514\u2500\u2500 \u2699\ufe0f Configuraci\u00f3n lista\n</code></pre>"},{"location":"sesion_01_01/#filosofia-de-cra","title":"Filosof\u00eda de CRA","text":"<ul> <li>\"Zero Configuration\": Todo preconfigurado</li> <li>\"Ejectable\": Puedes exponer la configuraci\u00f3n si necesitas</li> <li>Opinado: Toma decisiones por ti</li> </ul>"},{"location":"sesion_01_01/#configuracion-del-entorno","title":"\ud83d\udee0\ufe0f Configuraci\u00f3n del Entorno","text":""},{"location":"sesion_01_01/#prerequisitos-necesarios","title":"Prerequisitos necesarios","text":""},{"location":"sesion_01_01/#1-nodejs-instalado","title":"1. Node.js instalado","text":"<p>Verifica con: <pre><code>node --version  # Debe mostrar v14 o superior\nnpm --version   # Viene con Node.js\n</code></pre></p>"},{"location":"sesion_01_01/#2-terminalconsola","title":"2. Terminal/Consola","text":"<ul> <li>Windows: PowerShell, CMD o Windows Terminal</li> <li>Mac: Terminal o iTerm2</li> <li>Linux: Terminal de tu distribuci\u00f3n</li> </ul>"},{"location":"sesion_01_01/#3-editor-de-codigo","title":"3. Editor de c\u00f3digo","text":"<ul> <li>VS Code (recomendado)</li> <li>Extensiones \u00fatiles:</li> <li>ES7+ React/Redux/React-Native</li> <li>Prettier</li> <li>ESLint</li> </ul>"},{"location":"sesion_01_01/#preparar-el-espacio-de-trabajo","title":"Preparar el espacio de trabajo","text":"<pre><code># 1. Crear carpeta para proyectos React\nmkdir proyectos-react\ncd proyectos-react\n\n# 2. Verificar que est\u00e1s en el lugar correcto\npwd  # Mac/Linux\ncd   # Windows (sin argumentos muestra la ruta actual)\n</code></pre>"},{"location":"sesion_01_01/#crear-proyecto-con-vite-paso-a-paso","title":"\u26a1 Crear Proyecto con Vite - Paso a Paso","text":""},{"location":"sesion_01_01/#1-ejecutar-el-comando-de-creacion","title":"1. Ejecutar el comando de creaci\u00f3n","text":"<pre><code>npm create vite@latest\n</code></pre>"},{"location":"sesion_01_01/#2-proceso-interactivo","title":"2. Proceso interactivo","text":"<p>Te aparecer\u00e1n preguntas. Aqu\u00ed las respuestas con explicaci\u00f3n:</p> <p><pre><code>? Project name: \u203a counter-app-vite\n</code></pre> Explicaci\u00f3n: Nombre de tu proyecto (sin espacios, usa guiones)</p> <p><pre><code>? Select a framework: \u203a - Use arrow-keys. Return to submit.\n    Vanilla\n\u276f   Vue\n    React       \u2190 Selecciona esto\n    Preact\n    Lit\n    Svelte\n</code></pre> Explicaci\u00f3n: Vite soporta varios frameworks, elegimos React</p> <p><pre><code>? Select a variant: \u203a - Use arrow-keys. Return to submit.\n\u276f   JavaScript\n    TypeScript\n    JavaScript + SWC\n    TypeScript + SWC\n</code></pre> Explicaci\u00f3n:  - JavaScript: Para principiantes (recomendado) - TypeScript: JavaScript con tipos - SWC: Compilador m\u00e1s r\u00e1pido que Babel</p>"},{"location":"sesion_01_01/#3-estructura-generada-por-vite","title":"3. Estructura generada por Vite","text":"<pre><code>counter-app-vite/\n\u251c\u2500\u2500 \ud83d\udcc1 node_modules/     # Dependencias (no tocar)\n\u251c\u2500\u2500 \ud83d\udcc1 public/           # Archivos est\u00e1ticos\n\u2502   \u2514\u2500\u2500 vite.svg        # Logo de Vite\n\u251c\u2500\u2500 \ud83d\udcc1 src/              # Tu c\u00f3digo va aqu\u00ed\n\u2502   \u251c\u2500\u2500 App.css         # Estilos del App component\n\u2502   \u251c\u2500\u2500 App.jsx         # Componente principal\n\u2502   \u251c\u2500\u2500 assets/         # Im\u00e1genes, fuentes, etc.\n\u2502   \u251c\u2500\u2500 index.css       # Estilos globales\n\u2502   \u2514\u2500\u2500 main.jsx        # Punto de entrada\n\u251c\u2500\u2500 .gitignore          # Archivos ignorados por Git\n\u251c\u2500\u2500 index.html          # HTML principal\n\u251c\u2500\u2500 package.json        # Configuraci\u00f3n del proyecto\n\u251c\u2500\u2500 README.md           # Documentaci\u00f3n\n\u2514\u2500\u2500 vite.config.js      # Configuraci\u00f3n de Vite\n</code></pre>"},{"location":"sesion_01_01/#4-instalar-dependencias","title":"4. Instalar dependencias","text":"<pre><code># Entrar a la carpeta\ncd counter-app-vite\n\n# Instalar con npm\nnpm install\n\n# O con yarn (m\u00e1s r\u00e1pido)\nyarn install\n</code></pre> <p>\u00bfQu\u00e9 hace esto? - Lee <code>package.json</code> - Descarga todas las librer\u00edas necesarias - Las guarda en <code>node_modules/</code></p>"},{"location":"sesion_01_01/#5-iniciar-el-servidor-de-desarrollo","title":"5. Iniciar el servidor de desarrollo","text":"<pre><code>npm run dev\n# o\nyarn dev\n</code></pre> <p>Resultado esperado: <pre><code>  VITE v4.4.0  ready in 243 ms\n\n  \u279c  Local:   http://localhost:5173/\n  \u279c  Network: use --host to expose\n  \u279c  press h to show help\n</code></pre></p>"},{"location":"sesion_01_01/#6-ver-tu-aplicacion","title":"6. Ver tu aplicaci\u00f3n","text":"<p>Abre el navegador en <code>http://localhost:5173/</code> y ver\u00e1s: - Logo de Vite y React girando - Contador interactivo - Hot reload funcionando</p>"},{"location":"sesion_01_01/#crear-proyecto-con-cra-paso-a-paso","title":"\ud83d\udce6 Crear Proyecto con CRA - Paso a Paso","text":""},{"location":"sesion_01_01/#1-ejecutar-el-comando-de-creacion_1","title":"1. Ejecutar el comando de creaci\u00f3n","text":"<pre><code>npx create-react-app counter-app-cra\n</code></pre> <p>Nota sobre <code>npx</code>: - <code>npm</code>: Instala paquetes - <code>npx</code>: Ejecuta paquetes sin instalar</p>"},{"location":"sesion_01_01/#2-proceso-de-instalacion","title":"2. Proceso de instalaci\u00f3n","text":"<p>CRA muestra el progreso: <pre><code>Creating a new React app in /path/to/counter-app-cra.\n\nInstalling packages. This might take a couple of minutes.\nInstalling react, react-dom, and react-scripts...\n\n[========================================] 100%\n</code></pre></p> <p>\u23f1\ufe0f Tiempo aproximado: 2-5 minutos (vs 30 segundos de Vite)</p>"},{"location":"sesion_01_01/#3-estructura-generada-por-cra","title":"3. Estructura generada por CRA","text":"<pre><code>counter-app-cra/\n\u251c\u2500\u2500 \ud83d\udcc1 node_modules/     # MUCHAS m\u00e1s dependencias\n\u251c\u2500\u2500 \ud83d\udcc1 public/           # Archivos est\u00e1ticos\n\u2502   \u251c\u2500\u2500 favicon.ico     # Icono de la pesta\u00f1a\n\u2502   \u251c\u2500\u2500 index.html      # HTML con m\u00e1s meta tags\n\u2502   \u251c\u2500\u2500 logo192.png     # Logos para PWA\n\u2502   \u251c\u2500\u2500 logo512.png\n\u2502   \u251c\u2500\u2500 manifest.json   # Configuraci\u00f3n PWA\n\u2502   \u2514\u2500\u2500 robots.txt      # Para motores de b\u00fasqueda\n\u251c\u2500\u2500 \ud83d\udcc1 src/              # Tu c\u00f3digo\n\u2502   \u251c\u2500\u2500 App.css         # Estilos con animaci\u00f3n\n\u2502   \u251c\u2500\u2500 App.js          # Nota: .js no .jsx\n\u2502   \u251c\u2500\u2500 App.test.js     # Tests incluidos\n\u2502   \u251c\u2500\u2500 index.css       # Estilos globales\n\u2502   \u251c\u2500\u2500 index.js        # Punto de entrada\n\u2502   \u251c\u2500\u2500 logo.svg        # Logo animado de React\n\u2502   \u251c\u2500\u2500 reportWebVitals.js  # M\u00e9tricas de rendimiento\n\u2502   \u2514\u2500\u2500 setupTests.js   # Configuraci\u00f3n de tests\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 package.json        # M\u00e1s scripts disponibles\n\u251c\u2500\u2500 package-lock.json   # Versiones exactas\n\u2514\u2500\u2500 README.md           # Documentaci\u00f3n extensa\n</code></pre>"},{"location":"sesion_01_01/#4-scripts-disponibles-en-cra","title":"4. Scripts disponibles en CRA","text":"<pre><code>{\n  \"scripts\": {\n    \"start\": \"react-scripts start\",      // Desarrollo\n    \"build\": \"react-scripts build\",      // Producci\u00f3n\n    \"test\": \"react-scripts test\",        // Tests\n    \"eject\": \"react-scripts eject\"       // Exponer config\n  }\n}\n</code></pre>"},{"location":"sesion_01_01/#5-iniciar-el-servidor","title":"5. Iniciar el servidor","text":"<pre><code>cd counter-app-cra\nnpm start\n# o\nyarn start\n</code></pre> <p>Resultado: - Abre autom\u00e1ticamente el navegador - Puerto 3000 por defecto - Logo de React girando</p>"},{"location":"sesion_01_01/#comparacion-detallada","title":"\ud83d\udcca Comparaci\u00f3n Detallada","text":""},{"location":"sesion_01_01/#velocidad-de-instalacion","title":"Velocidad de instalaci\u00f3n","text":"<pre><code>Vite:   [====] 30 segundos\nCRA:    [====================] 3-5 minutos\n</code></pre>"},{"location":"sesion_01_01/#tamano-inicial-del-proyecto","title":"Tama\u00f1o inicial del proyecto","text":"<pre><code>Vite:   ~50 MB en node_modules\nCRA:    ~250 MB en node_modules\n</code></pre>"},{"location":"sesion_01_01/#tiempo-de-inicio-del-servidor","title":"Tiempo de inicio del servidor","text":"<pre><code>Vite:   &lt; 300ms \u26a1\nCRA:    3-10 segundos \ud83d\udc0c\n</code></pre>"},{"location":"sesion_01_01/#caracteristicas-incluidas","title":"Caracter\u00edsticas incluidas","text":"Caracter\u00edstica Vite CRA Hot Reload \u2705 Instant\u00e1neo \u2705 M\u00e1s lento TypeScript \u2705 Opcional \u2705 Opcional CSS Modules \u2705 \u2705 Testing \u274c Agregar manual \u2705 Jest incluido ESLint \u274c Agregar manual \u2705 Preconfigurado PWA Support \u274c Manual \u2705 Incluido Web Vitals \u274c \u2705"},{"location":"sesion_01_01/#estructura-de-archivos","title":"Estructura de archivos","text":"<p>Vite (minimalista): <pre><code>src/\n\u251c\u2500\u2500 App.jsx      # JSX expl\u00edcito\n\u251c\u2500\u2500 main.jsx     # Punto de entrada limpio\n\u2514\u2500\u2500 index.css    # Estilos simples\n</code></pre></p> <p>CRA (completa): <pre><code>src/\n\u251c\u2500\u2500 App.js           # .js por defecto\n\u251c\u2500\u2500 App.test.js      # Tests incluidos\n\u251c\u2500\u2500 index.js         # M\u00e1s configuraci\u00f3n\n\u251c\u2500\u2500 setupTests.js    # Config de testing\n\u2514\u2500\u2500 reportWebVitals.js  # M\u00e9tricas\n</code></pre></p>"},{"location":"sesion_01_01/#cual-elegir","title":"\ud83e\udd14 \u00bfCu\u00e1l Elegir?","text":""},{"location":"sesion_01_01/#usa-vite-si","title":"Usa Vite si:","text":"<p>\u2705 Eres principiante y quieres empezar r\u00e1pido \u2705 Valoras la velocidad de desarrollo \u2705 Prefieres configuraci\u00f3n m\u00ednima inicial \u2705 Trabajas en proyectos peque\u00f1os/medianos \u2705 Quieres la tecnolog\u00eda m\u00e1s moderna</p>"},{"location":"sesion_01_01/#usa-cra-si","title":"Usa CRA si:","text":"<p>\u2705 Necesitas todo preconfigurado desde el inicio \u2705 El testing es prioritario en tu proyecto \u2705 Trabajas en empresa con requisitos espec\u00edficos \u2705 Prefieres lo \"oficial\" de Facebook \u2705 No te importa la velocidad inicial</p>"},{"location":"sesion_01_01/#recomendacion","title":"\ud83c\udfc6 Recomendaci\u00f3n","text":"<p>Empieza con Vite porque: 1. Es m\u00e1s r\u00e1pido y no te frustrar\u00e1 esperando 2. La estructura es m\u00e1s simple de entender 3. Puedes agregar herramientas cuando las necesites 4. Es la tendencia actual en la industria</p>"},{"location":"sesion_01_01/#proximos-pasos","title":"\ud83d\ude80 Pr\u00f3ximos Pasos","text":""},{"location":"sesion_01_01/#con-tu-proyecto-vite-creado","title":"Con tu proyecto Vite creado:","text":"<ol> <li> <p>Explora la estructura <pre><code>cd counter-app-vite\ncode .  # Abre VS Code\n</code></pre></p> </li> <li> <p>Modifica App.jsx <pre><code>function App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\u00a1Mi primera app con Vite!&lt;/h1&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre></p> </li> <li> <p>Observa el hot reload</p> </li> <li>Guarda el archivo</li> <li>Mira el navegador actualizarse instantly</li> </ol>"},{"location":"sesion_01_01/#comandos-esenciales","title":"Comandos esenciales","text":"<pre><code># Desarrollo\nnpm run dev\n\n# Construir para producci\u00f3n\nnpm run build\n\n# Previsualizar build\nnpm run preview\n</code></pre>"},{"location":"sesion_01_01/#tips-y-trucos","title":"\ud83d\udca1 Tips y Trucos","text":""},{"location":"sesion_01_01/#1-atajos-de-terminal","title":"1. Atajos de terminal","text":"<ul> <li><code>Ctrl+C</code>: Detener el servidor</li> <li><code>\u2191</code>: Comando anterior</li> <li><code>Tab</code>: Autocompletar</li> </ul>"},{"location":"sesion_01_01/#2-estructura-de-carpetas-recomendada","title":"2. Estructura de carpetas recomendada","text":"<pre><code>src/\n\u251c\u2500\u2500 components/     # Componentes reutilizables\n\u251c\u2500\u2500 pages/         # P\u00e1ginas/vistas\n\u251c\u2500\u2500 hooks/         # Custom hooks\n\u251c\u2500\u2500 utils/         # Funciones helper\n\u2514\u2500\u2500 assets/        # Im\u00e1genes, fuentes\n</code></pre>"},{"location":"sesion_01_01/#3-extensiones-vs-code-esenciales","title":"3. Extensiones VS Code esenciales","text":"<ul> <li>ES7+ React snippets: <code>rafce</code> \u2192 componente completo</li> <li>Prettier: Formateo autom\u00e1tico</li> <li>Auto Rename Tag: Renombra tags de apertura/cierre</li> </ul>"},{"location":"sesion_01_01/#4-debugging-en-el-navegador","title":"4. Debugging en el navegador","text":"<ul> <li><code>F12</code>: Abrir DevTools</li> <li><code>React DevTools</code>: Extensi\u00f3n para debugging React</li> </ul>"},{"location":"sesion_01_01/#resumen","title":"\ud83c\udfaf Resumen","text":"<ul> <li>Vite = Velocidad y simplicidad moderna</li> <li>CRA = Todo incluido pero m\u00e1s pesado</li> <li>Ambas son herramientas profesionales v\u00e1lidas</li> <li>La tendencia actual favorece a Vite</li> <li>Puedes migrar de una a otra si es necesario</li> </ul> <p>\u00a1Con cualquiera de las dos herramientas, ya est\u00e1s listo para desarrollar aplicaciones React profesionales!</p>"},{"location":"sesion_02/","title":"\ud83c\udfae Manejo de Estado con <code>useState</code> y Eventos","text":""},{"location":"sesion_02/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>\u00bfQu\u00e9 es el estado y por qu\u00e9 lo necesitamos?</li> <li>Entendiendo useState paso a paso</li> <li>Eventos en React explicados</li> <li>Formularios controlados</li> <li>Comunicaci\u00f3n entre componentes</li> <li>Ejemplos pr\u00e1cticos completos</li> <li>Errores comunes y soluciones</li> <li>Ejercicios guiados</li> </ol>"},{"location":"sesion_02/#que-es-el-estado-y-por-que-lo-necesitamos","title":"\ud83e\udd14 \u00bfQu\u00e9 es el Estado y Por Qu\u00e9 lo Necesitamos?","text":""},{"location":"sesion_02/#el-problema-sin-estado","title":"El problema sin estado","text":"<p>Imagina este componente: <pre><code>function Contador() {\n  let cuenta = 0;\n\n  const incrementar = () =&gt; {\n    cuenta = cuenta + 1;\n    console.log(cuenta); // Muestra 1, 2, 3...\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Cuenta: {cuenta}&lt;/p&gt;  {/* Siempre muestra 0 \ud83d\ude22 */}\n      &lt;button onClick={incrementar}&gt;+1&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></p> <p>\u00bfPor qu\u00e9 no funciona? - La variable <code>cuenta</code> se reinicia en cada render - React no sabe que debe actualizar la UI - No hay conexi\u00f3n entre la variable y lo que se muestra</p>"},{"location":"sesion_02/#la-solucion-estado-con-usestate","title":"La soluci\u00f3n: Estado con useState","text":"<pre><code>import { useState } from 'react';\n\nfunction Contador() {\n  const [cuenta, setCuenta] = useState(0);\n\n  const incrementar = () =&gt; {\n    setCuenta(cuenta + 1); // \u00a1Ahora s\u00ed funciona! \ud83c\udf89\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Cuenta: {cuenta}&lt;/p&gt;\n      &lt;button onClick={incrementar}&gt;+1&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#que-es-el-estado","title":"\u00bfQu\u00e9 es el estado?","text":"<p>El estado es: - \ud83d\udce6 Memoria del componente entre renders - \ud83d\udd04 Reactivo: Cambios causan re-renderizado - \ud83c\udfe0 Local: Cada componente tiene su propio estado - \ud83c\udfaf La fuente de verdad para datos din\u00e1micos</p> <p>Analog\u00eda del mundo real: <pre><code>Estado = La memoria de tu tel\u00e9fono\n- Persiste entre reinicios de pantalla\n- Cuando cambias algo, la pantalla se actualiza\n- Cada app tiene su propia memoria\n</code></pre></p>"},{"location":"sesion_02/#entendiendo-usestate-paso-a-paso","title":"\ud83d\udd27 Entendiendo useState Paso a Paso","text":""},{"location":"sesion_02/#anatomia-de-usestate","title":"Anatom\u00eda de useState","text":"<pre><code>const [valor, setValor] = useState(valorInicial);\n//     \u2191        \u2191                      \u2191\n//  variable  funci\u00f3n            valor por defecto\n//   actual   setter\n</code></pre>"},{"location":"sesion_02/#desglose-completo","title":"Desglose completo","text":"<pre><code>import { useState } from 'react'; // 1. Importar el hook\n\nfunction MiComponente() {\n  // 2. Declarar estado\n  const [nombre, setNombre] = useState(\"Juan\");\n  //      \u2191         \u2191                    \u2191\n  //   getter    setter            valor inicial\n\n  // 3. Leer el estado\n  console.log(nombre); // \"Juan\"\n\n  // 4. Actualizar el estado\n  const cambiarNombre = () =&gt; {\n    setNombre(\"Mar\u00eda\"); // Trigger re-render\n  };\n\n  // 5. Usar en JSX\n  return &lt;h1&gt;Hola {nombre}&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"sesion_02/#tipos-de-datos-en-usestate","title":"Tipos de datos en useState","text":"<pre><code>// 1. String\nconst [texto, setTexto] = useState(\"\");\n\n// 2. N\u00famero\nconst [edad, setEdad] = useState(0);\n\n// 3. Boolean\nconst [activo, setActivo] = useState(false);\n\n// 4. Array\nconst [items, setItems] = useState([]);\n\n// 5. Objeto\nconst [usuario, setUsuario] = useState({\n  nombre: \"\",\n  email: \"\"\n});\n\n// 6. Null/undefined\nconst [dato, setDato] = useState(null);\n</code></pre>"},{"location":"sesion_02/#el-ciclo-de-vida-del-estado","title":"El ciclo de vida del estado","text":"<pre><code>1. Componente se monta \u2192 useState(valorInicial)\n                \u2193\n2. Usuario interact\u00faa \u2192 Evento dispara setter\n                \u2193\n3. setter(nuevoValor) \u2192 React programa re-render\n                \u2193\n4. Componente re-renderiza \u2192 UI actualizada\n                \u2193\n5. Vuelve al paso 2\n</code></pre>"},{"location":"sesion_02/#eventos-en-react-explicados","title":"\ud83c\udfaf Eventos en React Explicados","text":""},{"location":"sesion_02/#eventos-sinteticos-vs-nativos","title":"Eventos sint\u00e9ticos vs nativos","text":"<p>React envuelve los eventos nativos del DOM en \"Synthetic Events\" para: - \u2705 Compatibilidad entre navegadores - \u2705 Mejor rendimiento - \u2705 API consistente</p>"},{"location":"sesion_02/#eventos-mas-comunes","title":"Eventos m\u00e1s comunes","text":""},{"location":"sesion_02/#1-onclick-eventos-de-clic","title":"1. onClick - Eventos de clic","text":"<pre><code>function BotonEjemplo() {\n  // Formas de manejar onClick\n\n  // Forma 1: Funci\u00f3n inline\n  return (\n    &lt;button onClick={() =&gt; console.log(\"Clic!\")}&gt;\n      Clic inline\n    &lt;/button&gt;\n  );\n\n  // Forma 2: Funci\u00f3n definida\n  const manejarClic = () =&gt; {\n    console.log(\"Clic!\");\n  };\n\n  return (\n    &lt;button onClick={manejarClic}&gt;\n      Clic con funci\u00f3n\n    &lt;/button&gt;\n  );\n\n  // Forma 3: Con par\u00e1metros\n  const saludar = (nombre) =&gt; {\n    alert(`Hola ${nombre}`);\n  };\n\n  return (\n    &lt;button onClick={() =&gt; saludar(\"Juan\")}&gt;\n      Saludar\n    &lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#2-onchange-cambios-en-inputs","title":"2. onChange - Cambios en inputs","text":"<pre><code>function InputEjemplo() {\n  const [valor, setValor] = useState(\"\");\n\n  const manejarCambio = (evento) =&gt; {\n    // evento.target = el input\n    // evento.target.value = texto actual\n    setValor(evento.target.value);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        type=\"text\"\n        value={valor}\n        onChange={manejarCambio}\n      /&gt;\n      &lt;p&gt;Escribiste: {valor}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#3-onsubmit-envio-de-formularios","title":"3. onSubmit - Env\u00edo de formularios","text":"<pre><code>function FormularioEjemplo() {\n  const [email, setEmail] = useState(\"\");\n\n  const manejarEnvio = (evento) =&gt; {\n    evento.preventDefault(); // IMPORTANTE!\n    console.log(\"Enviando:\", email);\n  };\n\n  return (\n    &lt;form onSubmit={manejarEnvio}&gt;\n      &lt;input \n        type=\"email\"\n        value={email}\n        onChange={(e) =&gt; setEmail(e.target.value)}\n      /&gt;\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#tabla-completa-de-eventos","title":"Tabla completa de eventos","text":"Evento Uso Ejemplo <code>onClick</code> Clics en elementos <code>&lt;button onClick={fn}&gt;</code> <code>onChange</code> Cambios en inputs <code>&lt;input onChange={fn}&gt;</code> <code>onSubmit</code> Env\u00edo de forms <code>&lt;form onSubmit={fn}&gt;</code> <code>onFocus</code> Elemento recibe foco <code>&lt;input onFocus={fn}&gt;</code> <code>onBlur</code> Elemento pierde foco <code>&lt;input onBlur={fn}&gt;</code> <code>onMouseEnter</code> Mouse entra <code>&lt;div onMouseEnter={fn}&gt;</code> <code>onMouseLeave</code> Mouse sale <code>&lt;div onMouseLeave={fn}&gt;</code> <code>onKeyDown</code> Tecla presionada <code>&lt;input onKeyDown={fn}&gt;</code> <code>onKeyUp</code> Tecla soltada <code>&lt;input onKeyUp={fn}&gt;</code>"},{"location":"sesion_02/#el-objeto-evento","title":"El objeto evento","text":"<pre><code>function EventoDetallado() {\n  const manejarEvento = (evento) =&gt; {\n    console.log({\n      tipo: evento.type,           // \"click\", \"change\", etc.\n      objetivo: evento.target,     // Elemento que dispar\u00f3\n      valor: evento.target.value,  // Para inputs\n      tecla: evento.key,          // Para teclado\n      posX: evento.clientX,       // Para mouse\n      posY: evento.clientY        // Para mouse\n    });\n  };\n\n  return &lt;input onChange={manejarEvento} /&gt;;\n}\n</code></pre>"},{"location":"sesion_02/#formularios-controlados","title":"\ud83d\udcdd Formularios Controlados","text":""},{"location":"sesion_02/#que-es-un-formulario-controlado","title":"\u00bfQu\u00e9 es un formulario controlado?","text":"<p>Un formulario donde React controla el valor de los inputs:</p> <pre><code>// \u274c No controlado (DOM controla)\n&lt;input type=\"text\" /&gt;\n\n// \u2705 Controlado (React controla)\n&lt;input type=\"text\" value={estado} onChange={actualizar} /&gt;\n</code></pre>"},{"location":"sesion_02/#ejemplo-completo-formulario-de-registro","title":"Ejemplo completo: Formulario de registro","text":"<pre><code>function FormularioRegistro() {\n  // Estados para cada campo\n  const [formData, setFormData] = useState({\n    nombre: \"\",\n    email: \"\",\n    password: \"\",\n    pais: \"\",\n    terminos: false\n  });\n\n  // Manejador gen\u00e9rico para todos los campos\n  const manejarCambio = (evento) =&gt; {\n    const { name, value, type, checked } = evento.target;\n\n    setFormData(prevData =&gt; ({\n      ...prevData,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  // Env\u00edo del formulario\n  const manejarEnvio = (evento) =&gt; {\n    evento.preventDefault();\n\n    // Validaci\u00f3n b\u00e1sica\n    if (!formData.nombre || !formData.email) {\n      alert(\"Por favor completa todos los campos\");\n      return;\n    }\n\n    console.log(\"Datos del formulario:\", formData);\n    // Aqu\u00ed enviar\u00edas a tu API\n  };\n\n  return (\n    &lt;form onSubmit={manejarEnvio}&gt;\n      {/* Campo de texto */}\n      &lt;input\n        type=\"text\"\n        name=\"nombre\"\n        placeholder=\"Tu nombre\"\n        value={formData.nombre}\n        onChange={manejarCambio}\n      /&gt;\n\n      {/* Campo email */}\n      &lt;input\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"tu@email.com\"\n        value={formData.email}\n        onChange={manejarCambio}\n      /&gt;\n\n      {/* Campo password */}\n      &lt;input\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"Contrase\u00f1a\"\n        value={formData.password}\n        onChange={manejarCambio}\n      /&gt;\n\n      {/* Select */}\n      &lt;select \n        name=\"pais\" \n        value={formData.pais} \n        onChange={manejarCambio}\n      &gt;\n        &lt;option value=\"\"&gt;Selecciona pa\u00eds&lt;/option&gt;\n        &lt;option value=\"mx\"&gt;M\u00e9xico&lt;/option&gt;\n        &lt;option value=\"es\"&gt;Espa\u00f1a&lt;/option&gt;\n        &lt;option value=\"ar\"&gt;Argentina&lt;/option&gt;\n      &lt;/select&gt;\n\n      {/* Checkbox */}\n      &lt;label&gt;\n        &lt;input\n          type=\"checkbox\"\n          name=\"terminos\"\n          checked={formData.terminos}\n          onChange={manejarCambio}\n        /&gt;\n        Acepto t\u00e9rminos y condiciones\n      &lt;/label&gt;\n\n      &lt;button type=\"submit\"&gt;Registrarse&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#ventajas-de-formularios-controlados","title":"Ventajas de formularios controlados","text":"<ol> <li>Single source of truth: El estado es la \u00fanica fuente</li> <li>Validaci\u00f3n en tiempo real: Puedes validar mientras escriben</li> <li>Formato autom\u00e1tico: Puedes formatear entrada (ej: tel\u00e9fonos)</li> <li>Deshabilitaci\u00f3n condicional: Botones seg\u00fan validaci\u00f3n</li> </ol>"},{"location":"sesion_02/#comunicacion-entre-componentes","title":"\ud83d\udd04 Comunicaci\u00f3n Entre Componentes","text":""},{"location":"sesion_02/#patron-props-down-events-up","title":"Patr\u00f3n: Props down, Events up","text":"<pre><code>        Padre (tiene el estado)\n         \u2193 props        \u2191 eventos\n        Hijo            Hijo\n</code></pre>"},{"location":"sesion_02/#ejemplo-lista-de-tareas-interactiva","title":"Ejemplo: Lista de tareas interactiva","text":"<pre><code>// Componente Padre\nfunction ListaTareas() {\n  const [tareas, setTareas] = useState([\n    { id: 1, texto: \"Aprender React\", completada: false },\n    { id: 2, texto: \"Practicar useState\", completada: false }\n  ]);\n\n  // Funci\u00f3n para marcar tarea como completada\n  const toggleTarea = (id) =&gt; {\n    setTareas(tareas.map(tarea =&gt;\n      tarea.id === id \n        ? { ...tarea, completada: !tarea.completada }\n        : tarea\n    ));\n  };\n\n  // Funci\u00f3n para agregar tarea\n  const agregarTarea = (texto) =&gt; {\n    const nuevaTarea = {\n      id: Date.now(),\n      texto,\n      completada: false\n    };\n    setTareas([...tareas, nuevaTarea]);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Mis Tareas&lt;/h1&gt;\n      &lt;FormularioTarea onAgregar={agregarTarea} /&gt;\n      &lt;ul&gt;\n        {tareas.map(tarea =&gt; (\n          &lt;Tarea\n            key={tarea.id}\n            tarea={tarea}\n            onToggle={toggleTarea}\n          /&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Componente Hijo 1: Formulario\nfunction FormularioTarea({ onAgregar }) {\n  const [texto, setTexto] = useState(\"\");\n\n  const manejarSubmit = (e) =&gt; {\n    e.preventDefault();\n    if (texto.trim()) {\n      onAgregar(texto);\n      setTexto(\"\");\n    }\n  };\n\n  return (\n    &lt;form onSubmit={manejarSubmit}&gt;\n      &lt;input\n        type=\"text\"\n        value={texto}\n        onChange={(e) =&gt; setTexto(e.target.value)}\n        placeholder=\"Nueva tarea...\"\n      /&gt;\n      &lt;button type=\"submit\"&gt;Agregar&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\n// Componente Hijo 2: Tarea individual\nfunction Tarea({ tarea, onToggle }) {\n  return (\n    &lt;li&gt;\n      &lt;label&gt;\n        &lt;input\n          type=\"checkbox\"\n          checked={tarea.completada}\n          onChange={() =&gt; onToggle(tarea.id)}\n        /&gt;\n        &lt;span style={{\n          textDecoration: tarea.completada ? 'line-through' : 'none'\n        }}&gt;\n          {tarea.texto}\n        &lt;/span&gt;\n      &lt;/label&gt;\n    &lt;/li&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#lifting-state-up-paso-a-paso","title":"Lifting State Up - Paso a paso","text":"<p>Situaci\u00f3n: Dos componentes necesitan compartir estado</p> <pre><code>// \u274c MAL: Estado duplicado\nfunction AppMal() {\n  return (\n    &lt;&gt;\n      &lt;Contador1 /&gt; {/* tiene su propio estado */}\n      &lt;Contador2 /&gt; {/* tiene su propio estado */}\n    &lt;/&gt;\n  );\n}\n\n// \u2705 BIEN: Estado elevado\nfunction AppBien() {\n  const [conteoCompartido, setConteoCompartido] = useState(0);\n\n  return (\n    &lt;&gt;\n      &lt;Mostrador cuenta={conteoCompartido} /&gt;\n      &lt;Botones \n        cuenta={conteoCompartido}\n        setCuenta={setConteoCompartido} \n      /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#ejemplos-practicos-completos","title":"\ud83d\udca1 Ejemplos Pr\u00e1cticos Completos","text":""},{"location":"sesion_02/#ejemplo-1-toggle-de-visibilidad","title":"Ejemplo 1: Toggle de visibilidad","text":"<pre><code>function MostrarOcultar() {\n  const [visible, setVisible] = useState(true);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setVisible(!visible)}&gt;\n        {visible ? 'Ocultar' : 'Mostrar'}\n      &lt;/button&gt;\n\n      {visible &amp;&amp; (\n        &lt;div style={{\n          padding: '20px',\n          background: '#f0f0f0',\n          marginTop: '10px'\n        }}&gt;\n          \u00a1Este contenido se puede ocultar!\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#ejemplo-2-contador-con-limites","title":"Ejemplo 2: Contador con l\u00edmites","text":"<pre><code>function ContadorLimitado() {\n  const [contador, setContador] = useState(0);\n  const MIN = 0;\n  const MAX = 10;\n\n  const incrementar = () =&gt; {\n    setContador(prev =&gt; Math.min(prev + 1, MAX));\n  };\n\n  const decrementar = () =&gt; {\n    setContador(prev =&gt; Math.max(prev - 1, MIN));\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Contador: {contador}&lt;/h2&gt;\n      &lt;button \n        onClick={decrementar} \n        disabled={contador === MIN}\n      &gt;\n        -1\n      &lt;/button&gt;\n      &lt;button \n        onClick={incrementar}\n        disabled={contador === MAX}\n      &gt;\n        +1\n      &lt;/button&gt;\n      {contador === MAX &amp;&amp; &lt;p&gt;\u00a1L\u00edmite alcanzado!&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#ejemplo-3-busqueda-en-tiempo-real","title":"Ejemplo 3: B\u00fasqueda en tiempo real","text":"<pre><code>function BuscadorPeliculas() {\n  const [busqueda, setBusqueda] = useState(\"\");\n  const [peliculas] = useState([\n    \"Star Wars\",\n    \"Matrix\",\n    \"Inception\",\n    \"Interstellar\",\n    \"The Dark Knight\"\n  ]);\n\n  const peliculasFiltradas = peliculas.filter(pelicula =&gt;\n    pelicula.toLowerCase().includes(busqueda.toLowerCase())\n  );\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=\"text\"\n        placeholder=\"Buscar pel\u00edcula...\"\n        value={busqueda}\n        onChange={(e) =&gt; setBusqueda(e.target.value)}\n      /&gt;\n\n      &lt;ul&gt;\n        {peliculasFiltradas.length &gt; 0 ? (\n          peliculasFiltradas.map(pelicula =&gt; (\n            &lt;li key={pelicula}&gt;{pelicula}&lt;/li&gt;\n          ))\n        ) : (\n          &lt;li&gt;No se encontraron pel\u00edculas&lt;/li&gt;\n        )}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#errores-comunes-y-soluciones","title":"\u274c Errores Comunes y Soluciones","text":""},{"location":"sesion_02/#error-1-mutar-el-estado-directamente","title":"Error 1: Mutar el estado directamente","text":"<pre><code>// \u274c MAL - Mutaci\u00f3n directa\nconst [user, setUser] = useState({ name: \"Juan\", age: 25 });\n\nconst updateAge = () =&gt; {\n  user.age = 26;        // NO actualiza la UI\n  setUser(user);       // React no detecta cambios\n};\n\n// \u2705 BIEN - Crear nuevo objeto\nconst updateAge = () =&gt; {\n  setUser({\n    ...user,           // Copia propiedades existentes\n    age: 26           // Sobrescribe age\n  });\n};\n</code></pre>"},{"location":"sesion_02/#error-2-cerraduras-obsoletas-stale-closures","title":"Error 2: Cerraduras obsoletas (stale closures)","text":"<pre><code>// \u274c MAL - Usa valor obsoleto\nconst [count, setCount] = useState(0);\n\nconst incrementarVarias = () =&gt; {\n  setCount(count + 1);  // count = 0\n  setCount(count + 1);  // count sigue siendo 0\n  setCount(count + 1);  // count sigue siendo 0\n  // Resultado: count = 1 (no 3)\n};\n\n// \u2705 BIEN - Usa funci\u00f3n updater\nconst incrementarVarias = () =&gt; {\n  setCount(prev =&gt; prev + 1);  // prev = 0, return 1\n  setCount(prev =&gt; prev + 1);  // prev = 1, return 2\n  setCount(prev =&gt; prev + 1);  // prev = 2, return 3\n  // Resultado: count = 3\n};\n</code></pre>"},{"location":"sesion_02/#error-3-usestate-en-condicionales","title":"Error 3: useState en condicionales","text":"<pre><code>// \u274c MAL - Hook condicional\nfunction Componente({ mostrar }) {\n  if (mostrar) {\n    const [valor, setValor] = useState(0); // ERROR!\n  }\n}\n\n// \u2705 BIEN - Hook siempre se ejecuta\nfunction Componente({ mostrar }) {\n  const [valor, setValor] = useState(0);\n\n  if (!mostrar) return null;\n\n  return &lt;div&gt;{valor}&lt;/div&gt;;\n}\n</code></pre>"},{"location":"sesion_02/#error-4-olvidar-preventdefault","title":"Error 4: Olvidar preventDefault","text":"<pre><code>// \u274c MAL - La p\u00e1gina se recarga\n&lt;form onSubmit={handleSubmit}&gt;\n\n// \u2705 BIEN - Prevenir comportamiento por defecto\nconst handleSubmit = (e) =&gt; {\n  e.preventDefault();\n  // Tu l\u00f3gica aqu\u00ed\n};\n</code></pre>"},{"location":"sesion_02/#ejercicios-guiados","title":"\ud83c\udfaf Ejercicios Guiados","text":""},{"location":"sesion_02/#ejercicio-1-contador-simple","title":"Ejercicio 1: Contador simple","text":"<pre><code>// TODO: Completa este componente\nfunction Contador() {\n  // 1. Declara estado para contar\n  const [cuenta, setCuenta] = useState(0);\n\n  // 2. Funci\u00f3n para incrementar\n  const incrementar = () =&gt; {\n    setCuenta(cuenta + 1);\n  };\n\n  // 3. Funci\u00f3n para resetear\n  const resetear = () =&gt; {\n    setCuenta(0);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Cuenta: {cuenta}&lt;/h2&gt;\n      &lt;button onClick={incrementar}&gt;+1&lt;/button&gt;\n      &lt;button onClick={resetear}&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#ejercicio-2-input-controlado","title":"Ejercicio 2: Input controlado","text":"<pre><code>// TODO: Crea un saludo personalizado\nfunction Saludo() {\n  // 1. Estado para el nombre\n  const [nombre, setNombre] = useState(\"\");\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=\"text\"\n        placeholder=\"Tu nombre\"\n        value={nombre}\n        onChange={(e) =&gt; setNombre(e.target.value)}\n      /&gt;\n\n      {nombre &amp;&amp; &lt;h2&gt;\u00a1Hola, {nombre}!&lt;/h2&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#ejercicio-3-lista-dinamica","title":"Ejercicio 3: Lista din\u00e1mica","text":"<pre><code>// TODO: Lista de compras\nfunction ListaCompras() {\n  const [items, setItems] = useState([]);\n  const [nuevoItem, setNuevoItem] = useState(\"\");\n\n  const agregarItem = (e) =&gt; {\n    e.preventDefault();\n    if (nuevoItem.trim()) {\n      setItems([...items, nuevoItem]);\n      setNuevoItem(\"\");\n    }\n  };\n\n  const eliminarItem = (index) =&gt; {\n    setItems(items.filter((_, i) =&gt; i !== index));\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;form onSubmit={agregarItem}&gt;\n        &lt;input\n          value={nuevoItem}\n          onChange={(e) =&gt; setNuevoItem(e.target.value)}\n          placeholder=\"Agregar item...\"\n        /&gt;\n        &lt;button type=\"submit\"&gt;Agregar&lt;/button&gt;\n      &lt;/form&gt;\n\n      &lt;ul&gt;\n        {items.map((item, index) =&gt; (\n          &lt;li key={index}&gt;\n            {item}\n            &lt;button onClick={() =&gt; eliminarItem(index)}&gt;\u274c&lt;/button&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n\n      {items.length === 0 &amp;&amp; &lt;p&gt;Lista vac\u00eda&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#ejercicio-4-componente-completo","title":"Ejercicio 4: Componente completo","text":"<pre><code>// TODO: Sistema de votaci\u00f3n\nfunction SistemaVotacion() {\n  const [opciones] = useState([\n    { id: 1, nombre: \"React\", votos: 0 },\n    { id: 2, nombre: \"Vue\", votos: 0 },\n    { id: 3, nombre: \"Angular\", votos: 0 }\n  ]);\n\n  const [votaciones, setVotaciones] = useState(opciones);\n\n  const votar = (id) =&gt; {\n    setVotaciones(votaciones.map(opcion =&gt;\n      opcion.id === id\n        ? { ...opcion, votos: opcion.votos + 1 }\n        : opcion\n    ));\n  };\n\n  const totalVotos = votaciones.reduce((sum, op) =&gt; sum + op.votos, 0);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;\u00bfCu\u00e1l prefieres?&lt;/h2&gt;\n\n      {votaciones.map(opcion =&gt; (\n        &lt;div key={opcion.id}&gt;\n          &lt;button onClick={() =&gt; votar(opcion.id)}&gt;\n            {opcion.nombre}: {opcion.votos} votos\n          &lt;/button&gt;\n          {totalVotos &gt; 0 &amp;&amp; (\n            &lt;span&gt; ({((opcion.votos / totalVotos) * 100).toFixed(1)}%)&lt;/span&gt;\n          )}\n        &lt;/div&gt;\n      ))}\n\n      &lt;p&gt;Total de votos: {totalVotos}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_02/#resumen-y-mejores-practicas","title":"\ud83d\udcda Resumen y Mejores Pr\u00e1cticas","text":""},{"location":"sesion_02/#lo-que-aprendiste","title":"Lo que aprendiste:","text":"<ol> <li>useState: Hook para manejar estado local</li> <li>Eventos: Sistema unificado de React</li> <li>Formularios controlados: React controla los valores</li> <li>Comunicaci\u00f3n: Props down, events up</li> <li>Patrones comunes: Toggle, contadores, listas</li> </ol>"},{"location":"sesion_02/#mejores-practicas","title":"Mejores pr\u00e1cticas:","text":"<p>\u2705 DO's:</p> <ul> <li>Usa el updater function para estado basado en anterior</li> <li>Mant\u00e9n el estado lo m\u00e1s simple posible</li> <li>Eleva el estado cuando sea compartido</li> <li>Usa formularios controlados</li> <li>Nombra handlers como <code>handleX</code> o <code>onX</code></li> </ul> <p>\u274c DON'Ts:</p> <ul> <li>No mutes el estado directamente</li> <li>No uses hooks condicionalmente</li> <li>No olvides <code>key</code> en listas</li> <li>No olvides <code>preventDefault</code> en forms</li> <li>No sobre-optimices prematuramente</li> </ul>"},{"location":"sesion_03/","title":"Manejo de Estado con <code>useState</code> y Gesti\u00f3n de Eventos en React","text":""},{"location":"sesion_03/#objetivo-de-esta-hora","title":"\ud83c\udfaf Objetivo de esta hora","text":"<p>Aprender a construir componentes interactivos en React utilizando el hook <code>useState</code> para manejar datos din\u00e1micos, y eventos del navegador como <code>onClick</code>, <code>onChange</code> y <code>onSubmit</code> para capturar acciones del usuario. Esta base es esencial para cualquier aplicaci\u00f3n React moderna.</p>"},{"location":"sesion_03/#conceptos-clave","title":"\ud83e\udde0 Conceptos clave","text":"Concepto Descripci\u00f3n <code>useState</code> Hook que permite a los componentes funcionales tener y modificar su propio estado. Estado Datos din\u00e1micos que afectan lo que se muestra en pantalla. Eventos Acciones del usuario que disparan funciones (<code>onClick</code>, <code>onChange</code>, <code>onSubmit</code>). Formularios Entrada de datos del usuario controlada por estado. Comunicaci\u00f3n Paso de funciones entre componentes usando <code>props</code>."},{"location":"sesion_03/#1-declarar-y-actualizar-estado-con-usestate","title":"\ud83d\udcd8 1. Declarar y actualizar estado con <code>useState</code>","text":"<p><code>useState</code> es un hook que se importa desde React y permite a un componente recordar valores entre renderizados.</p> <pre><code>import { useState } from 'react'\n\nfunction Contador() {\n  const [contador, setContador] = useState(0)\n\n  return (\n    &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;\n      Has hecho clic {contador} veces\n    &lt;/button&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_03/#2-formularios-controlados","title":"\ud83d\udcd8 2. Formularios controlados","text":"<pre><code>function Formulario() {\n  const [nombre, setNombre] = useState(\"\")\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault()\n    alert(`Hola, ${nombre}`)\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input\n        type=\"text\"\n        value={nombre}\n        onChange={(e) =&gt; setNombre(e.target.value)}\n        placeholder=\"Escribe tu nombre\"\n      /&gt;\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_03/#3-comunicacion-entre-componentes","title":"\ud83d\udcd8 3. Comunicaci\u00f3n entre componentes","text":"<pre><code>function App() {\n  const [mensaje, setMensaje] = useState(\"\")\n\n  const actualizarMensaje = (nuevo) =&gt; setMensaje(nuevo)\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{mensaje}&lt;/h1&gt;\n      &lt;Entrada onTextoCambio={actualizarMensaje} /&gt;\n    &lt;/div&gt;\n  )\n}\n\nfunction Entrada({ onTextoCambio }) {\n  return (\n    &lt;input\n      type=\"text\"\n      onChange={(e) =&gt; onTextoCambio(e.target.value)}\n      placeholder=\"Escribe algo\"\n    /&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_03/#4-patron-lifting-state-up","title":"\ud83d\udcd8 4. Patr\u00f3n: \"Lifting State Up\"","text":"<p>Cuando varios componentes necesitan compartir datos, se eleva el estado al ancestro com\u00fan. Es un patr\u00f3n com\u00fan cuando un hijo env\u00eda datos al padre para que este actualice su estado.</p>"},{"location":"sesion_03/#ejercicio-propuesto-para-desarrollar-en-vivo","title":"\ud83e\uddea Ejercicio propuesto (para desarrollar en vivo)","text":"<p>Construyamos juntos un mini componente pr\u00e1ctico que aplique lo aprendido:</p>"},{"location":"sesion_03/#requisitos-del-ejercicio","title":"Requisitos del ejercicio:","text":"<ol> <li>Crear un campo de texto y un bot\u00f3n para agregar elementos.</li> <li>Mostrar una lista con los elementos ingresados.</li> <li>Mostrar un mensaje como \u201cNo hay elementos a\u00fan\u201d si la lista est\u00e1 vac\u00eda.</li> </ol>"},{"location":"sesion_03/#codigo-guiado","title":"C\u00f3digo guiado:","text":"<pre><code>import { useState } from 'react'\n\nfunction ListaDinamica() {\n  const [texto, setTexto] = useState(\"\")\n  const [elementos, setElementos] = useState([])\n\n  const agregarElemento = () =&gt; {\n    const valor = texto.trim()\n    if (valor !== \"\") {\n      setElementos([...elementos, valor])\n      setTexto(\"\")\n    }\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Mi Lista&lt;/h2&gt;\n      &lt;input\n        type=\"text\"\n        value={texto}\n        onChange={(e) =&gt; setTexto(e.target.value)}\n        placeholder=\"Agregar elemento\"\n      /&gt;\n      &lt;button onClick={agregarElemento}&gt;Agregar&lt;/button&gt;\n\n      {elementos.length === 0 ? (\n        &lt;p&gt;No hay elementos a\u00fan.&lt;/p&gt;\n      ) : (\n        &lt;ul&gt;\n          {elementos.map((el, index) =&gt; (\n            &lt;li key={index}&gt;{el}&lt;/li&gt;\n          ))}\n        &lt;/ul&gt;\n      )}\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_03/#cierre","title":"\u2705 Cierre","text":"<ul> <li><code>useState</code> permite que React se comporte como una interfaz viva, que cambia con las acciones del usuario.</li> <li>Los eventos capturan estas acciones y permiten manipular el flujo de datos.</li> <li>El siguiente paso es implementar esto en una aplicaci\u00f3n completa de lista de tareas, con interacci\u00f3n real.</li> </ul>"},{"location":"sesion_04/","title":"\ud83c\udfaf Renderizado Condicional, Completar y Eliminar Tareas","text":""},{"location":"sesion_04/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>\u00bfQu\u00e9 vamos a construir?</li> <li>Conceptos fundamentales</li> <li>Marcar tareas como completadas</li> <li>Eliminar tareas</li> <li>Renderizado condicional</li> <li>Implementaci\u00f3n completa paso a paso</li> <li>Patrones y mejores pr\u00e1cticas</li> <li>Casos de uso avanzados</li> <li>Debugging y errores comunes</li> </ol>"},{"location":"sesion_04/#que-vamos-a-construir","title":"\ud83c\udfaf \u00bfQu\u00e9 vamos a construir?","text":""},{"location":"sesion_04/#evolucion-de-nuestra-aplicacion","title":"Evoluci\u00f3n de nuestra aplicaci\u00f3n","text":"<pre><code>Versi\u00f3n anterior:            Nueva versi\u00f3n:\n\u251c\u2500 Ver tareas               \u251c\u2500 Ver tareas\n\u251c\u2500 Agregar tareas           \u251c\u2500 Agregar tareas\n\u251c\u2500 Filtrar tareas           \u251c\u2500 Filtrar tareas\n                            \u251c\u2500 \u2705 Marcar como completadas\n                            \u251c\u2500 \ud83d\uddd1\ufe0f Eliminar tareas\n                            \u2514\u2500 \ud83d\udcdd Mensajes condicionales\n</code></pre>"},{"location":"sesion_04/#vista-previa-del-resultado-final","title":"Vista previa del resultado final","text":"<pre><code>\ud83d\udcdd Lista de Tareas\n\n[Nueva tarea...] [Agregar]\n\n\u25a1 Comprar leche                    \ud83d\uddd1\ufe0f\n\u2611 Estudiar React                   \ud83d\uddd1\ufe0f\n\u25a1 Hacer ejercicio                  \ud83d\uddd1\ufe0f\n\n[Si eliminas todas las tareas:]\n\"\ud83c\udf89 \u00a1No hay tareas pendientes! Disfruta tu d\u00eda libre.\"\n</code></pre>"},{"location":"sesion_04/#nuevas-interacciones","title":"Nuevas interacciones","text":"<ol> <li>Checkbox interactivo: Click para completar/descompletar</li> <li>Bot\u00f3n eliminar: Remueve permanentemente la tarea</li> <li>Feedback visual: Tachado para completadas</li> <li>Mensajes contextuales: Cuando no hay tareas</li> </ol>"},{"location":"sesion_04/#conceptos-fundamentales","title":"\ud83e\udde0 Conceptos Fundamentales","text":""},{"location":"sesion_04/#estado-inmutable-en-react","title":"Estado Inmutable en React","text":""},{"location":"sesion_04/#que-es-la-inmutabilidad","title":"\u00bfQu\u00e9 es la inmutabilidad?","text":"<p>Inmutable = No se puede cambiar directamente</p> <pre><code>// \u274c MUTABLE - Modificaci\u00f3n directa\nconst numeros = [1, 2, 3]\nnumeros.push(4)  // Modifica el array original\n\n// \u2705 INMUTABLE - Crear nueva versi\u00f3n\nconst numeros = [1, 2, 3]\nconst nuevosNumeros = [...numeros, 4]  // Array nuevo\n</code></pre>"},{"location":"sesion_04/#por-que-es-importante-en-react","title":"\u00bfPor qu\u00e9 es importante en React?","text":"<pre><code>// \u274c React NO detecta este cambio\nconst [tareas, setTareas] = useState([...])\ntareas[0].completado = true  // Mutaci\u00f3n directa\nsetTareas(tareas)  // React: \"Es el mismo array, no re-renderizo\"\n\n// \u2705 React S\u00cd detecta este cambio\nsetTareas(tareas.map(t =&gt; \n  t.id === id ? { ...t, completado: true } : t\n))  // Array nuevo, React re-renderiza\n</code></pre>"},{"location":"sesion_04/#metodos-de-array-para-estado-inmutable","title":"M\u00e9todos de Array para Estado Inmutable","text":""},{"location":"sesion_04/#1-map-transformar-elementos","title":"1. map() - Transformar elementos","text":"<pre><code>// Actualizar un elemento espec\u00edfico\nconst actualizado = items.map(item =&gt;\n  item.id === targetId \n    ? { ...item, propiedad: nuevoValor }  // Elemento modificado\n    : item                                 // Elemento sin cambios\n)\n</code></pre>"},{"location":"sesion_04/#2-filter-remover-elementos","title":"2. filter() - Remover elementos","text":"<pre><code>// Eliminar por condici\u00f3n\nconst sinElemento = items.filter(item =&gt; item.id !== targetId)\n</code></pre>"},{"location":"sesion_04/#3-spread-operator-agregar-elementos","title":"3. Spread operator - Agregar elementos","text":"<pre><code>// Agregar al final\nconst conNuevo = [...items, nuevoItem]\n\n// Agregar al principio\nconst conNuevo = [nuevoItem, ...items]\n</code></pre>"},{"location":"sesion_04/#renderizado-condicional","title":"Renderizado Condicional","text":""},{"location":"sesion_04/#formas-de-renderizado-condicional","title":"Formas de renderizado condicional:","text":"<pre><code>// 1. Operador ternario\n{condicion ? &lt;ComponenteA /&gt; : &lt;ComponenteB /&gt;}\n\n// 2. Operador AND (&amp;&amp;)\n{condicion &amp;&amp; &lt;Componente /&gt;}\n\n// 3. Condicional en variable\nconst elemento = condicion ? &lt;A /&gt; : &lt;B /&gt;\nreturn &lt;div&gt;{elemento}&lt;/div&gt;\n\n// 4. Retorno temprano\nif (!datos) return &lt;Cargando /&gt;\nreturn &lt;Lista datos={datos} /&gt;\n</code></pre>"},{"location":"sesion_04/#marcar-tareas-como-completadas","title":"\u2705 Marcar Tareas como Completadas","text":""},{"location":"sesion_04/#implementacion-paso-a-paso","title":"Implementaci\u00f3n paso a paso","text":""},{"location":"sesion_04/#1-funcion-toggletarea-en-appjsx","title":"1. Funci\u00f3n toggleTarea en App.jsx","text":"<pre><code>const toggleTarea = (id) =&gt; {\n  setTareas(tareas.map(tarea =&gt;\n    tarea.id === id \n      ? { ...tarea, completado: !tarea.completado }\n      : tarea\n  ))\n}\n</code></pre> <p>Desglose l\u00ednea por l\u00ednea:</p> <pre><code>const toggleTarea = (id) =&gt; {\n  // 1. Usamos map para crear un nuevo array\n  setTareas(tareas.map(tarea =&gt; {\n    // 2. Para cada tarea, verificamos si es la seleccionada\n    if (tarea.id === id) {\n      // 3. Si es la tarea objetivo, creamos una copia\n      return {\n        ...tarea,                    // Copiamos todas las propiedades\n        completado: !tarea.completado // Invertimos el estado\n      }\n    } else {\n      // 4. Si no es la tarea objetivo, la devolvemos sin cambios\n      return tarea\n    }\n  }))\n}\n</code></pre>"},{"location":"sesion_04/#2-version-corta-con-ternario","title":"2. Versi\u00f3n corta con ternario","text":"<pre><code>const toggleTarea = (id) =&gt; {\n  setTareas(tareas.map(t =&gt;\n    t.id === id ? { ...t, completado: !t.completado } : t\n  ))\n}\n</code></pre>"},{"location":"sesion_04/#visualizacion-del-proceso","title":"Visualizaci\u00f3n del proceso","text":"<pre><code>ANTES de toggleTarea(2):\n[\n  { id: 1, titulo: \"A\", completado: false },\n  { id: 2, titulo: \"B\", completado: false }, \u2190 Target\n  { id: 3, titulo: \"C\", completado: true }\n]\n\nDESPU\u00c9S de toggleTarea(2):\n[\n  { id: 1, titulo: \"A\", completado: false },\n  { id: 2, titulo: \"B\", completado: true },  \u2190 Cambiado\n  { id: 3, titulo: \"C\", completado: true }\n]\n</code></pre>"},{"location":"sesion_04/#componente-taskitem-actualizado","title":"Componente TaskItem actualizado","text":"<pre><code>function TaskItem({ id, titulo, completado, onToggle, onDelete }) {\n  return (\n    &lt;li style={{ \n      display: 'flex', \n      alignItems: 'center',\n      gap: '0.5rem',\n      padding: '0.5rem',\n      borderBottom: '1px solid #eee'\n    }}&gt;\n      {/* Checkbox para completar */}\n      &lt;input\n        type=\"checkbox\"\n        checked={completado}\n        onChange={() =&gt; onToggle(id)}\n        style={{ cursor: 'pointer' }}\n      /&gt;\n\n      {/* T\u00edtulo con estilo condicional */}\n      &lt;span style={{ \n        flex: 1,\n        textDecoration: completado ? 'line-through' : 'none',\n        color: completado ? '#888' : '#000',\n        transition: 'all 0.3s ease'\n      }}&gt;\n        {titulo}\n      &lt;/span&gt;\n\n      {/* Bot\u00f3n eliminar */}\n      &lt;button \n        onClick={() =&gt; onDelete(id)}\n        style={{\n          background: 'none',\n          border: 'none',\n          fontSize: '1.2rem',\n          cursor: 'pointer',\n          opacity: 0.7,\n          transition: 'opacity 0.2s'\n        }}\n        onMouseEnter={(e) =&gt; e.target.style.opacity = 1}\n        onMouseLeave={(e) =&gt; e.target.style.opacity = 0.7}\n      &gt;\n        \ud83d\uddd1\ufe0f\n      &lt;/button&gt;\n    &lt;/li&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_04/#eliminar-tareas","title":"\ud83d\uddd1\ufe0f Eliminar Tareas","text":""},{"location":"sesion_04/#implementacion-de-eliminartarea","title":"Implementaci\u00f3n de eliminarTarea","text":"<pre><code>const eliminarTarea = (id) =&gt; {\n  setTareas(tareas.filter(tarea =&gt; tarea.id !== id))\n}\n</code></pre> <p>Desglose del proceso:</p> <pre><code>// Versi\u00f3n expandida para claridad\nconst eliminarTarea = (id) =&gt; {\n  // filter crea un nuevo array con elementos que cumplen la condici\u00f3n\n  const tareasRestantes = tareas.filter(tarea =&gt; {\n    // Mantener solo si el ID NO coincide\n    return tarea.id !== id\n  })\n\n  setTareas(tareasRestantes)\n}\n</code></pre>"},{"location":"sesion_04/#visualizacion-del-filtrado","title":"Visualizaci\u00f3n del filtrado","text":"<pre><code>ANTES de eliminarTarea(2):\n[\n  { id: 1, titulo: \"A\" },\n  { id: 2, titulo: \"B\" }, \u2190 A eliminar\n  { id: 3, titulo: \"C\" }\n]\n\nfilter(t =&gt; t.id !== 2):\n- { id: 1 } !== 2 ? \u2705 Mantener\n- { id: 2 } !== 2 ? \u274c Eliminar\n- { id: 3 } !== 2 ? \u2705 Mantener\n\nDESPU\u00c9S:\n[\n  { id: 1, titulo: \"A\" },\n  { id: 3, titulo: \"C\" }\n]\n</code></pre>"},{"location":"sesion_04/#agregar-confirmacion","title":"Agregar confirmaci\u00f3n","text":"<pre><code>const eliminarTarea = (id) =&gt; {\n  // Encontrar la tarea para mostrar su t\u00edtulo\n  const tarea = tareas.find(t =&gt; t.id === id)\n\n  if (window.confirm(`\u00bfEliminar \"${tarea.titulo}\"?`)) {\n    setTareas(tareas.filter(t =&gt; t.id !== id))\n  }\n}\n</code></pre>"},{"location":"sesion_04/#version-con-animacion-de-salida","title":"Versi\u00f3n con animaci\u00f3n de salida","text":"<pre><code>const eliminarTarea = (id) =&gt; {\n  // Marcar como \"elimin\u00e1ndose\"\n  setTareas(tareas.map(t =&gt;\n    t.id === id ? { ...t, eliminando: true } : t\n  ))\n\n  // Eliminar despu\u00e9s de la animaci\u00f3n\n  setTimeout(() =&gt; {\n    setTareas(prev =&gt; prev.filter(t =&gt; t.id !== id))\n  }, 300)\n}\n\n// En TaskItem\n&lt;li style={{\n  opacity: tarea.eliminando ? 0 : 1,\n  transform: tarea.eliminando ? 'translateX(-100%)' : 'none',\n  transition: 'all 0.3s ease'\n}}&gt;\n</code></pre>"},{"location":"sesion_04/#renderizado-condicional_1","title":"\ud83c\udfa8 Renderizado Condicional","text":""},{"location":"sesion_04/#casos-de-uso-en-nuestra-app","title":"Casos de uso en nuestra app","text":""},{"location":"sesion_04/#1-lista-vacia-vs-con-tareas","title":"1. Lista vac\u00eda vs con tareas","text":"<pre><code>function App() {\n  // ... estado y funciones\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\ud83d\udcdd Lista de Tareas&lt;/h1&gt;\n      &lt;TaskForm onAdd={agregarTarea} /&gt;\n\n      {tareas.length === 0 ? (\n        &lt;div style={{\n          textAlign: 'center',\n          padding: '2rem',\n          color: '#666'\n        }}&gt;\n          &lt;p style={{ fontSize: '1.5rem' }}&gt;\ud83c\udf89&lt;/p&gt;\n          &lt;p&gt;\u00a1No hay tareas pendientes!&lt;/p&gt;\n          &lt;p&gt;Disfruta tu d\u00eda libre o agrega una nueva tarea.&lt;/p&gt;\n        &lt;/div&gt;\n      ) : (\n        &lt;ul&gt;\n          {tareas.map(t =&gt; (\n            &lt;TaskItem\n              key={t.id}\n              {...t}\n              onToggle={toggleTarea}\n              onDelete={eliminarTarea}\n            /&gt;\n          ))}\n        &lt;/ul&gt;\n      )}\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_04/#2-mensaje-segun-el-filtro-activo","title":"2. Mensaje seg\u00fan el filtro activo","text":"<pre><code>// Diferentes mensajes seg\u00fan contexto\nconst mensajeVacio = () =&gt; {\n  if (busqueda) {\n    return `No se encontraron tareas con \"${busqueda}\"`\n  }\n  if (filtroActivo === 'completadas') {\n    return \"No hay tareas completadas a\u00fan\"\n  }\n  if (filtroActivo === 'pendientes') {\n    return \"\u00a1Felicidades! No tienes tareas pendientes\"\n  }\n  return \"No hay tareas. \u00a1Agrega una!\"\n}\n\n// Uso\n{tareasFiltradas.length === 0 &amp;&amp; (\n  &lt;p&gt;{mensajeVacio()}&lt;/p&gt;\n)}\n</code></pre>"},{"location":"sesion_04/#3-mostrarocultar-acciones","title":"3. Mostrar/ocultar acciones","text":"<pre><code>function TaskItem({ id, titulo, completado, onToggle, onDelete }) {\n  const [mostrarAcciones, setMostrarAcciones] = useState(false)\n\n  return (\n    &lt;li \n      onMouseEnter={() =&gt; setMostrarAcciones(true)}\n      onMouseLeave={() =&gt; setMostrarAcciones(false)}\n    &gt;\n      &lt;input type=\"checkbox\" checked={completado} onChange={() =&gt; onToggle(id)} /&gt;\n      &lt;span&gt;{titulo}&lt;/span&gt;\n\n      {/* Bot\u00f3n eliminar solo al hover */}\n      {mostrarAcciones &amp;&amp; (\n        &lt;button onClick={() =&gt; onDelete(id)}&gt;\ud83d\uddd1\ufe0f&lt;/button&gt;\n      )}\n    &lt;/li&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_04/#patrones-de-renderizado-condicional","title":"Patrones de renderizado condicional","text":""},{"location":"sesion_04/#1-con-operador-ternario","title":"1. Con operador ternario","text":"<pre><code>{condicion ? &lt;ComponenteA /&gt; : &lt;ComponenteB /&gt;}\n</code></pre>"},{"location":"sesion_04/#2-con-and-logico","title":"2. Con AND l\u00f3gico","text":"<pre><code>{condicion &amp;&amp; &lt;Componente /&gt;}\n</code></pre>"},{"location":"sesion_04/#3-con-switchcase","title":"3. Con switch/case","text":"<pre><code>const renderizarEstado = (estado) =&gt; {\n  switch(estado) {\n    case 'cargando':\n      return &lt;Spinner /&gt;\n    case 'error':\n      return &lt;Error /&gt;\n    case 'exito':\n      return &lt;Lista /&gt;\n    default:\n      return null\n  }\n}\n</code></pre>"},{"location":"sesion_04/#4-con-objeto-de-componentes","title":"4. Con objeto de componentes","text":"<pre><code>const componentes = {\n  cargando: &lt;Spinner /&gt;,\n  error: &lt;Error /&gt;,\n  exito: &lt;Lista /&gt;\n}\n\nreturn componentes[estado] || null\n</code></pre>"},{"location":"sesion_04/#implementacion-completa-paso-a-paso","title":"\ud83d\udee0\ufe0f Implementaci\u00f3n Completa Paso a Paso","text":""},{"location":"sesion_04/#appjsx-completo","title":"App.jsx completo","text":"<pre><code>import { useState } from 'react'\nimport TaskForm from './components/TaskForm'\nimport TaskItem from './components/TaskItem'\nimport TaskFilter from './components/TaskFilter'\n\nfunction App() {\n  // Estados\n  const [tareas, setTareas] = useState([\n    { id: 1, titulo: \"Aprender React\", completado: false },\n    { id: 2, titulo: \"Crear una app\", completado: false }\n  ])\n  const [filtro, setFiltro] = useState('todas') // 'todas', 'pendientes', 'completadas'\n\n  // Agregar tarea\n  const agregarTarea = (titulo) =&gt; {\n    const nuevaTarea = {\n      id: Date.now(),\n      titulo,\n      completado: false\n    }\n    setTareas([...tareas, nuevaTarea])\n  }\n\n  // Toggle completado\n  const toggleTarea = (id) =&gt; {\n    setTareas(tareas.map(tarea =&gt;\n      tarea.id === id \n        ? { ...tarea, completado: !tarea.completado }\n        : tarea\n    ))\n  }\n\n  // Eliminar tarea\n  const eliminarTarea = (id) =&gt; {\n    const tarea = tareas.find(t =&gt; t.id === id)\n    if (window.confirm(`\u00bfEliminar \"${tarea.titulo}\"?`)) {\n      setTareas(tareas.filter(t =&gt; t.id !== id))\n    }\n  }\n\n  // Filtrar tareas\n  const tareasFiltradas = tareas.filter(tarea =&gt; {\n    if (filtro === 'todas') return true\n    if (filtro === 'pendientes') return !tarea.completado\n    if (filtro === 'completadas') return tarea.completado\n    return true\n  })\n\n  // Contadores\n  const stats = {\n    total: tareas.length,\n    pendientes: tareas.filter(t =&gt; !t.completado).length,\n    completadas: tareas.filter(t =&gt; t.completado).length\n  }\n\n  return (\n    &lt;div style={{ maxWidth: '600px', margin: '0 auto', padding: '20px' }}&gt;\n      &lt;h1&gt;\ud83d\udcdd Lista de Tareas&lt;/h1&gt;\n\n      {/* Estad\u00edsticas */}\n      &lt;div style={{ \n        background: '#f0f0f0', \n        padding: '10px', \n        borderRadius: '5px',\n        marginBottom: '20px'\n      }}&gt;\n        Total: {stats.total} | \n        Pendientes: {stats.pendientes} | \n        Completadas: {stats.completadas}\n      &lt;/div&gt;\n\n      {/* Formulario */}\n      &lt;TaskForm onAdd={agregarTarea} /&gt;\n\n      {/* Filtros */}\n      &lt;TaskFilter filtroActual={filtro} onCambiar={setFiltro} /&gt;\n\n      {/* Lista o mensaje vac\u00edo */}\n      {tareasFiltradas.length === 0 ? (\n        &lt;div style={{\n          textAlign: 'center',\n          padding: '40px',\n          color: '#666'\n        }}&gt;\n          {filtro === 'todas' &amp;&amp; stats.total === 0 &amp;&amp; (\n            &lt;&gt;\n              &lt;p style={{ fontSize: '3rem', margin: 0 }}&gt;\ud83d\udccb&lt;/p&gt;\n              &lt;p&gt;No hay tareas a\u00fan.&lt;/p&gt;\n              &lt;p&gt;\u00a1Agrega tu primera tarea!&lt;/p&gt;\n            &lt;/&gt;\n          )}\n          {filtro === 'pendientes' &amp;&amp; stats.pendientes === 0 &amp;&amp; (\n            &lt;&gt;\n              &lt;p style={{ fontSize: '3rem', margin: 0 }}&gt;\ud83c\udf89&lt;/p&gt;\n              &lt;p&gt;\u00a1No hay tareas pendientes!&lt;/p&gt;\n              &lt;p&gt;Disfruta tu tiempo libre.&lt;/p&gt;\n            &lt;/&gt;\n          )}\n          {filtro === 'completadas' &amp;&amp; stats.completadas === 0 &amp;&amp; (\n            &lt;&gt;\n              &lt;p style={{ fontSize: '3rem', margin: 0 }}&gt;\ud83d\udcaa&lt;/p&gt;\n              &lt;p&gt;No hay tareas completadas a\u00fan.&lt;/p&gt;\n              &lt;p&gt;\u00a1Ponte en marcha!&lt;/p&gt;\n            &lt;/&gt;\n          )}\n        &lt;/div&gt;\n      ) : (\n        &lt;ul style={{ listStyle: 'none', padding: 0 }}&gt;\n          {tareasFiltradas.map(tarea =&gt; (\n            &lt;TaskItem\n              key={tarea.id}\n              {...tarea}\n              onToggle={toggleTarea}\n              onDelete={eliminarTarea}\n            /&gt;\n          ))}\n        &lt;/ul&gt;\n      )}\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre>"},{"location":"sesion_04/#patrones-y-mejores-practicas","title":"\ud83c\udfa8 Patrones y Mejores Pr\u00e1cticas","text":""},{"location":"sesion_04/#1-funciones-puras-para-actualizaciones","title":"1. Funciones puras para actualizaciones","text":"<pre><code>// \u2705 BIEN - Funci\u00f3n pura, predecible\nconst toggleTarea = (tareas, id) =&gt; {\n  return tareas.map(t =&gt; \n    t.id === id ? { ...t, completado: !t.completado } : t\n  )\n}\n\n// Uso\nsetTareas(prevTareas =&gt; toggleTarea(prevTareas, id))\n</code></pre>"},{"location":"sesion_04/#2-composicion-de-actualizaciones","title":"2. Composici\u00f3n de actualizaciones","text":"<pre><code>// M\u00faltiples actualizaciones en una\nconst completarTodas = () =&gt; {\n  setTareas(tareas.map(t =&gt; ({ ...t, completado: true })))\n}\n\nconst eliminarCompletadas = () =&gt; {\n  setTareas(tareas.filter(t =&gt; !t.completado))\n}\n\nconst invertirTodas = () =&gt; {\n  setTareas(tareas.map(t =&gt; ({ ...t, completado: !t.completado })))\n}\n</code></pre>"},{"location":"sesion_04/#3-optimizacion-con-usecallback","title":"3. Optimizaci\u00f3n con useCallback","text":"<pre><code>import { useState, useCallback } from 'react'\n\nfunction App() {\n  const [tareas, setTareas] = useState([])\n\n  // Memorizar funciones para evitar re-creaciones\n  const toggleTarea = useCallback((id) =&gt; {\n    setTareas(prev =&gt; prev.map(t =&gt;\n      t.id === id ? { ...t, completado: !t.completado } : t\n    ))\n  }, [])\n\n  const eliminarTarea = useCallback((id) =&gt; {\n    setTareas(prev =&gt; prev.filter(t =&gt; t.id !== id))\n  }, [])\n\n  // ...\n}\n</code></pre>"},{"location":"sesion_04/#4-separacion-de-logica","title":"4. Separaci\u00f3n de l\u00f3gica","text":"<pre><code>// utils/tareas.js\nexport const toggleTarea = (tareas, id) =&gt; {\n  return tareas.map(t =&gt; \n    t.id === id ? { ...t, completado: !t.completado } : t\n  )\n}\n\nexport const eliminarTarea = (tareas, id) =&gt; {\n  return tareas.filter(t =&gt; t.id !== id)\n}\n\nexport const filtrarTareas = (tareas, filtro) =&gt; {\n  switch(filtro) {\n    case 'pendientes':\n      return tareas.filter(t =&gt; !t.completado)\n    case 'completadas':\n      return tareas.filter(t =&gt; t.completado)\n    default:\n      return tareas\n  }\n}\n\n// App.jsx\nimport { toggleTarea, eliminarTarea, filtrarTareas } from './utils/tareas'\n\nfunction App() {\n  const handleToggle = (id) =&gt; {\n    setTareas(prev =&gt; toggleTarea(prev, id))\n  }\n  // ...\n}\n</code></pre>"},{"location":"sesion_04/#casos-de-uso-avanzados","title":"\ud83d\ude80 Casos de Uso Avanzados","text":""},{"location":"sesion_04/#1-deshacer-ultima-accion","title":"1. Deshacer \u00faltima acci\u00f3n","text":"<pre><code>function useUndoableTareas(inicial) {\n  const [tareas, setTareas] = useState(inicial)\n  const [historia, setHistoria] = useState([inicial])\n  const [indice, setIndice] = useState(0)\n\n  const actualizarTareas = (nuevasTareas) =&gt; {\n    const nuevaHistoria = historia.slice(0, indice + 1)\n    nuevaHistoria.push(nuevasTareas)\n\n    setHistoria(nuevaHistoria)\n    setIndice(nuevaHistoria.length - 1)\n    setTareas(nuevasTareas)\n  }\n\n  const deshacer = () =&gt; {\n    if (indice &gt; 0) {\n      setIndice(indice - 1)\n      setTareas(historia[indice - 1])\n    }\n  }\n\n  const rehacer = () =&gt; {\n    if (indice &lt; historia.length - 1) {\n      setIndice(indice + 1)\n      setTareas(historia[indice + 1])\n    }\n  }\n\n  return {\n    tareas,\n    actualizarTareas,\n    deshacer,\n    rehacer,\n    puedeDeshacer: indice &gt; 0,\n    puedeRehacer: indice &lt; historia.length - 1\n  }\n}\n</code></pre>"},{"location":"sesion_04/#2-arrastrar-para-reordenar","title":"2. Arrastrar para reordenar","text":"<pre><code>function TaskItem({ tarea, index, moverTarea }) {\n  const [arrastrando, setArrastrando] = useState(false)\n\n  const handleDragStart = (e) =&gt; {\n    e.dataTransfer.effectAllowed = 'move'\n    e.dataTransfer.setData('taskIndex', index)\n    setArrastrando(true)\n  }\n\n  const handleDragEnd = () =&gt; {\n    setArrastrando(false)\n  }\n\n  const handleDragOver = (e) =&gt; {\n    e.preventDefault()\n  }\n\n  const handleDrop = (e) =&gt; {\n    e.preventDefault()\n    const dragIndex = parseInt(e.dataTransfer.getData('taskIndex'))\n    if (dragIndex !== index) {\n      moverTarea(dragIndex, index)\n    }\n  }\n\n  return (\n    &lt;li\n      draggable\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      style={{\n        opacity: arrastrando ? 0.5 : 1,\n        cursor: 'move'\n      }}\n    &gt;\n      {/* contenido */}\n    &lt;/li&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_04/#3-edicion-inline","title":"3. Edici\u00f3n inline","text":"<pre><code>function TaskItem({ tarea, onUpdate }) {\n  const [editando, setEditando] = useState(false)\n  const [nuevoTitulo, setNuevoTitulo] = useState(tarea.titulo)\n\n  const guardar = () =&gt; {\n    if (nuevoTitulo.trim()) {\n      onUpdate(tarea.id, { titulo: nuevoTitulo })\n      setEditando(false)\n    }\n  }\n\n  const cancelar = () =&gt; {\n    setNuevoTitulo(tarea.titulo)\n    setEditando(false)\n  }\n\n  if (editando) {\n    return (\n      &lt;li&gt;\n        &lt;input\n          value={nuevoTitulo}\n          onChange={(e) =&gt; setNuevoTitulo(e.target.value)}\n          onKeyDown={(e) =&gt; {\n            if (e.key === 'Enter') guardar()\n            if (e.key === 'Escape') cancelar()\n          }}\n          autoFocus\n        /&gt;\n        &lt;button onClick={guardar}&gt;\u2713&lt;/button&gt;\n        &lt;button onClick={cancelar}&gt;\u2717&lt;/button&gt;\n      &lt;/li&gt;\n    )\n  }\n\n  return (\n    &lt;li onDoubleClick={() =&gt; setEditando(true)}&gt;\n      {/* contenido normal */}\n    &lt;/li&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_04/#debugging-y-errores-comunes","title":"\ud83d\udc1b Debugging y Errores Comunes","text":""},{"location":"sesion_04/#error-1-mutacion-del-estado","title":"Error 1: Mutaci\u00f3n del estado","text":"<pre><code>// \u274c MAL - No actualiza la UI\nconst toggleTarea = (id) =&gt; {\n  const tarea = tareas.find(t =&gt; t.id === id)\n  tarea.completado = !tarea.completado  // Mutaci\u00f3n!\n  setTareas(tareas)  // Mismo array, no re-renderiza\n}\n\n// \u2705 BIEN - Crea nuevo array\nconst toggleTarea = (id) =&gt; {\n  setTareas(tareas.map(t =&gt;\n    t.id === id ? { ...t, completado: !t.completado } : t\n  ))\n}\n</code></pre>"},{"location":"sesion_04/#error-2-perdida-de-referencia-en-closures","title":"Error 2: P\u00e9rdida de referencia en closures","text":"<pre><code>// \u274c MAL - tareas puede estar desactualizado\nconst eliminarMultiples = (ids) =&gt; {\n  ids.forEach(id =&gt; {\n    setTareas(tareas.filter(t =&gt; t.id !== id))  // tareas viejo!\n  })\n}\n\n// \u2705 BIEN - Usar funci\u00f3n updater\nconst eliminarMultiples = (ids) =&gt; {\n  setTareas(prevTareas =&gt; \n    prevTareas.filter(t =&gt; !ids.includes(t.id))\n  )\n}\n</code></pre>"},{"location":"sesion_04/#error-3-keys-incorrectas-en-listas","title":"Error 3: Keys incorrectas en listas","text":"<pre><code>// \u274c MAL - \u00cdndice como key\n{tareas.map((tarea, index) =&gt; (\n  &lt;TaskItem key={index} ... /&gt;  // Problemas al reordenar!\n))}\n\n// \u2705 BIEN - ID \u00fanico como key\n{tareas.map(tarea =&gt; (\n  &lt;TaskItem key={tarea.id} ... /&gt;\n))}\n</code></pre>"},{"location":"sesion_04/#error-4-renderizado-condicional-incorrecto","title":"Error 4: Renderizado condicional incorrecto","text":"<pre><code>// \u274c MAL - Muestra \"0\" cuando no hay tareas\n{tareas.length &amp;&amp; &lt;Lista tareas={tareas} /&gt;}\n\n// \u2705 BIEN - Convierte a boolean\n{tareas.length &gt; 0 &amp;&amp; &lt;Lista tareas={tareas} /&gt;}\n\n// \u2705 MEJOR - Usa ternario para casos completos\n{tareas.length &gt; 0 ? (\n  &lt;Lista tareas={tareas} /&gt;\n) : (\n  &lt;MensajeVacio /&gt;\n)}\n</code></pre>"},{"location":"sesion_04/#resumen-y-conclusiones","title":"\ud83c\udfaf Resumen y Conclusiones","text":""},{"location":"sesion_04/#lo-que-construimos","title":"Lo que construimos:","text":"<ol> <li>Toggle de completado: Cambio de estado inmutable</li> <li>Eliminaci\u00f3n de tareas: Con confirmaci\u00f3n opcional</li> <li>Renderizado condicional: Mensajes contextuales</li> <li>UI interactiva completa: CRUD funcional</li> </ol>"},{"location":"sesion_04/#conceptos-dominados","title":"Conceptos dominados:","text":"<ul> <li>\u2705 Inmutabilidad: map, filter, spread operator</li> <li>\u2705 Eventos complejos: onChange, onClick</li> <li>\u2705 Estado derivado: Contadores, filtros</li> <li>\u2705 Renderizado condicional: Ternarios, AND l\u00f3gico</li> <li>\u2705 Composici\u00f3n: Componentes peque\u00f1os y enfocados</li> <li>\u2705 UX mejorada: Feedback visual, confirmaciones</li> </ul>"},{"location":"sesion_04/#habilidades-desarrolladas","title":"Habilidades desarrolladas:","text":"<ol> <li>Pensar inmutablemente: Nuevas versiones, no mutaciones</li> <li>Manejar interacciones: Click, hover, drag</li> <li>Dar feedback: Visual y textual</li> <li>Escribir c\u00f3digo mantenible: Funciones puras, separaci\u00f3n</li> </ol>"},{"location":"sesion_05/","title":"\ud83c\udfaf Props en React","text":""},{"location":"sesion_05/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>\u00bfQu\u00e9 son las Props y por qu\u00e9 las necesitamos?</li> <li>Anatom\u00eda de las Props</li> <li>Flujo de datos unidireccional</li> <li>Tipos de datos en Props</li> <li>Desestructuraci\u00f3n de Props</li> <li>Props por defecto</li> <li>Validaci\u00f3n con PropTypes</li> <li>Patrones comunes con Props</li> <li>Props vs Estado</li> <li>Errores comunes y debugging</li> <li>Ejercicios pr\u00e1cticos</li> </ol>"},{"location":"sesion_05/#que-son-las-props-y-por-que-las-necesitamos","title":"\ud83e\udd14 \u00bfQu\u00e9 son las Props y por qu\u00e9 las necesitamos?","text":""},{"location":"sesion_05/#el-problema-sin-props","title":"El problema sin Props","text":"<p>Imagina que quieres mostrar informaci\u00f3n de usuarios:</p> <pre><code>// \u274c SIN PROPS - C\u00f3digo duplicado y no reutilizable\nfunction App() {\n  return (\n    &lt;div&gt;\n      {/* Usuario 1 */}\n      &lt;div&gt;\n        &lt;h2&gt;Juan P\u00e9rez&lt;/h2&gt;\n        &lt;p&gt;juan@email.com&lt;/p&gt;\n        &lt;p&gt;28 a\u00f1os&lt;/p&gt;\n      &lt;/div&gt;\n\n      {/* Usuario 2 */}\n      &lt;div&gt;\n        &lt;h2&gt;Mar\u00eda Garc\u00eda&lt;/h2&gt;\n        &lt;p&gt;maria@email.com&lt;/p&gt;\n        &lt;p&gt;32 a\u00f1os&lt;/p&gt;\n      &lt;/div&gt;\n\n      {/* Usuario 3... copiar y pegar otra vez \ud83d\ude22 */}\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#la-solucion-con-props","title":"La soluci\u00f3n con Props","text":"<pre><code>// \u2705 CON PROPS - Componente reutilizable\nfunction UsuarioCard({ nombre, email, edad }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;{email}&lt;/p&gt;\n      &lt;p&gt;{edad} a\u00f1os&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;UsuarioCard nombre=\"Juan P\u00e9rez\" email=\"juan@email.com\" edad={28} /&gt;\n      &lt;UsuarioCard nombre=\"Mar\u00eda Garc\u00eda\" email=\"maria@email.com\" edad={32} /&gt;\n      &lt;UsuarioCard nombre=\"Carlos L\u00f3pez\" email=\"carlos@email.com\" edad={25} /&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#que-son-las-props","title":"\u00bfQu\u00e9 son las Props?","text":"<p>Props = Properties (Propiedades)</p> <p>Las props son:</p> <ul> <li>\ud83d\udce8 Mensajes del componente padre al hijo</li> <li>\ud83c\udf81 Paquetes de datos que viajan hacia abajo</li> <li>\ud83d\udd12 Inmutables - El hijo no puede modificarlas</li> <li>\ud83c\udfaf La forma de hacer componentes configurables</li> </ul>"},{"location":"sesion_05/#analogia-del-mundo-real","title":"Analog\u00eda del mundo real","text":"<pre><code>Props = Par\u00e1metros de una funci\u00f3n\n\nfunction saludar(nombre) {        // nombre es como una prop\n  return `Hola ${nombre}`\n}\n\nsaludar(\"Juan\")                   // \"Juan\" es el valor de la prop\nsaludar(\"Mar\u00eda\")                  // Reutilizable con diferentes valores\n</code></pre>"},{"location":"sesion_05/#anatomia-de-las-props","title":"\ud83d\udd27 Anatom\u00eda de las Props","text":""},{"location":"sesion_05/#estructura-basica","title":"Estructura b\u00e1sica","text":"<pre><code>// COMPONENTE HIJO - Recibe props\nfunction Saludo(props) {\n  return &lt;h1&gt;Hola {props.nombre}&lt;/h1&gt;\n}\n\n// COMPONENTE PADRE - Env\u00eda props\nfunction App() {\n  return &lt;Saludo nombre=\"Juan\" /&gt;\n}\n</code></pre>"},{"location":"sesion_05/#desglose-del-proceso","title":"Desglose del proceso","text":"<pre><code>1. Padre define el valor:    nombre=\"Juan\"\n                                \u2193\n2. React empaqueta:         props = { nombre: \"Juan\" }\n                                \u2193\n3. Hijo recibe:            function Saludo(props)\n                                \u2193\n4. Hijo usa:               props.nombre \u2192 \"Juan\"\n</code></pre>"},{"location":"sesion_05/#props-como-objeto","title":"Props como objeto","text":"<p>Las props SIEMPRE son un objeto:</p> <pre><code>// Lo que escribes\n&lt;Saludo nombre=\"Juan\" edad={25} activo={true} /&gt;\n\n// Lo que React crea\nprops = {\n  nombre: \"Juan\",\n  edad: 25,\n  activo: true\n}\n\n// Lo que el componente recibe\nfunction Saludo(props) {\n  console.log(props)\n  // { nombre: \"Juan\", edad: 25, activo: true }\n}\n</code></pre>"},{"location":"sesion_05/#flujo-de-datos-unidireccional","title":"\ud83d\udd04 Flujo de Datos Unidireccional","text":""},{"location":"sesion_05/#direccion-del-flujo","title":"Direcci\u00f3n del flujo","text":"<pre><code>        PADRE\n          \u2193 props\n        HIJO\n          \u2193 props\n      NIETO\n</code></pre> <p>IMPORTANTE: Los datos solo fluyen hacia abajo, nunca hacia arriba directamente.</p>"},{"location":"sesion_05/#ejemplo-visual-del-flujo","title":"Ejemplo visual del flujo","text":"<pre><code>function Abuelo() {\n  const apellido = \"Garc\u00eda\"\n\n  return &lt;Padre apellidoFamilia={apellido} /&gt;\n}\n\nfunction Padre({ apellidoFamilia }) {\n  const nombre = \"Juan\"\n\n  return &lt;Hijo nombre={nombre} apellido={apellidoFamilia} /&gt;\n}\n\nfunction Hijo({ nombre, apellido }) {\n  return &lt;p&gt;{nombre} {apellido}&lt;/p&gt;  // \"Juan Garc\u00eda\"\n}\n</code></pre>"},{"location":"sesion_05/#diagrama-del-flujo","title":"Diagrama del flujo","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         ABUELO              \u2502\n\u2502   apellido = \"Garc\u00eda\"       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502 apellidoFamilia=\"Garc\u00eda\"\n           \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         PADRE               \u2502\n\u2502   nombre = \"Juan\"           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502 nombre=\"Juan\"\n           \u2502 apellido=\"Garc\u00eda\"\n           \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         HIJO                \u2502\n\u2502   Muestra: Juan Garc\u00eda      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"sesion_05/#tipos-de-datos-en-props","title":"\ud83d\udce6 Tipos de Datos en Props","text":""},{"location":"sesion_05/#todos-los-tipos-permitidos","title":"Todos los tipos permitidos","text":"<pre><code>function ComponenteEjemplo() {\n  return (\n    &lt;MiComponente\n      // Strings\n      texto=\"Hola mundo\"\n      plantilla={`Hola ${nombre}`}\n\n      // N\u00fameros\n      edad={25}\n      precio={19.99}\n\n      // Booleanos\n      activo={true}\n      visible={false}\n      mostrar  // Sin valor = true\n\n      // Arrays\n      numeros={[1, 2, 3, 4, 5]}\n      nombres={[\"Ana\", \"Luis\", \"Carlos\"]}\n\n      // Objetos\n      usuario={{ nombre: \"Juan\", edad: 30 }}\n      config={{ tema: \"oscuro\", idioma: \"es\" }}\n\n      // Funciones\n      onClick={() =&gt; console.log(\"Click!\")}\n      onChange={manejarCambio}\n\n      // Componentes\n      icono={&lt;IconoEstrella /&gt;}\n      contenido={&lt;div&gt;Contenido personalizado&lt;/div&gt;}\n\n      // Null, undefined\n      dato={null}\n      opcional={undefined}\n    /&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#ejemplos-practicos-por-tipo","title":"Ejemplos pr\u00e1cticos por tipo","text":""},{"location":"sesion_05/#1-props-de-texto","title":"1. Props de texto","text":"<pre><code>function Tarjeta({ titulo, descripcion }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{titulo}&lt;/h2&gt;\n      &lt;p&gt;{descripcion}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\n// Uso\n&lt;Tarjeta \n  titulo=\"React Props\" \n  descripcion=\"Las props permiten pasar datos entre componentes\"\n/&gt;\n</code></pre>"},{"location":"sesion_05/#2-props-numericas","title":"2. Props num\u00e9ricas","text":"<pre><code>function Producto({ nombre, precio, descuento }) {\n  const precioFinal = precio - (precio * descuento / 100)\n\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{nombre}&lt;/h3&gt;\n      &lt;p&gt;Precio: ${precio}&lt;/p&gt;\n      &lt;p&gt;Descuento: {descuento}%&lt;/p&gt;\n      &lt;p&gt;Precio final: ${precioFinal}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\n// Uso\n&lt;Producto nombre=\"Laptop\" precio={1000} descuento={15} /&gt;\n</code></pre>"},{"location":"sesion_05/#3-props-booleanas","title":"3. Props booleanas","text":"<pre><code>function Alerta({ mensaje, tipo, visible, puedeOcultar }) {\n  if (!visible) return null\n\n  return (\n    &lt;div className={`alerta alerta-${tipo}`}&gt;\n      {mensaje}\n      {puedeOcultar &amp;&amp; &lt;button&gt;\u00d7&lt;/button&gt;}\n    &lt;/div&gt;\n  )\n}\n\n// Uso\n&lt;Alerta \n  mensaje=\"Operaci\u00f3n exitosa\" \n  tipo=\"exito\"\n  visible={true}\n  puedeOcultar\n/&gt;\n</code></pre>"},{"location":"sesion_05/#4-props-con-arrays","title":"4. Props con arrays","text":"<pre><code>function ListaCompras({ items, titulo }) {\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{titulo}&lt;/h3&gt;\n      &lt;ul&gt;\n        {items.map((item, index) =&gt; (\n          &lt;li key={index}&gt;{item}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}\n\n// Uso\n&lt;ListaCompras \n  titulo=\"Lista del s\u00faper\"\n  items={[\"Leche\", \"Pan\", \"Huevos\", \"Frutas\"]}\n/&gt;\n</code></pre>"},{"location":"sesion_05/#5-props-con-objetos","title":"5. Props con objetos","text":"<pre><code>function PerfilUsuario({ usuario }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{usuario.nombre}&lt;/h2&gt;\n      &lt;p&gt;Email: {usuario.email}&lt;/p&gt;\n      &lt;p&gt;Edad: {usuario.edad}&lt;/p&gt;\n      &lt;p&gt;Ciudad: {usuario.direccion.ciudad}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\n// Uso\nconst datosUsuario = {\n  nombre: \"Ana L\u00f3pez\",\n  email: \"ana@email.com\",\n  edad: 28,\n  direccion: {\n    ciudad: \"Madrid\",\n    pais: \"Espa\u00f1a\"\n  }\n}\n\n&lt;PerfilUsuario usuario={datosUsuario} /&gt;\n</code></pre>"},{"location":"sesion_05/#6-props-con-funciones","title":"6. Props con funciones","text":"<pre><code>function Boton({ texto, onClick, tipo = \"primary\" }) {\n  return (\n    &lt;button \n      className={`btn btn-${tipo}`}\n      onClick={onClick}\n    &gt;\n      {texto}\n    &lt;/button&gt;\n  )\n}\n\n// Uso\nfunction App() {\n  const manejarClick = () =&gt; {\n    alert(\"\u00a1Bot\u00f3n presionado!\")\n  }\n\n  return (\n    &lt;Boton \n      texto=\"Hacer clic aqu\u00ed\" \n      onClick={manejarClick}\n      tipo=\"success\"\n    /&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#desestructuracion-de-props","title":"\ud83c\udfaf Desestructuraci\u00f3n de Props","text":""},{"location":"sesion_05/#sin-desestructuracion","title":"Sin desestructuraci\u00f3n","text":"<pre><code>function Producto(props) {\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{props.nombre}&lt;/h3&gt;\n      &lt;p&gt;${props.precio}&lt;/p&gt;\n      &lt;p&gt;{props.descripcion}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#con-desestructuracion","title":"Con desestructuraci\u00f3n","text":"<pre><code>function Producto({ nombre, precio, descripcion }) {\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{nombre}&lt;/h3&gt;\n      &lt;p&gt;${precio}&lt;/p&gt;\n      &lt;p&gt;{descripcion}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#ventajas-de-la-desestructuracion","title":"Ventajas de la desestructuraci\u00f3n","text":"<ol> <li>C\u00f3digo m\u00e1s limpio: No repetir <code>props.</code></li> <li>M\u00e1s legible: Ver qu\u00e9 props espera el componente</li> <li>Autocompletado: Mejor soporte del editor</li> </ol>"},{"location":"sesion_05/#tecnicas-avanzadas-de-desestructuracion","title":"T\u00e9cnicas avanzadas de desestructuraci\u00f3n","text":""},{"location":"sesion_05/#1-valores-por-defecto-en-desestructuracion","title":"1. Valores por defecto en desestructuraci\u00f3n","text":"<pre><code>function Saludo({ nombre = \"Invitado\", saludo = \"Hola\" }) {\n  return &lt;h1&gt;{saludo}, {nombre}!&lt;/h1&gt;\n}\n\n// Uso\n&lt;Saludo /&gt;                    // \"Hola, Invitado!\"\n&lt;Saludo nombre=\"Juan\" /&gt;      // \"Hola, Juan!\"\n&lt;Saludo nombre=\"Ana\" saludo=\"Buenos d\u00edas\" /&gt;  // \"Buenos d\u00edas, Ana!\"\n</code></pre>"},{"location":"sesion_05/#2-rest-operator","title":"2. Rest operator (...)","text":"<pre><code>function Boton({ texto, tipo, ...otrasProps }) {\n  return (\n    &lt;button \n      className={`btn btn-${tipo}`}\n      {...otrasProps}  // onClick, disabled, etc.\n    &gt;\n      {texto}\n    &lt;/button&gt;\n  )\n}\n\n// Uso\n&lt;Boton \n  texto=\"Guardar\"\n  tipo=\"primary\"\n  onClick={guardar}\n  disabled={guardando}\n  data-testid=\"boton-guardar\"\n/&gt;\n</code></pre>"},{"location":"sesion_05/#3-renombrar-props","title":"3. Renombrar props","text":"<pre><code>function Usuario({ nombre: nombreCompleto, email: correo }) {\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{nombreCompleto}&lt;/h3&gt;\n      &lt;p&gt;{correo}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#4-props-anidadas","title":"4. Props anidadas","text":"<pre><code>function Direccion({ usuario: { nombre, direccion: { ciudad, pais } } }) {\n  return (\n    &lt;p&gt;{nombre} vive en {ciudad}, {pais}&lt;/p&gt;\n  )\n}\n\n// M\u00e1s legible: desestructurar en el cuerpo\nfunction Direccion({ usuario }) {\n  const { nombre, direccion } = usuario\n  const { ciudad, pais } = direccion\n\n  return (\n    &lt;p&gt;{nombre} vive en {ciudad}, {pais}&lt;/p&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#props-por-defecto","title":"\ud83d\udee1\ufe0f Props por Defecto","text":""},{"location":"sesion_05/#metodo-1-defaultprops-clasico","title":"M\u00e9todo 1: defaultProps (Cl\u00e1sico)","text":"<pre><code>function Tarjeta({ titulo, contenido, color }) {\n  return (\n    &lt;div style={{ backgroundColor: color }}&gt;\n      &lt;h3&gt;{titulo}&lt;/h3&gt;\n      &lt;p&gt;{contenido}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\nTarjeta.defaultProps = {\n  titulo: \"Sin t\u00edtulo\",\n  contenido: \"Sin contenido\",\n  color: \"#f0f0f0\"\n}\n</code></pre>"},{"location":"sesion_05/#metodo-2-valores-por-defecto-es6-moderno","title":"M\u00e9todo 2: Valores por defecto ES6 (Moderno)","text":"<pre><code>function Tarjeta({ \n  titulo = \"Sin t\u00edtulo\", \n  contenido = \"Sin contenido\", \n  color = \"#f0f0f0\" \n}) {\n  return (\n    &lt;div style={{ backgroundColor: color }}&gt;\n      &lt;h3&gt;{titulo}&lt;/h3&gt;\n      &lt;p&gt;{contenido}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#metodo-3-valores-por-defecto-complejos","title":"M\u00e9todo 3: Valores por defecto complejos","text":"<pre><code>function TablaUsuarios({ \n  usuarios = [], \n  columnas = [\"nombre\", \"email\", \"edad\"],\n  ordenPor = \"nombre\",\n  limite = 10 \n}) {\n  // L\u00f3gica del componente\n}\n</code></pre>"},{"location":"sesion_05/#cuando-usar-valores-por-defecto","title":"Cu\u00e1ndo usar valores por defecto","text":"<pre><code>// \u2705 BIEN - Props opcionales con valores sensatos\nfunction Paginacion({ \n  paginaActual = 1, \n  itemsPorPagina = 10,\n  mostrarNumeros = true \n}) {\n  // ...\n}\n\n// \u274c EVITAR - Props requeridas con defaults sin sentido\nfunction Usuario({ \n  nombre = \"SIN NOMBRE\",  // Mejor hacerla requerida\n  id = -1                 // Mejor validar que exista\n}) {\n  // ...\n}\n</code></pre>"},{"location":"sesion_05/#validacion-con-proptypes","title":"\u2705 Validaci\u00f3n con PropTypes","text":""},{"location":"sesion_05/#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>npm install prop-types\n</code></pre>"},{"location":"sesion_05/#uso-basico","title":"Uso b\u00e1sico","text":"<pre><code>import PropTypes from 'prop-types'\n\nfunction Usuario({ nombre, edad, email, activo }) {\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{nombre}&lt;/h3&gt;\n      &lt;p&gt;{email}&lt;/p&gt;\n      &lt;p&gt;{edad} a\u00f1os&lt;/p&gt;\n      &lt;p&gt;Estado: {activo ? \"Activo\" : \"Inactivo\"}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\nUsuario.propTypes = {\n  nombre: PropTypes.string.isRequired,\n  edad: PropTypes.number.isRequired,\n  email: PropTypes.string.isRequired,\n  activo: PropTypes.bool\n}\n\nUsuario.defaultProps = {\n  activo: true\n}\n</code></pre>"},{"location":"sesion_05/#tipos-de-validacion-disponibles","title":"Tipos de validaci\u00f3n disponibles","text":"<pre><code>ComponenteEjemplo.propTypes = {\n  // Tipos b\u00e1sicos\n  texto: PropTypes.string,\n  numero: PropTypes.number,\n  booleano: PropTypes.bool,\n  funcion: PropTypes.func,\n  objeto: PropTypes.object,\n  arreglo: PropTypes.array,\n  simbolo: PropTypes.symbol,\n\n  // Cualquier cosa renderizable\n  nodo: PropTypes.node,\n\n  // Elemento React\n  elemento: PropTypes.element,\n\n  // Instancia de clase\n  fecha: PropTypes.instanceOf(Date),\n\n  // Valores espec\u00edficos\n  tipo: PropTypes.oneOf(['primario', 'secundario', 'peligro']),\n\n  // Tipos m\u00faltiples\n  id: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n\n  // Array de tipo espec\u00edfico\n  numeros: PropTypes.arrayOf(PropTypes.number),\n\n  // Objeto con forma espec\u00edfica\n  usuario: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    nombre: PropTypes.string.isRequired,\n    email: PropTypes.string\n  }),\n\n  // Validaci\u00f3n personalizada\n  edad: function(props, propName, componentName) {\n    if (props[propName] &lt; 18) {\n      return new Error(`${propName} debe ser mayor a 18`)\n    }\n  }\n}\n</code></pre>"},{"location":"sesion_05/#ejemplo-completo-con-validaciones","title":"Ejemplo completo con validaciones","text":"<pre><code>import PropTypes from 'prop-types'\n\nfunction ProductoCard({ producto, onComprar, descuento }) {\n  const precioFinal = producto.precio * (1 - descuento / 100)\n\n  return (\n    &lt;div className=\"producto-card\"&gt;\n      &lt;img src={producto.imagen} alt={producto.nombre} /&gt;\n      &lt;h3&gt;{producto.nombre}&lt;/h3&gt;\n      &lt;p&gt;{producto.descripcion}&lt;/p&gt;\n      &lt;p className=\"precio\"&gt;\n        ${producto.precio}\n        {descuento &gt; 0 &amp;&amp; (\n          &lt;span className=\"descuento\"&gt; \u2192 ${precioFinal.toFixed(2)}&lt;/span&gt;\n        )}\n      &lt;/p&gt;\n      &lt;button onClick={() =&gt; onComprar(producto.id)}&gt;\n        Comprar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n\nProductoCard.propTypes = {\n  producto: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    nombre: PropTypes.string.isRequired,\n    descripcion: PropTypes.string,\n    precio: PropTypes.number.isRequired,\n    imagen: PropTypes.string.isRequired\n  }).isRequired,\n  onComprar: PropTypes.func.isRequired,\n  descuento: PropTypes.number\n}\n\nProductoCard.defaultProps = {\n  descuento: 0\n}\n</code></pre>"},{"location":"sesion_05/#patrones-comunes-con-props","title":"\ud83c\udfa8 Patrones Comunes con Props","text":""},{"location":"sesion_05/#1-props-de-renderizado-render-props","title":"1. Props de renderizado (Render Props)","text":"<pre><code>function ContenedorDatos({ render }) {\n  const [datos, setDatos] = useState(null)\n  const [cargando, setCargando] = useState(true)\n\n  useEffect(() =&gt; {\n    fetchDatos().then(data =&gt; {\n      setDatos(data)\n      setCargando(false)\n    })\n  }, [])\n\n  return render({ datos, cargando })\n}\n\n// Uso\n&lt;ContenedorDatos \n  render={({ datos, cargando }) =&gt; (\n    cargando ? &lt;Spinner /&gt; : &lt;Lista items={datos} /&gt;\n  )}\n/&gt;\n</code></pre>"},{"location":"sesion_05/#2-props-de-composicion-children","title":"2. Props de composici\u00f3n (children)","text":"<pre><code>function Tarjeta({ titulo, children, pie }) {\n  return (\n    &lt;div className=\"tarjeta\"&gt;\n      &lt;div className=\"tarjeta-header\"&gt;\n        &lt;h3&gt;{titulo}&lt;/h3&gt;\n      &lt;/div&gt;\n      &lt;div className=\"tarjeta-body\"&gt;\n        {children}\n      &lt;/div&gt;\n      {pie &amp;&amp; (\n        &lt;div className=\"tarjeta-footer\"&gt;\n          {pie}\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  )\n}\n\n// Uso\n&lt;Tarjeta titulo=\"Mi Tarjeta\" pie={&lt;button&gt;Acci\u00f3n&lt;/button&gt;}&gt;\n  &lt;p&gt;Este es el contenido de la tarjeta&lt;/p&gt;\n  &lt;p&gt;Puede ser cualquier cosa&lt;/p&gt;\n&lt;/Tarjeta&gt;\n</code></pre>"},{"location":"sesion_05/#3-props-de-configuracion","title":"3. Props de configuraci\u00f3n","text":"<pre><code>function Tabla({ datos, columnas, ordenable, paginacion }) {\n  return (\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          {columnas.map(col =&gt; (\n            &lt;th key={col.campo}&gt;\n              {col.titulo}\n              {ordenable &amp;&amp; &lt;BotonOrdenar campo={col.campo} /&gt;}\n            &lt;/th&gt;\n          ))}\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        {/* Renderizar filas */}\n      &lt;/tbody&gt;\n      {paginacion &amp;&amp; &lt;Paginacion {...paginacion} /&gt;}\n    &lt;/table&gt;\n  )\n}\n\n// Uso\n&lt;Tabla\n  datos={usuarios}\n  columnas={[\n    { campo: 'nombre', titulo: 'Nombre' },\n    { campo: 'email', titulo: 'Correo' }\n  ]}\n  ordenable\n  paginacion={{ pagina: 1, total: 100 }}\n/&gt;\n</code></pre>"},{"location":"sesion_05/#4-props-de-estado-y-acciones","title":"4. Props de estado y acciones","text":"<pre><code>function FormularioControlado({ valor, onChange, onSubmit, error }) {\n  return (\n    &lt;form onSubmit={onSubmit}&gt;\n      &lt;input \n        value={valor}\n        onChange={e =&gt; onChange(e.target.value)}\n        className={error ? 'error' : ''}\n      /&gt;\n      {error &amp;&amp; &lt;span className=\"mensaje-error\"&gt;{error}&lt;/span&gt;}\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#5-props-spread-pattern","title":"5. Props spread pattern","text":"<pre><code>function Input({ label, error, ...inputProps }) {\n  return (\n    &lt;div className=\"campo-formulario\"&gt;\n      &lt;label&gt;{label}&lt;/label&gt;\n      &lt;input {...inputProps} /&gt;\n      {error &amp;&amp; &lt;span className=\"error\"&gt;{error}&lt;/span&gt;}\n    &lt;/div&gt;\n  )\n}\n\n// Uso\n&lt;Input \n  label=\"Email\"\n  type=\"email\"\n  name=\"email\"\n  value={email}\n  onChange={handleChange}\n  required\n  error={errores.email}\n/&gt;\n</code></pre>"},{"location":"sesion_05/#props-vs-estado","title":"\ud83c\udd9a Props vs Estado","text":""},{"location":"sesion_05/#diferencias-clave","title":"Diferencias clave","text":"Caracter\u00edstica Props Estado Origen Viene del padre Interno del componente Mutabilidad Inmutable (solo lectura) Mutable (con setState) Actualizaci\u00f3n Solo el padre puede cambiar El componente mismo Uso Configuraci\u00f3n y datos Datos que cambian Direcci\u00f3n Unidireccional \u2193 Local"},{"location":"sesion_05/#ejemplo-comparativo","title":"Ejemplo comparativo","text":"<pre><code>// PROPS - Datos del padre\nfunction ContadorControlado({ valor, onCambiar }) {\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Contador: {valor}&lt;/p&gt;\n      &lt;button onClick={() =&gt; onCambiar(valor + 1)}&gt;+1&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n\n// ESTADO - Datos propios\nfunction ContadorLocal() {\n  const [valor, setValor] = useState(0)\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Contador: {valor}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setValor(valor + 1)}&gt;+1&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#cuando-usar-cada-uno","title":"Cu\u00e1ndo usar cada uno","text":"<pre><code>// \u2705 USA PROPS cuando:\n// - El padre necesita controlar el valor\n// - Varios componentes comparten el dato\n// - Es configuraci\u00f3n del componente\n\n// \u2705 USA ESTADO cuando:\n// - El dato es privado del componente\n// - Solo este componente lo modifica\n// - Es un detalle de implementaci\u00f3n\n</code></pre>"},{"location":"sesion_05/#errores-comunes-y-debugging","title":"\ud83d\udc1b Errores Comunes y Debugging","text":""},{"location":"sesion_05/#error-1-mutar-props","title":"Error 1: Mutar props","text":"<pre><code>// \u274c MAL - Nunca modifiques props\nfunction Componente({ usuario }) {\n  usuario.nombre = \"Nuevo nombre\"  // \u00a1ERROR!\n  return &lt;div&gt;{usuario.nombre}&lt;/div&gt;\n}\n\n// \u2705 BIEN - Crea una copia si necesitas modificar\nfunction Componente({ usuario }) {\n  const usuarioLocal = { ...usuario, nombre: \"Nuevo nombre\" }\n  return &lt;div&gt;{usuarioLocal.nombre}&lt;/div&gt;\n}\n</code></pre>"},{"location":"sesion_05/#error-2-props-no-definidas","title":"Error 2: Props no definidas","text":"<pre><code>// \u274c MAL - Puede causar error\nfunction Perfil({ usuario }) {\n  return &lt;h1&gt;{usuario.nombre}&lt;/h1&gt;  // Error si usuario es undefined\n}\n\n// \u2705 BIEN - Verificar existencia\nfunction Perfil({ usuario }) {\n  if (!usuario) return &lt;p&gt;Cargando...&lt;/p&gt;\n  return &lt;h1&gt;{usuario.nombre}&lt;/h1&gt;\n}\n\n// \u2705 MEJOR - Opcional chaining\nfunction Perfil({ usuario }) {\n  return &lt;h1&gt;{usuario?.nombre || \"Sin nombre\"}&lt;/h1&gt;\n}\n</code></pre>"},{"location":"sesion_05/#error-3-pasar-objetos-como-prop-key","title":"Error 3: Pasar objetos como prop key","text":"<pre><code>// \u274c MAL - Los objetos no funcionan como keys\n{items.map(item =&gt; (\n  &lt;Item key={item} data={item} /&gt;  // item es objeto\n))}\n\n// \u2705 BIEN - Usar propiedad \u00fanica\n{items.map(item =&gt; (\n  &lt;Item key={item.id} data={item} /&gt;\n))}\n</code></pre>"},{"location":"sesion_05/#error-4-props-con-el-mismo-nombre-que-variables","title":"Error 4: Props con el mismo nombre que variables","text":"<pre><code>// \u274c CONFUSO\nfunction Componente({ nombre }) {\n  const nombre = \"Otro nombre\"  // Conflicto de nombres\n  return &lt;div&gt;{nombre}&lt;/div&gt;\n}\n\n// \u2705 CLARO\nfunction Componente({ nombreProp }) {\n  const nombreLocal = \"Otro nombre\"\n  return &lt;div&gt;{nombreProp} - {nombreLocal}&lt;/div&gt;\n}\n</code></pre>"},{"location":"sesion_05/#herramientas-de-debugging","title":"Herramientas de debugging","text":""},{"location":"sesion_05/#1-consolelog-de-props","title":"1. Console.log de props","text":"<pre><code>function MiComponente(props) {\n  console.log(\"Props recibidas:\", props)\n  // ...\n}\n</code></pre>"},{"location":"sesion_05/#2-react-developer-tools","title":"2. React Developer Tools","text":"<ul> <li>Instalar extensi\u00f3n del navegador</li> <li>Inspeccionar componentes</li> <li>Ver props en tiempo real</li> <li>Buscar componentes por nombre</li> </ul>"},{"location":"sesion_05/#3-validacion-con-proptypes","title":"3. Validaci\u00f3n con PropTypes","text":"<pre><code>// Te avisa en consola si hay problemas\nMiComponente.propTypes = {\n  nombre: PropTypes.string.isRequired\n}\n</code></pre>"},{"location":"sesion_05/#ejercicios-practicos","title":"\ud83d\udcaa Ejercicios Pr\u00e1cticos","text":""},{"location":"sesion_05/#ejercicio-1-card-de-usuario","title":"Ejercicio 1: Card de Usuario","text":"<pre><code>// TODO: Crear un componente UserCard que reciba:\n// - nombre (string, requerido)\n// - avatar (string, opcional con default)\n// - bio (string, opcional)\n// - seguidores (number, default 0)\n\nfunction UserCard({ \n  nombre, \n  avatar = \"/default-avatar.png\",\n  bio,\n  seguidores = 0 \n}) {\n  return (\n    &lt;div className=\"user-card\"&gt;\n      &lt;img src={avatar} alt={nombre} /&gt;\n      &lt;h3&gt;{nombre}&lt;/h3&gt;\n      {bio &amp;&amp; &lt;p&gt;{bio}&lt;/p&gt;}\n      &lt;span&gt;{seguidores} seguidores&lt;/span&gt;\n    &lt;/div&gt;\n  )\n}\n\n// Agregar PropTypes\nUserCard.propTypes = {\n  nombre: PropTypes.string.isRequired,\n  avatar: PropTypes.string,\n  bio: PropTypes.string,\n  seguidores: PropTypes.number\n}\n</code></pre>"},{"location":"sesion_05/#ejercicio-2-lista-de-productos","title":"Ejercicio 2: Lista de Productos","text":"<pre><code>// TODO: Crear componentes para mostrar productos\n// ProductList recibe array de productos\n// ProductItem recibe datos de un producto\n\nfunction ProductItem({ nombre, precio, imagen, enStock }) {\n  return (\n    &lt;div className={`product ${!enStock ? 'agotado' : ''}`}&gt;\n      &lt;img src={imagen} alt={nombre} /&gt;\n      &lt;h4&gt;{nombre}&lt;/h4&gt;\n      &lt;p&gt;${precio}&lt;/p&gt;\n      {!enStock &amp;&amp; &lt;span&gt;Agotado&lt;/span&gt;}\n    &lt;/div&gt;\n  )\n}\n\nfunction ProductList({ productos, titulo = \"Nuestros Productos\" }) {\n  return (\n    &lt;section&gt;\n      &lt;h2&gt;{titulo}&lt;/h2&gt;\n      &lt;div className=\"product-grid\"&gt;\n        {productos.map(producto =&gt; (\n          &lt;ProductItem key={producto.id} {...producto} /&gt;\n        ))}\n      &lt;/div&gt;\n    &lt;/section&gt;\n  )\n}\n\n// Uso\nconst productos = [\n  { id: 1, nombre: \"Laptop\", precio: 999, imagen: \"...\", enStock: true },\n  { id: 2, nombre: \"Mouse\", precio: 29, imagen: \"...\", enStock: false }\n]\n\n&lt;ProductList productos={productos} /&gt;\n</code></pre>"},{"location":"sesion_05/#ejercicio-3-formulario-configurable","title":"Ejercicio 3: Formulario Configurable","text":"<pre><code>// TODO: Crear un Input reutilizable con props\n\nfunction Input({ \n  label, \n  tipo = \"text\", \n  nombre, \n  valor, \n  onChange, \n  error,\n  requerido = false,\n  placeholder \n}) {\n  const inputId = `input-${nombre}`\n\n  return (\n    &lt;div className=\"form-field\"&gt;\n      &lt;label htmlFor={inputId}&gt;\n        {label}\n        {requerido &amp;&amp; &lt;span className=\"required\"&gt;*&lt;/span&gt;}\n      &lt;/label&gt;\n      &lt;input\n        id={inputId}\n        type={tipo}\n        name={nombre}\n        value={valor}\n        onChange={onChange}\n        placeholder={placeholder}\n        required={requerido}\n        className={error ? 'error' : ''}\n      /&gt;\n      {error &amp;&amp; &lt;span className=\"error-message\"&gt;{error}&lt;/span&gt;}\n    &lt;/div&gt;\n  )\n}\n\n// Uso\nfunction Formulario() {\n  const [valores, setValores] = useState({ email: '', password: '' })\n  const [errores, setErrores] = useState({})\n\n  const handleChange = (e) =&gt; {\n    setValores({\n      ...valores,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  return (\n    &lt;form&gt;\n      &lt;Input\n        label=\"Email\"\n        tipo=\"email\"\n        nombre=\"email\"\n        valor={valores.email}\n        onChange={handleChange}\n        error={errores.email}\n        requerido\n        placeholder=\"tu@email.com\"\n      /&gt;\n      &lt;Input\n        label=\"Contrase\u00f1a\"\n        tipo=\"password\"\n        nombre=\"password\"\n        valor={valores.password}\n        onChange={handleChange}\n        error={errores.password}\n        requerido\n      /&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#ejercicio-4-componente-de-notificacion","title":"Ejercicio 4: Componente de Notificaci\u00f3n","text":"<pre><code>// TODO: Crear un sistema de notificaciones flexible\n\nfunction Notificacion({ \n  tipo = \"info\", // \"info\", \"exito\", \"advertencia\", \"error\"\n  titulo,\n  mensaje,\n  onCerrar,\n  duracion = 5000, // ms antes de auto-cerrar\n  icono = true,\n  accion\n}) {\n  useEffect(() =&gt; {\n    if (duracion &amp;&amp; duracion &gt; 0) {\n      const timer = setTimeout(() =&gt; {\n        onCerrar &amp;&amp; onCerrar()\n      }, duracion)\n\n      return () =&gt; clearTimeout(timer)\n    }\n  }, [duracion, onCerrar])\n\n  const iconos = {\n    info: \"\u2139\ufe0f\",\n    exito: \"\u2705\",\n    advertencia: \"\u26a0\ufe0f\",\n    error: \"\u274c\"\n  }\n\n  return (\n    &lt;div className={`notificacion notificacion-${tipo}`}&gt;\n      &lt;div className=\"notificacion-contenido\"&gt;\n        {icono &amp;&amp; &lt;span className=\"notificacion-icono\"&gt;{iconos[tipo]}&lt;/span&gt;}\n        &lt;div&gt;\n          {titulo &amp;&amp; &lt;h4&gt;{titulo}&lt;/h4&gt;}\n          &lt;p&gt;{mensaje}&lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div className=\"notificacion-acciones\"&gt;\n        {accion &amp;&amp; (\n          &lt;button onClick={accion.onClick}&gt;\n            {accion.texto}\n          &lt;/button&gt;\n        )}\n        {onCerrar &amp;&amp; (\n          &lt;button onClick={onCerrar} className=\"cerrar\"&gt;\u00d7&lt;/button&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\n// Uso\nfunction App() {\n  const [notificaciones, setNotificaciones] = useState([])\n\n  const agregarNotificacion = (config) =&gt; {\n    const id = Date.now()\n    setNotificaciones(prev =&gt; [...prev, { id, ...config }])\n  }\n\n  const quitarNotificacion = (id) =&gt; {\n    setNotificaciones(prev =&gt; prev.filter(n =&gt; n.id !== id))\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; agregarNotificacion({\n        tipo: \"exito\",\n        titulo: \"\u00a1Guardado!\",\n        mensaje: \"Los cambios se guardaron correctamente\"\n      })}&gt;\n        Mostrar notificaci\u00f3n\n      &lt;/button&gt;\n\n      &lt;div className=\"notificaciones-container\"&gt;\n        {notificaciones.map(notif =&gt; (\n          &lt;Notificacion\n            key={notif.id}\n            {...notif}\n            onCerrar={() =&gt; quitarNotificacion(notif.id)}\n          /&gt;\n        ))}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_05/#resumen-y-mejores-practicas","title":"\ud83c\udfaf Resumen y Mejores Pr\u00e1cticas","text":""},{"location":"sesion_05/#checklist-de-props","title":"Checklist de Props","text":"<p>\u2705 DO's - Hacer:</p> <ol> <li>Usar nombres descriptivos para props</li> <li>Desestructurar props para c\u00f3digo m\u00e1s limpio</li> <li>Proporcionar valores por defecto para props opcionales</li> <li>Validar props con PropTypes o TypeScript</li> <li>Documentar props complejas</li> <li>Mantener props inmutables</li> </ol> <p>\u274c DON'Ts - No hacer:</p> <ol> <li>Modificar props directamente</li> <li>Pasar demasiadas props (m\u00e1s de 7-8)</li> <li>Usar nombres gen\u00e9ricos (data, info, config)</li> <li>Pasar el estado completo si solo necesitas parte</li> <li>Olvidar manejar props undefined</li> </ol>"},{"location":"sesion_05/#patrones-recomendados","title":"Patrones recomendados","text":"<pre><code>// 1. Props bien nombradas y tipadas\nfunction BotonAccion({ \n  texto,           // Qu\u00e9 muestra\n  onClick,         // Qu\u00e9 hace\n  variante = \"primario\",  // C\u00f3mo se ve\n  deshabilitado = false,  // Estado\n  cargando = false        // Estado de carga\n}) {\n  // ...\n}\n\n// 2. Agrupaci\u00f3n l\u00f3gica de props\nfunction TarjetaProducto({ producto, acciones, configuracion }) {\n  // Mejor que pasar 15 props individuales\n}\n\n// 3. Composici\u00f3n sobre configuraci\u00f3n\n// En lugar de:\n&lt;Modal \n  titulo=\"...\"\n  contenido=\"...\"\n  piePagina=\"...\"\n/&gt;\n\n// Mejor:\n&lt;Modal&gt;\n  &lt;ModalTitulo&gt;...&lt;/ModalTitulo&gt;\n  &lt;ModalContenido&gt;...&lt;/ModalContenido&gt;\n  &lt;ModalPie&gt;...&lt;/ModalPie&gt;\n&lt;/Modal&gt;\n</code></pre>"},{"location":"sesion_05/#evolucion-del-uso-de-props","title":"Evoluci\u00f3n del uso de props","text":"<pre><code>// Nivel 1: Props b\u00e1sicas\n&lt;Boton texto=\"Click\" /&gt;\n\n// Nivel 2: Props con funciones\n&lt;Boton texto=\"Click\" onClick={handleClick} /&gt;\n\n// Nivel 3: Props con objetos y arrays\n&lt;Lista items={datos} onSeleccionar={item =&gt; ...} /&gt;\n\n// Nivel 4: Composici\u00f3n y render props\n&lt;DataProvider render={data =&gt; &lt;Vista datos={data} /&gt;} /&gt;\n\n// Nivel 5: Props avanzadas con TypeScript\ninterface Props {\n  items: Item[]\n  onSelect: (item: Item) =&gt; void\n  renderItem?: (item: Item) =&gt; ReactNode\n}\n</code></pre>"},{"location":"sesion_05/#recursos-adicionales","title":"Recursos adicionales","text":"<ol> <li>Documentaci\u00f3n oficial: React Props</li> <li>PropTypes: Documentaci\u00f3n</li> <li>Patrones avanzados: React Patterns</li> </ol>"},{"location":"sesion_05/#conclusion","title":"\ud83d\udca1 Conclusi\u00f3n","text":"<p>Las props son el coraz\u00f3n de React. Dominarlas significa:</p> <ul> <li>\ud83e\udde9 Componentes reutilizables: Escribe una vez, usa muchas</li> <li>\ud83d\udd04 Flujo de datos claro: Siempre sabes de d\u00f3nde vienen los datos</li> <li>\ud83d\udee0\ufe0f Mantenibilidad: C\u00f3digo predecible y f\u00e1cil de debuggear</li> <li>\ud83d\ude80 Escalabilidad: Arquitectura que crece bien</li> </ul> <p>Recuerda: Las props son como los argumentos de una funci\u00f3n. Mantenlas simples, claras y enfocadas en un prop\u00f3sito espec\u00edfico.</p>"},{"location":"sesion_06/","title":"Validaci\u00f3n de Props en React con PropTypes","text":""},{"location":"sesion_06/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta clase se abord\u00f3 el uso de PropTypes, una funcionalidad muy \u00fatil en aplicaciones React para validar el tipo y la obligatoriedad de las propiedades (props) que recibe un componente. Esto resulta especialmente valioso en equipos de desarrollo o proyectos escalables, donde es importante establecer contratos claros entre componentes.</p>"},{"location":"sesion_06/#contexto-del-problema","title":"Contexto del Problema","text":"<p>Supongamos que estamos desarrollando un componente llamado <code>UserProfile</code>, que debe mostrar informaci\u00f3n como el nombre del usuario y su edad. Si omitimos alguno de estos valores o los enviamos con un tipo de dato incorrecto, podr\u00edamos introducir errores dif\u00edciles de depurar en la aplicaci\u00f3n. </p>"},{"location":"sesion_06/#objetivo","title":"Objetivo","text":"<p>Garantizar que ciertos props cumplan condiciones espec\u00edficas, como: - Ser del tipo correcto (por ejemplo, <code>string</code>, <code>number</code>) - Ser obligatorios para el correcto funcionamiento del componente</p>"},{"location":"sesion_06/#instalacion-de-prop-types","title":"Instalaci\u00f3n de <code>prop-types</code>","text":"<p>Si est\u00e1s utilizando un entorno como Vite, debes instalar la dependencia manualmente:</p> <pre><code>npm install prop-types\n</code></pre> <p>O si est\u00e1s usando Yarn:</p> <pre><code>yarn add prop-types\n</code></pre>"},{"location":"sesion_06/#ejemplo-del-mundo-real","title":"Ejemplo del Mundo Real","text":""},{"location":"sesion_06/#componente-userprofilejsx","title":"Componente: <code>UserProfile.jsx</code>","text":"<pre><code>import PropTypes from 'prop-types';\n\nfunction UserProfile({ name, age }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{name}&lt;/h2&gt;\n      &lt;p&gt;Edad: {age} a\u00f1os&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nUserProfile.propTypes = {\n  name: PropTypes.string.isRequired,\n  age: PropTypes.number.isRequired,\n};\n\nexport default UserProfile;\n</code></pre>"},{"location":"sesion_06/#uso-en-appjsx","title":"Uso en <code>App.jsx</code>","text":"<pre><code>import UserProfile from './components/UserProfile';\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;UserProfile name=\"Carlos P\u00e9rez\" age={35} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_06/#validaciones-y-mensajes-de-error","title":"Validaciones y Mensajes de Error","text":"<ol> <li>Si <code>name</code> no es enviado o no es del tipo <code>string</code>, el navegador mostrar\u00e1 un warning en la consola.</li> <li>Si <code>age</code> es omitido o se pasa como <code>\"35\"</code> (string), tambi\u00e9n se mostrar\u00e1 un mensaje indicando el tipo incorrecto.</li> </ol>"},{"location":"sesion_06/#ventajas-de-usar-proptypes","title":"Ventajas de Usar <code>PropTypes</code>","text":"<ul> <li>Ayuda a detectar errores en tiempo de desarrollo.</li> <li>Mejora la legibilidad y mantenibilidad del c\u00f3digo.</li> <li>Facilita el trabajo colaborativo entre desarrolladores.</li> </ul>"},{"location":"sesion_06/#conclusion","title":"Conclusi\u00f3n","text":"<p>El uso de <code>PropTypes</code> es una pr\u00e1ctica recomendada en aplicaciones React para validar la estructura de los props y garantizar el correcto funcionamiento de los componentes. Aunque en proyectos con TypeScript esta validaci\u00f3n es impl\u00edcita, en proyectos JavaScript <code>PropTypes</code> sigue siendo una soluci\u00f3n efectiva para mejorar la calidad del c\u00f3digo.</p>"},{"location":"sesion_07/","title":"\ud83c\udfa3 Introducci\u00f3n a Hooks: useEffect y useContext","text":""},{"location":"sesion_07/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>\u00bfQu\u00e9 son los Hooks?</li> <li>useEffect: Efectos secundarios</li> <li>useContext: Compartir datos globalmente</li> <li>Comparaci\u00f3n y cu\u00e1ndo usar cada uno</li> <li>Errores comunes y soluciones</li> <li>Resumen y pr\u00f3ximos pasos</li> </ol>"},{"location":"sesion_07/#que-son-los-hooks","title":"\ud83e\udd14 \u00bfQu\u00e9 son los Hooks?","text":""},{"location":"sesion_07/#definicion-simple","title":"Definici\u00f3n simple","text":"<p>Los Hooks son funciones especiales que permiten \"engancharte\" a las caracter\u00edsticas de React desde componentes funcionales.</p> <pre><code>// Antes de Hooks (componentes de clase) \ud83d\ude22\nclass Contador extends React.Component {\n  state = { cuenta: 0 }\n\n  componentDidMount() {\n    console.log(\"Componente montado\")\n  }\n\n  render() {\n    return &lt;div&gt;{this.state.cuenta}&lt;/div&gt;\n  }\n}\n\n// Con Hooks (componentes funcionales) \ud83d\ude0a\nfunction Contador() {\n  const [cuenta, setCuenta] = useState(0)\n\n  useEffect(() =&gt; {\n    console.log(\"Componente montado\")\n  }, [])\n\n  return &lt;div&gt;{cuenta}&lt;/div&gt;\n}\n</code></pre>"},{"location":"sesion_07/#los-hooks-mas-importantes","title":"Los Hooks m\u00e1s importantes","text":"<ol> <li>useState: Manejar estado local (ya lo conoces)</li> <li>useEffect: Efectos secundarios (lo veremos ahora)</li> <li>useContext: Compartir datos entre componentes (lo veremos despu\u00e9s)</li> <li>useReducer: Estado complejo</li> <li>useMemo/useCallback: Optimizaci\u00f3n</li> </ol>"},{"location":"sesion_07/#reglas-de-los-hooks","title":"Reglas de los Hooks","text":"<pre><code>// \u2705 REGLA 1: Solo llamar Hooks al nivel superior\nfunction Componente() {\n  const [estado, setEstado] = useState(0)  // \u2705 Bien\n\n  if (condicion) {\n    const [otro, setOtro] = useState(0)    // \u274c Mal - dentro de if\n  }\n}\n\n// \u2705 REGLA 2: Solo llamar Hooks desde funciones de React\nfunction Componente() {\n  useEffect(() =&gt; {})  // \u2705 Bien - componente React\n}\n\nfunction utilidad() {\n  useEffect(() =&gt; {})  // \u274c Mal - funci\u00f3n normal\n}\n</code></pre>"},{"location":"sesion_07/#useeffect-efectos-secundarios","title":"\ud83c\udfac useEffect: Efectos Secundarios","text":""},{"location":"sesion_07/#que-son-los-efectos-secundarios","title":"\u00bfQu\u00e9 son los efectos secundarios?","text":"<p>Efectos secundarios = Cualquier cosa que afecte algo fuera del componente:</p> <ul> <li>\ud83c\udf10 Llamadas a APIs</li> <li>\u23f0 Timers (setTimeout, setInterval)</li> <li>\ud83d\udcdd Modificar el DOM directamente</li> <li>\ud83d\udd14 Suscripciones a eventos</li> <li>\ud83d\udcbe Local Storage</li> </ul>"},{"location":"sesion_07/#anatomia-de-useeffect","title":"Anatom\u00eda de useEffect","text":"<pre><code>useEffect(() =&gt; {\n  // 1. C\u00f3digo del efecto\n  console.log(\"Este c\u00f3digo se ejecuta\")\n\n  // 2. Funci\u00f3n de limpieza (opcional)\n  return () =&gt; {\n    console.log(\"Este c\u00f3digo limpia\")\n  }\n}, [dependencias]) // 3. Array de dependencias\n</code></pre>"},{"location":"sesion_07/#los-3-tipos-de-useeffect","title":"Los 3 tipos de useEffect","text":""},{"location":"sesion_07/#1-efecto-sin-dependencias-se-ejecuta-siempre","title":"1. Efecto sin dependencias (se ejecuta siempre)","text":"<pre><code>function Componente() {\n  const [contador, setContador] = useState(0)\n\n  // \u26a0\ufe0f Se ejecuta en CADA render\n  useEffect(() =&gt; {\n    console.log(\"Componente renderizado\")\n  }) // Sin array de dependencias\n\n  return (\n    &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;\n      Clicks: {contador}\n    &lt;/button&gt;\n  )\n}\n</code></pre> <p>Cu\u00e1ndo usar: Casi nunca. Puede causar problemas de rendimiento.</p>"},{"location":"sesion_07/#2-efecto-con-array-vacio-se-ejecuta-una-vez","title":"2. Efecto con array vac\u00edo (se ejecuta una vez)","text":"<pre><code>function PerfilUsuario() {\n  const [usuario, setUsuario] = useState(null)\n  const [cargando, setCargando] = useState(true)\n\n  // Se ejecuta SOLO cuando el componente se monta\n  useEffect(() =&gt; {\n    console.log(\"Componente montado - Obteniendo datos...\")\n\n    fetch('/api/usuario')\n      .then(res =&gt; res.json())\n      .then(data =&gt; {\n        setUsuario(data)\n        setCargando(false)\n      })\n\n    // Cleanup: se ejecuta cuando el componente se desmonta\n    return () =&gt; {\n      console.log(\"Componente desmontado\")\n    }\n  }, []) // Array vac\u00edo = solo una vez\n\n  if (cargando) return &lt;div&gt;Cargando...&lt;/div&gt;\n  return &lt;div&gt;Hola {usuario.nombre}&lt;/div&gt;\n}\n</code></pre> <p>Cu\u00e1ndo usar: Para inicializar datos, suscripciones \u00fanicas.</p>"},{"location":"sesion_07/#3-efecto-con-dependencias-se-ejecuta-cuando-cambian","title":"3. Efecto con dependencias (se ejecuta cuando cambian)","text":"<pre><code>function BuscadorProductos() {\n  const [busqueda, setBusqueda] = useState('')\n  const [resultados, setResultados] = useState([])\n\n  // Se ejecuta cuando 'busqueda' cambia\n  useEffect(() =&gt; {\n    // Si no hay b\u00fasqueda, limpiar resultados\n    if (busqueda === '') {\n      setResultados([])\n      return\n    }\n\n    console.log(`Buscando: ${busqueda}`)\n\n    // Simular delay de b\u00fasqueda\n    const timer = setTimeout(() =&gt; {\n      // Aqu\u00ed normalmente har\u00edas fetch a la API\n      const resultadosFiltrados = productos.filter(p =&gt;\n        p.nombre.toLowerCase().includes(busqueda.toLowerCase())\n      )\n      setResultados(resultadosFiltrados)\n    }, 300)\n\n    // Cleanup: cancelar b\u00fasqueda anterior\n    return () =&gt; {\n      console.log(\"Cancelando b\u00fasqueda anterior\")\n      clearTimeout(timer)\n    }\n  }, [busqueda]) // Se ejecuta cuando busqueda cambia\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        value={busqueda}\n        onChange={(e) =&gt; setBusqueda(e.target.value)}\n        placeholder=\"Buscar productos...\"\n      /&gt;\n\n      {resultados.map(producto =&gt; (\n        &lt;div key={producto.id}&gt;{producto.nombre}&lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>Cu\u00e1ndo usar: Cuando necesitas reaccionar a cambios espec\u00edficos.</p>"},{"location":"sesion_07/#ejemplo-visual-del-ciclo-de-vida","title":"Ejemplo visual del ciclo de vida","text":"<pre><code>MONTAJE:\n1. Componente se renderiza\n2. useEffect se ejecuta\n3. Se muestra en pantalla\n\nACTUALIZACI\u00d3N:\n1. Estado/props cambian\n2. Componente re-renderiza\n3. useEffect se ejecuta SI las dependencias cambiaron\n\nDESMONTAJE:\n1. Componente se va a quitar\n2. Funci\u00f3n de cleanup se ejecuta\n3. Componente se elimina\n</code></pre>"},{"location":"sesion_07/#casos-de-uso-comunes","title":"Casos de uso comunes","text":""},{"location":"sesion_07/#1-obtener-datos-de-una-api","title":"1. Obtener datos de una API","text":"<pre><code>function ListaProductos() {\n  const [productos, setProductos] = useState([])\n  const [cargando, setCargando] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() =&gt; {\n    // Funci\u00f3n async dentro de useEffect\n    const obtenerProductos = async () =&gt; {\n      try {\n        setCargando(true)\n        const respuesta = await fetch('https://fakestoreapi.com/products')\n\n        if (!respuesta.ok) {\n          throw new Error('Error al cargar productos')\n        }\n\n        const datos = await respuesta.json()\n        setProductos(datos)\n      } catch (err) {\n        setError(err.message)\n      } finally {\n        setCargando(false)\n      }\n    }\n\n    obtenerProductos()\n  }, []) // Solo al montar\n\n  if (cargando) return &lt;div&gt;Cargando productos...&lt;/div&gt;\n  if (error) return &lt;div&gt;Error: {error}&lt;/div&gt;\n\n  return (\n    &lt;div&gt;\n      {productos.map(producto =&gt; (\n        &lt;div key={producto.id}&gt;\n          &lt;h3&gt;{producto.title}&lt;/h3&gt;\n          &lt;p&gt;${producto.price}&lt;/p&gt;\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_07/#2-actualizar-el-titulo-de-la-pagina","title":"2. Actualizar el t\u00edtulo de la p\u00e1gina","text":"<pre><code>function PaginaProducto({ producto }) {\n  useEffect(() =&gt; {\n    // Cambiar t\u00edtulo del navegador\n    document.title = `${producto.nombre} - Mi Tienda`\n\n    // Restaurar t\u00edtulo al desmontar\n    return () =&gt; {\n      document.title = 'Mi Tienda'\n    }\n  }, [producto.nombre])\n\n  return &lt;div&gt;{/* contenido */}&lt;/div&gt;\n}\n</code></pre>"},{"location":"sesion_07/#3-suscribirse-a-eventos","title":"3. Suscribirse a eventos","text":"<pre><code>function ScrollDetector() {\n  const [scrollY, setScrollY] = useState(0)\n\n  useEffect(() =&gt; {\n    const manejarScroll = () =&gt; {\n      setScrollY(window.scrollY)\n    }\n\n    // Suscribirse al evento\n    window.addEventListener('scroll', manejarScroll)\n\n    // Desuscribirse al desmontar\n    return () =&gt; {\n      window.removeEventListener('scroll', manejarScroll)\n    }\n  }, [])\n\n  return &lt;div&gt;Scroll: {scrollY}px&lt;/div&gt;\n}\n</code></pre>"},{"location":"sesion_07/#4-timer-con-cleanup","title":"4. Timer con cleanup","text":"<pre><code>function Temporizador() {\n  const [segundos, setSegundos] = useState(0)\n\n  useEffect(() =&gt; {\n    const intervalo = setInterval(() =&gt; {\n      setSegundos(s =&gt; s + 1)\n    }, 1000)\n\n    // MUY IMPORTANTE: limpiar el intervalo\n    return () =&gt; clearInterval(intervalo)\n  }, [])\n\n  return &lt;div&gt;Tiempo: {segundos}s&lt;/div&gt;\n}\n</code></pre>"},{"location":"sesion_07/#usecontext-compartir-datos-globalmente","title":"\ud83c\udf0d useContext: Compartir Datos Globalmente","text":""},{"location":"sesion_07/#el-problema-prop-drilling","title":"El problema: Prop Drilling","text":"<p>Imagina pasar datos a trav\u00e9s de muchos componentes:</p> <pre><code>// \u274c Prop Drilling - datos pasan por componentes que no los usan\nfunction App() {\n  const [usuario, setUsuario] = useState({ nombre: \"Juan\" })\n  return &lt;Layout usuario={usuario} /&gt;\n}\n\nfunction Layout({ usuario }) {\n  return &lt;Header usuario={usuario} /&gt;\n}\n\nfunction Header({ usuario }) {\n  return &lt;NavBar usuario={usuario} /&gt;\n}\n\nfunction NavBar({ usuario }) {\n  return &lt;div&gt;Hola {usuario.nombre}&lt;/div&gt;\n}\n</code></pre>"},{"location":"sesion_07/#la-solucion-context","title":"La soluci\u00f3n: Context","text":"<p>Context permite \"teletransportar\" datos a cualquier componente:</p> <pre><code>// \u2705 Con Context - datos disponibles donde se necesiten\nconst UsuarioContext = createContext()\n\nfunction App() {\n  const [usuario, setUsuario] = useState({ nombre: \"Juan\" })\n\n  return (\n    &lt;UsuarioContext.Provider value={usuario}&gt;\n      &lt;Layout /&gt;  {/* No necesita props */}\n    &lt;/UsuarioContext.Provider&gt;\n  )\n}\n\nfunction NavBar() {\n  const usuario = useContext(UsuarioContext)\n  return &lt;div&gt;Hola {usuario.nombre}&lt;/div&gt;\n}\n</code></pre>"},{"location":"sesion_07/#los-3-pasos-para-usar-context","title":"Los 3 pasos para usar Context","text":""},{"location":"sesion_07/#paso-1-crear-el-context","title":"Paso 1: Crear el Context","text":"<pre><code>import { createContext } from 'react'\n\n// Crear contexto con valor por defecto (opcional)\nconst TemaContext = createContext('claro')\n</code></pre>"},{"location":"sesion_07/#paso-2-proveer-el-context","title":"Paso 2: Proveer el Context","text":"<pre><code>function App() {\n  const [tema, setTema] = useState('claro')\n\n  const cambiarTema = () =&gt; {\n    setTema(tema === 'claro' ? 'oscuro' : 'claro')\n  }\n\n  // Provider envuelve los componentes que necesitan acceso\n  return (\n    &lt;TemaContext.Provider value={{ tema, cambiarTema }}&gt;\n      &lt;div className={`app tema-${tema}`}&gt;\n        &lt;Header /&gt;\n        &lt;Main /&gt;\n        &lt;Footer /&gt;\n      &lt;/div&gt;\n    &lt;/TemaContext.Provider&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_07/#paso-3-consumir-el-context","title":"Paso 3: Consumir el Context","text":"<pre><code>function BotonTema() {\n  // Obtener valor del contexto\n  const { tema, cambiarTema } = useContext(TemaContext)\n\n  return (\n    &lt;button onClick={cambiarTema}&gt;\n      Tema actual: {tema}\n    &lt;/button&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_07/#ejemplo-completo-sistema-de-autenticacion","title":"Ejemplo completo: Sistema de autenticaci\u00f3n","text":"<pre><code>// 1. Crear el contexto de autenticaci\u00f3n\nconst AuthContext = createContext()\n\n// 2. Crear un Provider personalizado\nfunction AuthProvider({ children }) {\n  const [usuario, setUsuario] = useState(null)\n  const [cargando, setCargando] = useState(true)\n\n  // Verificar si hay usuario al cargar\n  useEffect(() =&gt; {\n    const usuarioGuardado = localStorage.getItem('usuario')\n    if (usuarioGuardado) {\n      setUsuario(JSON.parse(usuarioGuardado))\n    }\n    setCargando(false)\n  }, [])\n\n  const iniciarSesion = async (email, password) =&gt; {\n    try {\n      // Simular llamada a API\n      const respuesta = await fetch('/api/login', {\n        method: 'POST',\n        body: JSON.stringify({ email, password })\n      })\n\n      const datosUsuario = await respuesta.json()\n      setUsuario(datosUsuario)\n      localStorage.setItem('usuario', JSON.stringify(datosUsuario))\n\n      return { exito: true }\n    } catch (error) {\n      return { exito: false, error: error.message }\n    }\n  }\n\n  const cerrarSesion = () =&gt; {\n    setUsuario(null)\n    localStorage.removeItem('usuario')\n  }\n\n  const valor = {\n    usuario,\n    cargando,\n    iniciarSesion,\n    cerrarSesion,\n    estaAutenticado: !!usuario\n  }\n\n  return (\n    &lt;AuthContext.Provider value={valor}&gt;\n      {children}\n    &lt;/AuthContext.Provider&gt;\n  )\n}\n\n// 3. Hook personalizado para usar el contexto\nfunction useAuth() {\n  const contexto = useContext(AuthContext)\n  if (!contexto) {\n    throw new Error('useAuth debe usarse dentro de AuthProvider')\n  }\n  return contexto\n}\n\n// 4. Usar en la aplicaci\u00f3n\nfunction App() {\n  return (\n    &lt;AuthProvider&gt;\n      &lt;Router&gt;\n        &lt;Routes&gt;\n          &lt;Route path=\"/login\" element={&lt;Login /&gt;} /&gt;\n          &lt;Route path=\"/perfil\" element={&lt;RutaProtegida&gt;&lt;Perfil /&gt;&lt;/RutaProtegida&gt;} /&gt;\n        &lt;/Routes&gt;\n      &lt;/Router&gt;\n    &lt;/AuthProvider&gt;\n  )\n}\n\n// 5. Componente de login\nfunction Login() {\n  const { iniciarSesion } = useAuth()\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n\n  const manejarSubmit = async (e) =&gt; {\n    e.preventDefault()\n    const resultado = await iniciarSesion(email, password)\n\n    if (resultado.exito) {\n      // Redirigir a perfil\n    } else {\n      alert('Error al iniciar sesi\u00f3n')\n    }\n  }\n\n  return (\n    &lt;form onSubmit={manejarSubmit}&gt;\n      &lt;input\n        type=\"email\"\n        value={email}\n        onChange={(e) =&gt; setEmail(e.target.value)}\n      /&gt;\n      &lt;input\n        type=\"password\"\n        value={password}\n        onChange={(e) =&gt; setPassword(e.target.value)}\n      /&gt;\n      &lt;button type=\"submit\"&gt;Iniciar Sesi\u00f3n&lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n\n// 6. Ruta protegida\nfunction RutaProtegida({ children }) {\n  const { estaAutenticado, cargando } = useAuth()\n\n  if (cargando) return &lt;div&gt;Verificando...&lt;/div&gt;\n\n  if (!estaAutenticado) {\n    return &lt;Navigate to=\"/login\" /&gt;\n  }\n\n  return children\n}\n</code></pre>"},{"location":"sesion_07/#cuando-usar-context","title":"Cu\u00e1ndo usar Context","text":"<p>\u2705 USA Context cuando:</p> <ul> <li>Datos necesarios en muchos componentes (tema, idioma, usuario)</li> <li>Evitar prop drilling excesivo</li> <li>Estado global de la aplicaci\u00f3n</li> </ul> <p>\u274c NO uses Context cuando:</p> <ul> <li>Solo 2-3 componentes necesitan los datos</li> <li>Los datos cambian muy frecuentemente</li> <li>Es un estado muy local</li> </ul>"},{"location":"sesion_07/#comparacion-y-cuando-usar-cada-uno","title":"\ud83c\udd9a Comparaci\u00f3n y Cu\u00e1ndo Usar Cada Uno","text":""},{"location":"sesion_07/#useeffect-vs-usecontext","title":"useEffect vs useContext","text":"Aspecto useEffect useContext Prop\u00f3sito Efectos secundarios Compartir datos Cu\u00e1ndo se ejecuta Despu\u00e9s del render Al leer el valor Casos de uso APIs, timers, eventos Tema, auth, configuraci\u00f3n Complejidad Media Baja-Media"},{"location":"sesion_07/#pueden-trabajar-juntos","title":"Pueden trabajar juntos","text":"<pre><code>function UsuarioProvider({ children }) {\n  const [usuario, setUsuario] = useState(null)\n\n  // useEffect para cargar datos\n  useEffect(() =&gt; {\n    fetch('/api/usuario/actual')\n      .then(res =&gt; res.json())\n      .then(setUsuario)\n  }, [])\n\n  // Context para compartir\n  return (\n    &lt;UsuarioContext.Provider value={usuario}&gt;\n      {children}\n    &lt;/UsuarioContext.Provider&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_07/#errores-comunes-y-soluciones","title":"\u274c Errores Comunes y Soluciones","text":""},{"location":"sesion_07/#error-1-olvidar-el-array-de-dependencias","title":"Error 1: Olvidar el array de dependencias","text":"<pre><code>// \u274c Loop infinito\nuseEffect(() =&gt; {\n  setContador(contador + 1)\n}) // Sin array = se ejecuta siempre\n\n// \u2705 Correcto\nuseEffect(() =&gt; {\n  setContador(contador + 1)\n}, []) // Con array vac\u00edo = una vez\n</code></pre>"},{"location":"sesion_07/#error-2-dependencias-incorrectas","title":"Error 2: Dependencias incorrectas","text":"<pre><code>// \u274c No se actualiza cuando cambia usuario\nuseEffect(() =&gt; {\n  console.log(usuario.nombre)\n}, []) // Falta usuario en dependencias\n\n// \u2705 Correcto\nuseEffect(() =&gt; {\n  console.log(usuario.nombre)\n}, [usuario.nombre])\n</code></pre>"},{"location":"sesion_07/#error-3-no-limpiar-efectos","title":"Error 3: No limpiar efectos","text":"<pre><code>// \u274c Memory leak - el timer sigue corriendo\nuseEffect(() =&gt; {\n  setInterval(() =&gt; {\n    setTiempo(t =&gt; t + 1)\n  }, 1000)\n}, [])\n\n// \u2705 Correcto - con cleanup\nuseEffect(() =&gt; {\n  const timer = setInterval(() =&gt; {\n    setTiempo(t =&gt; t + 1)\n  }, 1000)\n\n  return () =&gt; clearInterval(timer)\n}, [])\n</code></pre>"},{"location":"sesion_07/#error-4-context-sin-provider","title":"Error 4: Context sin Provider","text":"<pre><code>// \u274c Error: Cannot read context\nfunction App() {\n  return &lt;ComponenteQueUsaContext /&gt;\n}\n\n// \u2705 Correcto - con Provider\nfunction App() {\n  return (\n    &lt;MiProvider&gt;\n      &lt;ComponenteQueUsaContext /&gt;\n    &lt;/MiProvider&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_07/#resumen-y-proximos-pasos","title":"\ud83c\udfaf Resumen y Pr\u00f3ximos Pasos","text":""},{"location":"sesion_07/#lo-que-aprendiste","title":"Lo que aprendiste","text":"<ol> <li>useEffect:</li> <li>Manejar efectos secundarios</li> <li>3 tipos: sin deps, array vac\u00edo, con deps</li> <li>Cleanup para evitar memory leaks</li> <li> <p>Casos: APIs, timers, eventos, DOM</p> </li> <li> <p>useContext:</p> </li> <li>Compartir datos sin prop drilling</li> <li>Crear, proveer y consumir contexto</li> <li>Casos: tema, auth, configuraci\u00f3n</li> <li>Combinar con useEffect</li> </ol>"},{"location":"sesion_07/#checklist-de-comprension","title":"Checklist de comprensi\u00f3n","text":"<ul> <li>\u2705 \u00bfEntiendes cu\u00e1ndo se ejecuta useEffect?</li> <li>\u2705 \u00bfSabes cu\u00e1ndo necesitas cleanup?</li> <li>\u2705 \u00bfEntiendes la diferencia entre los 3 tipos de useEffect?</li> <li>\u2705 \u00bfSabes cu\u00e1ndo usar Context vs props?</li> <li>\u2705 \u00bfPuedes crear un Provider personalizado?</li> </ul>"},{"location":"sesion_07/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<ol> <li>Practicar: Crear ejemplos propios</li> <li>Combinar: useEffect + useContext</li> <li>Explorar: useReducer para estado complejo</li> <li>Optimizar: useMemo y useCallback</li> <li>Custom Hooks: Crear tus propios hooks</li> </ol> <p>\u00a1Con estos dos hooks fundamentales, ya puedes crear aplicaciones React mucho m\u00e1s poderosas y organizadas!</p>"},{"location":"sesion_08/","title":"\ud83d\udcdd Manejo de Formularios y Estados Derivados en React","text":""},{"location":"sesion_08/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>Introducci\u00f3n a formularios en React</li> <li>Formularios controlados vs no controlados</li> <li>Manejo de diferentes tipos de inputs</li> <li>Validaci\u00f3n de formularios</li> <li>Estados derivados explicados</li> <li>Optimizaci\u00f3n y mejores pr\u00e1cticas</li> <li>Errores comunes y soluciones</li> </ol>"},{"location":"sesion_08/#introduccion-a-formularios-en-react","title":"\ud83c\udfaf Introducci\u00f3n a Formularios en React","text":""},{"location":"sesion_08/#por-que-los-formularios-son-especiales-en-react","title":"\u00bfPor qu\u00e9 los formularios son especiales en React?","text":"<p>En HTML tradicional, los formularios mantienen su propio estado interno. En React, preferimos que el estado sea manejado por componentes.</p> <pre><code>// HTML tradicional - El DOM controla el valor\n&lt;input type=\"text\" name=\"nombre\" /&gt;\n\n// React - El componente controla el valor\n&lt;input type=\"text\" value={nombre}\n\n### Cu\u00e1ndo usar estados derivados\n\n#### \u2705 USA estado derivado cuando:\n\n1. **El valor puede calcularse de otro estado**\n```jsx\n// En lugar de almacenar el total\nconst total = items.reduce((sum, item) =&gt; sum + item.precio, 0)\n</code></pre> <ol> <li> <p>Filtros y b\u00fasquedas <pre><code>// No guardes los resultados filtrados\nconst resultados = datos.filter(item =&gt; item.nombre.includes(busqueda))\n</code></pre></p> </li> <li> <p>Validaciones <pre><code>// Calcula errores basados en los valores\nconst esValido = email.includes('@') &amp;&amp; password.length &gt;= 8\n</code></pre></p> </li> <li> <p>Transformaciones de datos <pre><code>// Formateo, ordenamiento, agrupaci\u00f3n\nconst datosOrdenados = [...datos].sort((a, b) =&gt; a.nombre.localeCompare(b.nombre))\n</code></pre></p> </li> </ol>"},{"location":"sesion_08/#no-uses-estado-derivado-cuando","title":"\u274c NO uses estado derivado cuando:","text":"<ol> <li>El c\u00e1lculo es muy costoso (usa useMemo en su lugar)</li> <li>Los datos vienen de una API</li> <li>Necesitas persistir el valor</li> <li>El valor se actualiza independientemente</li> </ol>"},{"location":"sesion_08/#optimizacion-y-mejores-practicas","title":"\u26a1 Optimizaci\u00f3n y Mejores Pr\u00e1cticas","text":""},{"location":"sesion_08/#1-optimizacion-con-usememo","title":"1. Optimizaci\u00f3n con useMemo","text":"<p>Cuando los c\u00e1lculos derivados son costosos:</p> <pre><code>import { useMemo } from 'react'\n\nfunction TablaGrande({ datos, filtros }) {\n  // \u274c Se recalcula en cada render\n  const datosProcesados = procesarDatosComplejos(datos, filtros)\n\n  // \u2705 Solo se recalcula cuando cambian las dependencias\n  const datosProcesados = useMemo(\n    () =&gt; procesarDatosComplejos(datos, filtros),\n    [datos, filtros]\n  )\n\n  return &lt;Tabla datos={datosProcesados} /&gt;\n}\n</code></pre>"},{"location":"sesion_08/#2-debounce-en-formularios","title":"2. Debounce en formularios","text":"<p>Para evitar demasiadas actualizaciones:</p> <pre><code>function BuscadorOptimizado() {\n  const [busqueda, setBusqueda] = useState('')\n  const [resultados, setResultados] = useState([])\n\n  // Debounce la b\u00fasqueda\n  useEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n      if (busqueda) {\n        buscarEnAPI(busqueda).then(setResultados)\n      }\n    }, 300)\n\n    return () =&gt; clearTimeout(timer)\n  }, [busqueda])\n\n  return (\n    &lt;input\n      value={busqueda}\n      onChange={(e) =&gt; setBusqueda(e.target.value)}\n      placeholder=\"Buscar...\"\n    /&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_08/#3-formateo-automatico","title":"3. Formateo autom\u00e1tico","text":"<p>Mejorar UX con formateo en tiempo real:</p> <pre><code>function InputTelefono({ value, onChange }) {\n  const formatearTelefono = (valor) =&gt; {\n    // Eliminar todo excepto n\u00fameros\n    const numeros = valor.replace(/\\D/g, '')\n\n    // Aplicar formato (XXX) XXX-XXXX\n    if (numeros.length &lt;= 3) return numeros\n    if (numeros.length &lt;= 6) {\n      return `(${numeros.slice(0, 3)}) ${numeros.slice(3)}`\n    }\n    return `(${numeros.slice(0, 3)}) ${numeros.slice(3, 6)}-${numeros.slice(6, 10)}`\n  }\n\n  const handleChange = (e) =&gt; {\n    const valorFormateado = formatearTelefono(e.target.value)\n    onChange(valorFormateado)\n  }\n\n  return (\n    &lt;input\n      type=\"tel\"\n      value={value}\n      onChange={handleChange}\n      placeholder=\"(555) 123-4567\"\n      maxLength=\"14\"\n    /&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_08/#4-prevencion-de-envios-multiples","title":"4. Prevenci\u00f3n de env\u00edos m\u00faltiples","text":"<pre><code>function FormularioConProteccion() {\n  const [enviando, setEnviando] = useState(false)\n  const [intentosEnvio, setIntentosEnvio] = useState(0)\n\n  const handleSubmit = async (e) =&gt; {\n    e.preventDefault()\n\n    // Prevenir env\u00edos m\u00faltiples\n    if (enviando) return\n\n    // Limitar intentos\n    if (intentosEnvio &gt;= 3) {\n      alert('Demasiados intentos. Intenta m\u00e1s tarde.')\n      return\n    }\n\n    setEnviando(true)\n    setIntentosEnvio(prev =&gt; prev + 1)\n\n    try {\n      await enviarFormulario()\n      // \u00c9xito\n    } catch (error) {\n      // Error\n    } finally {\n      setEnviando(false)\n    }\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      {/* campos */}\n      &lt;button type=\"submit\" disabled={enviando || intentosEnvio &gt;= 3}&gt;\n        {enviando ? 'Enviando...' : 'Enviar'}\n      &lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_08/#5-composicion-de-componentes-de-formulario","title":"5. Composici\u00f3n de componentes de formulario","text":"<pre><code>// Componentes reutilizables\nfunction Campo({ label, error, children, required }) {\n  return (\n    &lt;div className={`campo ${error ? 'campo-error' : ''}`}&gt;\n      &lt;label&gt;\n        {label} {required &amp;&amp; &lt;span className=\"requerido\"&gt;*&lt;/span&gt;}\n      &lt;/label&gt;\n      {children}\n      {error &amp;&amp; &lt;span className=\"mensaje-error\"&gt;{error}&lt;/span&gt;}\n    &lt;/div&gt;\n  )\n}\n\nfunction InputValidado({ type = 'text', validacion, ...props }) {\n  const [error, setError] = useState('')\n  const [tocado, setTocado] = useState(false)\n\n  const handleBlur = (e) =&gt; {\n    setTocado(true)\n    if (validacion) {\n      setError(validacion(e.target.value))\n    }\n    props.onBlur?.(e)\n  }\n\n  return (\n    &lt;&gt;\n      &lt;input\n        type={type}\n        onBlur={handleBlur}\n        {...props}\n      /&gt;\n      {error &amp;&amp; tocado &amp;&amp; &lt;span className=\"error\"&gt;{error}&lt;/span&gt;}\n    &lt;/&gt;\n  )\n}\n\n// Uso\nfunction MiFormulario() {\n  return (\n    &lt;form&gt;\n      &lt;Campo label=\"Email\" required&gt;\n        &lt;InputValidado\n          type=\"email\"\n          validacion={(v) =&gt; !v.includes('@') ? 'Email inv\u00e1lido' : ''}\n        /&gt;\n      &lt;/Campo&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_08/#errores-comunes-y-soluciones","title":"\u274c Errores Comunes y Soluciones","text":""},{"location":"sesion_08/#error-1-mutar-el-estado-del-formulario","title":"Error 1: Mutar el estado del formulario","text":"<pre><code>// \u274c MAL - Mutaci\u00f3n directa\nconst handleChange = (e) =&gt; {\n  formData[e.target.name] = e.target.value  // Mutaci\u00f3n!\n  setFormData(formData)  // React no detecta cambios\n}\n\n// \u2705 BIEN - Crear nuevo objeto\nconst handleChange = (e) =&gt; {\n  setFormData({\n    ...formData,\n    [e.target.name]: e.target.value\n  })\n}\n</code></pre>"},{"location":"sesion_08/#error-2-estado-derivado-innecesario","title":"Error 2: Estado derivado innecesario","text":"<pre><code>// \u274c MAL - Estado redundante\nconst [items, setItems] = useState([])\nconst [itemCount, setItemCount] = useState(0)  // Redundante!\n\nconst addItem = (item) =&gt; {\n  setItems([...items, item])\n  setItemCount(itemCount + 1)  // F\u00e1cil de olvidar\n}\n\n// \u2705 BIEN - Derivar del estado existente\nconst [items, setItems] = useState([])\nconst itemCount = items.length  // Siempre sincronizado\n</code></pre>"},{"location":"sesion_08/#error-3-validacion-solo-en-submit","title":"Error 3: Validaci\u00f3n solo en submit","text":"<pre><code>// \u274c MAL - UX pobre\nconst handleSubmit = (e) =&gt; {\n  e.preventDefault()\n  // Solo validar aqu\u00ed frustar\u00e1 al usuario\n  if (!validarTodo()) {\n    alert('Formulario inv\u00e1lido')\n  }\n}\n\n// \u2705 BIEN - Validaci\u00f3n progresiva\nconst handleBlur = (e) =&gt; {\n  // Validar cuando el usuario termina con el campo\n  validarCampo(e.target.name, e.target.value)\n}\n</code></pre>"},{"location":"sesion_08/#error-4-no-manejar-estados-de-carga","title":"Error 4: No manejar estados de carga","text":"<pre><code>// \u274c MAL - Sin feedback\nconst handleSubmit = async (e) =&gt; {\n  e.preventDefault()\n  await enviarDatos(formData)\n}\n\n// \u2705 BIEN - Con estados de UI\nconst handleSubmit = async (e) =&gt; {\n  e.preventDefault()\n  setEnviando(true)\n  setError(null)\n\n  try {\n    await enviarDatos(formData)\n    setExito(true)\n  } catch (err) {\n    setError(err.message)\n  } finally {\n    setEnviando(false)\n  }\n}\n</code></pre>"},{"location":"sesion_08/#error-5-re-renders-innecesarios","title":"Error 5: Re-renders innecesarios","text":"<pre><code>// \u274c MAL - Crear funciones en el render\n&lt;input onChange={(e) =&gt; setValor(e.target.value)} /&gt;\n\n// \u2705 BIEN - Funci\u00f3n estable\nconst handleChange = useCallback((e) =&gt; {\n  setValor(e.target.value)\n}, [])\n\n&lt;input onChange={handleChange} /&gt;\n</code></pre>"},{"location":"sesion_08/#resumen-y-mejores-practicas","title":"\ud83c\udfaf Resumen y Mejores Pr\u00e1cticas","text":""},{"location":"sesion_08/#checklist-para-formularios","title":"Checklist para formularios","text":"<p>\u2705 Formularios controlados para mayor control \u2705 Validaci\u00f3n en tiempo real con feedback visual \u2705 Estados de carga para mejor UX \u2705 Prevenir env\u00edos m\u00faltiples \u2705 Mensajes de error claros y espec\u00edficos \u2705 Formateo autom\u00e1tico cuando sea \u00fatil \u2705 Accesibilidad (labels, ARIA, navegaci\u00f3n por teclado)</p>"},{"location":"sesion_08/#checklist-para-estados-derivados","title":"Checklist para estados derivados","text":"<p>\u2705 Calcular en lugar de almacenar cuando sea posible \u2705 useMemo para c\u00e1lculos costosos \u2705 Evitar duplicaci\u00f3n de estado \u2705 Mantener \u00fanica fuente de verdad \u2705 Derivar filtros y transformaciones</p>"},{"location":"sesion_08/#patrones-recomendados","title":"Patrones recomendados","text":"<pre><code>// 1. Hook personalizado para l\u00f3gica reutilizable\nconst { valores, errores, handleChange, handleSubmit } = useForm(inicial, validaciones)\n\n// 2. Estados derivados para UI\nconst puedeEnviar = formularioValido &amp;&amp; !enviando\n\n// 3. Composici\u00f3n de componentes\n&lt;Campo label=\"Email\" error={errores.email}&gt;\n  &lt;Input {...campEmail} /&gt;\n&lt;/Campo&gt;\n\n// 4. Validaci\u00f3n progresiva\nonBlur={validarCampo} // No solo en submit\n</code></pre>"},{"location":"sesion_08/#recursos-adicionales","title":"Recursos adicionales","text":"<ol> <li>React Hook Form: Librer\u00eda para formularios complejos</li> <li>Formik: Alternativa popular</li> <li>Yup: Esquemas de validaci\u00f3n</li> <li>React Select: Selects avanzados</li> <li>React Datepicker: Selectores de fecha</li> </ol> <p>\u00a1Con estos conocimientos puedes crear formularios robustos y experiencias de usuario fluidas! onChange={handleChange} /&gt; <pre><code>### El flujo de datos en formularios React\n</code></pre> Usuario escribe \u2192 onChange \u2192 setState \u2192 Re-render \u2192 value actualizado         \u2191                                                    \u2193         \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 UI actualizada \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 <pre><code>---\n\n## \ud83c\udfae Formularios Controlados vs No Controlados &lt;a name=\"controlados-vs-no-controlados\"&gt;&lt;/a&gt;\n\n### Formularios Controlados (Recomendado)\n\nEn un componente controlado, React controla el valor del input en todo momento:\n\n```jsx\nfunction FormularioControlado() {\n  const [nombre, setNombre] = useState('')\n\n  // React controla el valor\n  return (\n    &lt;input \n      type=\"text\"\n      value={nombre}                        // Valor viene del estado\n      onChange={(e) =&gt; setNombre(e.target.value)}  // Estado se actualiza\n    /&gt;\n  )\n}\n</code></pre></p> <p>Ventajas: - \u2705 Single source of truth - \u2705 Validaci\u00f3n en tiempo real - \u2705 Formateo instant\u00e1neo - \u2705 Control total sobre el input</p>"},{"location":"sesion_08/#formularios-no-controlados","title":"Formularios No Controlados","text":"<p>El DOM mantiene el estado, React lo lee cuando lo necesita:</p> <pre><code>function FormularioNoControlado() {\n  const inputRef = useRef()\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault()\n    console.log(inputRef.current.value)  // Lee el valor del DOM\n  }\n\n  // React NO controla el valor\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input type=\"text\" ref={inputRef} /&gt;\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre> <p>Cu\u00e1ndo usar no controlados: - Integraci\u00f3n con librer\u00edas no-React - Formularios muy simples - Archivos (file input)</p>"},{"location":"sesion_08/#comparacion-visual","title":"Comparaci\u00f3n visual","text":"<pre><code>CONTROLADO:\nEstado React: \"Hola\"\n     \u2193 (value)\n   Input\n     \u2193 (onChange)\nEstado React: \"Hola M\"\n\nNO CONTROLADO:\nEstado DOM: \"Hola\"\n   Input\nEstado React: null (hasta que lo leas)\n</code></pre>"},{"location":"sesion_08/#manejo-de-diferentes-tipos-de-inputs","title":"\ud83d\udccb Manejo de Diferentes Tipos de Inputs","text":""},{"location":"sesion_08/#1-input-de-texto","title":"1. Input de texto","text":"<pre><code>function FormularioCompleto() {\n  const [formData, setFormData] = useState({\n    nombre: '',\n    email: '',\n    edad: '',\n    biografia: '',\n    pais: '',\n    genero: '',\n    suscrito: false,\n    plan: 'basico',\n    intereses: []\n  })\n\n  // Manejador gen\u00e9rico para inputs de texto\n  const handleInputChange = (e) =&gt; {\n    const { name, value } = e.target\n    setFormData(prev =&gt; ({\n      ...prev,\n      [name]: value\n    }))\n  }\n\n  return (\n    &lt;form&gt;\n      {/* Input de texto simple */}\n      &lt;input\n        type=\"text\"\n        name=\"nombre\"\n        value={formData.nombre}\n        onChange={handleInputChange}\n        placeholder=\"Tu nombre\"\n      /&gt;\n\n      {/* Input de email con validaci\u00f3n HTML5 */}\n      &lt;input\n        type=\"email\"\n        name=\"email\"\n        value={formData.email}\n        onChange={handleInputChange}\n        placeholder=\"tu@email.com\"\n        required\n      /&gt;\n\n      {/* Input num\u00e9rico */}\n      &lt;input\n        type=\"number\"\n        name=\"edad\"\n        value={formData.edad}\n        onChange={handleInputChange}\n        min=\"18\"\n        max=\"100\"\n      /&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_08/#2-textarea","title":"2. Textarea","text":"<pre><code>{/* Textarea para texto largo */}\n&lt;textarea\n  name=\"biografia\"\n  value={formData.biografia}\n  onChange={handleInputChange}\n  rows=\"4\"\n  placeholder=\"Cu\u00e9ntanos sobre ti...\"\n  maxLength=\"500\"\n/&gt;\n&lt;span&gt;{formData.biografia.length}/500&lt;/span&gt;\n</code></pre>"},{"location":"sesion_08/#3-select-dropdown","title":"3. Select (Dropdown)","text":"<pre><code>{/* Select simple */}\n&lt;select \n  name=\"pais\" \n  value={formData.pais} \n  onChange={handleInputChange}\n&gt;\n  &lt;option value=\"\"&gt;Selecciona un pa\u00eds&lt;/option&gt;\n  &lt;option value=\"mx\"&gt;M\u00e9xico&lt;/option&gt;\n  &lt;option value=\"es\"&gt;Espa\u00f1a&lt;/option&gt;\n  &lt;option value=\"ar\"&gt;Argentina&lt;/option&gt;\n&lt;/select&gt;\n\n{/* Select con grupos */}\n&lt;select name=\"idioma\" value={formData.idioma} onChange={handleInputChange}&gt;\n  &lt;optgroup label=\"M\u00e1s comunes\"&gt;\n    &lt;option value=\"es\"&gt;Espa\u00f1ol&lt;/option&gt;\n    &lt;option value=\"en\"&gt;Ingl\u00e9s&lt;/option&gt;\n  &lt;/optgroup&gt;\n  &lt;optgroup label=\"Otros\"&gt;\n    &lt;option value=\"fr\"&gt;Franc\u00e9s&lt;/option&gt;\n    &lt;option value=\"de\"&gt;Alem\u00e1n&lt;/option&gt;\n  &lt;/optgroup&gt;\n&lt;/select&gt;\n</code></pre>"},{"location":"sesion_08/#4-radio-buttons","title":"4. Radio Buttons","text":"<pre><code>{/* Radio buttons - solo uno puede estar seleccionado */}\n&lt;fieldset&gt;\n  &lt;legend&gt;G\u00e9nero:&lt;/legend&gt;\n\n  &lt;label&gt;\n    &lt;input\n      type=\"radio\"\n      name=\"genero\"\n      value=\"masculino\"\n      checked={formData.genero === 'masculino'}\n      onChange={handleInputChange}\n    /&gt;\n    Masculino\n  &lt;/label&gt;\n\n  &lt;label&gt;\n    &lt;input\n      type=\"radio\"\n      name=\"genero\"\n      value=\"femenino\"\n      checked={formData.genero === 'femenino'}\n      onChange={handleInputChange}\n    /&gt;\n    Femenino\n  &lt;/label&gt;\n\n  &lt;label&gt;\n    &lt;input\n      type=\"radio\"\n      name=\"genero\"\n      value=\"otro\"\n      checked={formData.genero === 'otro'}\n      onChange={handleInputChange}\n    /&gt;\n    Otro\n  &lt;/label&gt;\n&lt;/fieldset&gt;\n</code></pre>"},{"location":"sesion_08/#5-checkboxes","title":"5. Checkboxes","text":"<pre><code>// Checkbox simple (booleano)\nconst handleCheckboxChange = (e) =&gt; {\n  const { name, checked } = e.target\n  setFormData(prev =&gt; ({\n    ...prev,\n    [name]: checked\n  }))\n}\n\n&lt;label&gt;\n  &lt;input\n    type=\"checkbox\"\n    name=\"suscrito\"\n    checked={formData.suscrito}\n    onChange={handleCheckboxChange}\n  /&gt;\n  Suscribirme al newsletter\n&lt;/label&gt;\n\n// Checkbox m\u00faltiple (array)\nconst handleInteresesChange = (e) =&gt; {\n  const { value, checked } = e.target\n  setFormData(prev =&gt; ({\n    ...prev,\n    intereses: checked\n      ? [...prev.intereses, value]\n      : prev.intereses.filter(i =&gt; i !== value)\n  }))\n}\n\n&lt;fieldset&gt;\n  &lt;legend&gt;Intereses:&lt;/legend&gt;\n  {['tecnologia', 'deportes', 'musica', 'lectura'].map(interes =&gt; (\n    &lt;label key={interes}&gt;\n      &lt;input\n        type=\"checkbox\"\n        value={interes}\n        checked={formData.intereses.includes(interes)}\n        onChange={handleInteresesChange}\n      /&gt;\n      {interes}\n    &lt;/label&gt;\n  ))}\n&lt;/fieldset&gt;\n</code></pre>"},{"location":"sesion_08/#6-file-input-caso-especial","title":"6. File Input (caso especial)","text":"<pre><code>// File input es siempre no controlado\nconst [archivo, setArchivo] = useState(null)\nconst [preview, setPreview] = useState(null)\n\nconst handleFileChange = (e) =&gt; {\n  const file = e.target.files[0]\n  if (file) {\n    setArchivo(file)\n\n    // Preview para im\u00e1genes\n    if (file.type.startsWith('image/')) {\n      const reader = new FileReader()\n      reader.onloadend = () =&gt; {\n        setPreview(reader.result)\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n}\n\n&lt;div&gt;\n  &lt;input\n    type=\"file\"\n    onChange={handleFileChange}\n    accept=\"image/*\"\n  /&gt;\n  {preview &amp;&amp; &lt;img src={preview} alt=\"Preview\" style={{width: 200}} /&gt;}\n  {archivo &amp;&amp; &lt;p&gt;Archivo: {archivo.name} ({archivo.size} bytes)&lt;/p&gt;}\n&lt;/div&gt;\n</code></pre>"},{"location":"sesion_08/#manejador-universal-para-todos-los-tipos","title":"Manejador universal para todos los tipos","text":"<pre><code>const handleChange = (e) =&gt; {\n  const { name, value, type, checked, files } = e.target\n\n  let newValue\n\n  switch (type) {\n    case 'checkbox':\n      newValue = checked\n      break\n    case 'file':\n      newValue = files[0]\n      break\n    case 'number':\n      newValue = parseInt(value) || 0\n      break\n    default:\n      newValue = value\n  }\n\n  setFormData(prev =&gt; ({\n    ...prev,\n    [name]: newValue\n  }))\n}\n</code></pre>"},{"location":"sesion_08/#validacion-de-formularios","title":"\u2705 Validaci\u00f3n de Formularios","text":""},{"location":"sesion_08/#validacion-en-tiempo-real","title":"Validaci\u00f3n en tiempo real","text":"<pre><code>function FormularioConValidacion() {\n  const [valores, setValores] = useState({\n    email: '',\n    password: '',\n    confirmPassword: ''\n  })\n\n  const [errores, setErrores] = useState({})\n  const [tocados, setTocados] = useState({})\n\n  // Reglas de validaci\u00f3n\n  const validaciones = {\n    email: (valor) =&gt; {\n      if (!valor) return 'El email es requerido'\n      if (!/\\S+@\\S+\\.\\S+/.test(valor)) return 'Email inv\u00e1lido'\n      return ''\n    },\n    password: (valor) =&gt; {\n      if (!valor) return 'La contrase\u00f1a es requerida'\n      if (valor.length &lt; 8) return 'M\u00ednimo 8 caracteres'\n      if (!/(?=.*[a-z])/.test(valor)) return 'Debe tener min\u00fasculas'\n      if (!/(?=.*[A-Z])/.test(valor)) return 'Debe tener may\u00fasculas'\n      if (!/(?=.*\\d)/.test(valor)) return 'Debe tener n\u00fameros'\n      return ''\n    },\n    confirmPassword: (valor) =&gt; {\n      if (!valor) return 'Confirma tu contrase\u00f1a'\n      if (valor !== valores.password) return 'Las contrase\u00f1as no coinciden'\n      return ''\n    }\n  }\n\n  // Validar un campo\n  const validarCampo = (nombre, valor) =&gt; {\n    const error = validaciones[nombre](valor)\n    setErrores(prev =&gt; ({\n      ...prev,\n      [nombre]: error\n    }))\n    return error\n  }\n\n  // Manejar cambios\n  const handleChange = (e) =&gt; {\n    const { name, value } = e.target\n\n    setValores(prev =&gt; ({\n      ...prev,\n      [name]: value\n    }))\n\n    // Validar si el campo ha sido tocado\n    if (tocados[name]) {\n      validarCampo(name, value)\n    }\n  }\n\n  // Manejar blur (campo pierde foco)\n  const handleBlur = (e) =&gt; {\n    const { name, value } = e.target\n\n    setTocados(prev =&gt; ({\n      ...prev,\n      [name]: true\n    }))\n\n    validarCampo(name, value)\n  }\n\n  // Validar todo el formulario\n  const validarFormulario = () =&gt; {\n    const nuevosErrores = {}\n    let esValido = true\n\n    Object.keys(valores).forEach(campo =&gt; {\n      const error = validaciones[campo](valores[campo])\n      if (error) {\n        nuevosErrores[campo] = error\n        esValido = false\n      }\n    })\n\n    setErrores(nuevosErrores)\n    setTocados(Object.keys(valores).reduce((acc, campo) =&gt; ({\n      ...acc,\n      [campo]: true\n    }), {}))\n\n    return esValido\n  }\n\n  // Manejar submit\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault()\n\n    if (validarFormulario()) {\n      console.log('Formulario v\u00e1lido:', valores)\n      // Enviar datos\n    } else {\n      console.log('Formulario con errores')\n    }\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;div className=\"campo-form\"&gt;\n        &lt;input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          value={valores.email}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          className={errores.email &amp;&amp; tocados.email ? 'error' : ''}\n        /&gt;\n        {errores.email &amp;&amp; tocados.email &amp;&amp; (\n          &lt;span className=\"mensaje-error\"&gt;{errores.email}&lt;/span&gt;\n        )}\n      &lt;/div&gt;\n\n      &lt;div className=\"campo-form\"&gt;\n        &lt;input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Contrase\u00f1a\"\n          value={valores.password}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          className={errores.password &amp;&amp; tocados.password ? 'error' : ''}\n        /&gt;\n        {errores.password &amp;&amp; tocados.password &amp;&amp; (\n          &lt;span className=\"mensaje-error\"&gt;{errores.password}&lt;/span&gt;\n        )}\n\n        {/* Indicador de fuerza de contrase\u00f1a */}\n        {valores.password &amp;&amp; (\n          &lt;IndicadorFuerza password={valores.password} /&gt;\n        )}\n      &lt;/div&gt;\n\n      &lt;div className=\"campo-form\"&gt;\n        &lt;input\n          type=\"password\"\n          name=\"confirmPassword\"\n          placeholder=\"Confirmar contrase\u00f1a\"\n          value={valores.confirmPassword}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          className={errores.confirmPassword &amp;&amp; tocados.confirmPassword ? 'error' : ''}\n        /&gt;\n        {errores.confirmPassword &amp;&amp; tocados.confirmPassword &amp;&amp; (\n          &lt;span className=\"mensaje-error\"&gt;{errores.confirmPassword}&lt;/span&gt;\n        )}\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\"&gt;Registrarse&lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n\n// Componente indicador de fuerza\nfunction IndicadorFuerza({ password }) {\n  const calcularFuerza = () =&gt; {\n    let fuerza = 0\n    if (password.length &gt;= 8) fuerza++\n    if (password.length &gt;= 12) fuerza++\n    if (/[a-z]/.test(password) &amp;&amp; /[A-Z]/.test(password)) fuerza++\n    if (/\\d/.test(password)) fuerza++\n    if (/[^A-Za-z0-9]/.test(password)) fuerza++\n    return fuerza\n  }\n\n  const fuerza = calcularFuerza()\n  const niveles = ['Muy d\u00e9bil', 'D\u00e9bil', 'Media', 'Fuerte', 'Muy fuerte']\n  const colores = ['#e74c3c', '#e67e22', '#f39c12', '#2ecc71', '#27ae60']\n\n  return (\n    &lt;div className=\"indicador-fuerza\"&gt;\n      &lt;div className=\"barras\"&gt;\n        {[...Array(5)].map((_, i) =&gt; (\n          &lt;div\n            key={i}\n            className=\"barra\"\n            style={{\n              backgroundColor: i &lt; fuerza ? colores[fuerza - 1] : '#ecf0f1'\n            }}\n          /&gt;\n        ))}\n      &lt;/div&gt;\n      &lt;span style={{ color: colores[Math.max(0, fuerza - 1)] }}&gt;\n        {niveles[Math.max(0, fuerza - 1)]}\n      &lt;/span&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_08/#hook-personalizado-para-formularios","title":"Hook personalizado para formularios","text":"<pre><code>// useForm.js - Hook reutilizable\nfunction useForm(valoresIniciales, validaciones) {\n  const [valores, setValores] = useState(valoresIniciales)\n  const [errores, setErrores] = useState({})\n  const [tocados, setTocados] = useState({})\n  const [enviando, setEnviando] = useState(false)\n\n  const handleChange = (e) =&gt; {\n    const { name, value, type, checked } = e.target\n    const nuevoValor = type === 'checkbox' ? checked : value\n\n    setValores(prev =&gt; ({\n      ...prev,\n      [name]: nuevoValor\n    }))\n\n    // Validar si ya fue tocado\n    if (tocados[name] &amp;&amp; validaciones[name]) {\n      const error = validaciones[name](nuevoValor, valores)\n      setErrores(prev =&gt; ({\n        ...prev,\n        [name]: error\n      }))\n    }\n  }\n\n  const handleBlur = (e) =&gt; {\n    const { name } = e.target\n\n    setTocados(prev =&gt; ({\n      ...prev,\n      [name]: true\n    }))\n\n    if (validaciones[name]) {\n      const error = validaciones[name](valores[name], valores)\n      setErrores(prev =&gt; ({\n        ...prev,\n        [name]: error\n      }))\n    }\n  }\n\n  const validarTodo = () =&gt; {\n    const nuevosErrores = {}\n    let esValido = true\n\n    Object.keys(validaciones).forEach(campo =&gt; {\n      const error = validaciones[campo](valores[campo], valores)\n      if (error) {\n        nuevosErrores[campo] = error\n        esValido = false\n      }\n    })\n\n    setErrores(nuevosErrores)\n    return esValido\n  }\n\n  const resetForm = () =&gt; {\n    setValores(valoresIniciales)\n    setErrores({})\n    setTocados({})\n    setEnviando(false)\n  }\n\n  return {\n    valores,\n    errores,\n    tocados,\n    enviando,\n    handleChange,\n    handleBlur,\n    validarTodo,\n    resetForm,\n    setEnviando\n  }\n}\n\n// Uso del hook\nfunction FormularioContacto() {\n  const validaciones = {\n    nombre: (valor) =&gt; {\n      if (!valor) return 'El nombre es requerido'\n      if (valor.length &lt; 3) return 'M\u00ednimo 3 caracteres'\n      return ''\n    },\n    email: (valor) =&gt; {\n      if (!valor) return 'El email es requerido'\n      if (!/\\S+@\\S+\\.\\S+/.test(valor)) return 'Email inv\u00e1lido'\n      return ''\n    },\n    mensaje: (valor) =&gt; {\n      if (!valor) return 'El mensaje es requerido'\n      if (valor.length &lt; 10) return 'M\u00ednimo 10 caracteres'\n      return ''\n    }\n  }\n\n  const {\n    valores,\n    errores,\n    tocados,\n    enviando,\n    handleChange,\n    handleBlur,\n    validarTodo,\n    resetForm,\n    setEnviando\n  } = useForm(\n    { nombre: '', email: '', mensaje: '' },\n    validaciones\n  )\n\n  const handleSubmit = async (e) =&gt; {\n    e.preventDefault()\n\n    if (validarTodo()) {\n      setEnviando(true)\n\n      try {\n        // Simular env\u00edo\n        await new Promise(resolve =&gt; setTimeout(resolve, 2000))\n        console.log('Enviado:', valores)\n        resetForm()\n        alert('\u00a1Mensaje enviado!')\n      } catch (error) {\n        alert('Error al enviar')\n      } finally {\n        setEnviando(false)\n      }\n    }\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      {/* Campos del formulario usando el hook */}\n      &lt;input\n        name=\"nombre\"\n        value={valores.nombre}\n        onChange={handleChange}\n        onBlur={handleBlur}\n      /&gt;\n      {errores.nombre &amp;&amp; tocados.nombre &amp;&amp; &lt;span&gt;{errores.nombre}&lt;/span&gt;}\n\n      {/* M\u00e1s campos... */}\n\n      &lt;button type=\"submit\" disabled={enviando}&gt;\n        {enviando ? 'Enviando...' : 'Enviar'}\n      &lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_08/#estados-derivados","title":"\ud83d\udcca Estados Derivados","text":""},{"location":"sesion_08/#que-es-un-estado-derivado","title":"\u00bfQu\u00e9 es un estado derivado?","text":"<p>Estado derivado es informaci\u00f3n que puede ser calculada a partir de otro estado existente, en lugar de almacenarla separadamente.</p> <pre><code>// \u274c MAL - Estado redundante\nfunction ListaCompras() {\n  const [items, setItems] = useState([])\n  const [total, setTotal] = useState(0)  // \u00a1Estado redundante!\n\n  const agregarItem = (item) =&gt; {\n    setItems([...items, item])\n    // F\u00e1cil de olvidar actualizar el total\n    setTotal(total + item.precio)  // Puede desincronizarse\n  }\n}\n\n// \u2705 BIEN - Estado derivado\nfunction ListaCompras() {\n  const [items, setItems] = useState([])\n\n  // Calculado cuando se necesita\n  const total = items.reduce((sum, item) =&gt; sum + item.precio, 0)\n\n  const agregarItem = (item) =&gt; {\n    setItems([...items, item])\n    // No necesitas actualizar el total manualmente\n  }\n}\n</code></pre>"},{"location":"sesion_08/#ejemplos-de-estados-derivados","title":"Ejemplos de estados derivados","text":""},{"location":"sesion_08/#1-filtrado-y-busqueda","title":"1. Filtrado y b\u00fasqueda","text":"<pre><code>function ListaUsuarios() {\n  // Estados primarios\n  const [usuarios, setUsuarios] = useState([\n    { id: 1, nombre: 'Ana', activo: true, rol: 'admin' },\n    { id: 2, nombre: 'Carlos', activo: false, rol: 'user' },\n    { id: 3, nombre: 'Beatriz', activo: true, rol: 'user' }\n  ])\n  const [busqueda, setBusqueda] = useState('')\n  const [filtroRol, setFiltroRol] = useState('todos')\n  const [soloActivos, setSoloActivos] = useState(false)\n\n  // Estados derivados - calculados a partir de los primarios\n  const usuariosFiltrados = usuarios\n    .filter(usuario =&gt; {\n      // Filtro por b\u00fasqueda\n      if (busqueda &amp;&amp; !usuario.nombre.toLowerCase().includes(busqueda.toLowerCase())) {\n        return false\n      }\n      // Filtro por rol\n      if (filtroRol !== 'todos' &amp;&amp; usuario.rol !== filtroRol) {\n        return false\n      }\n      // Filtro por estado\n      if (soloActivos &amp;&amp; !usuario.activo) {\n        return false\n      }\n      return true\n    })\n\n  // M\u00e1s estados derivados\n  const estadisticas = {\n    total: usuarios.length,\n    activos: usuarios.filter(u =&gt; u.activo).length,\n    inactivos: usuarios.filter(u =&gt; !u.activo).length,\n    admins: usuarios.filter(u =&gt; u.rol === 'admin').length,\n    mostrados: usuariosFiltrados.length\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;div className=\"filtros\"&gt;\n        &lt;input\n          type=\"text\"\n          placeholder=\"Buscar por nombre...\"\n          value={busqueda}\n          onChange={(e) =&gt; setBusqueda(e.target.value)}\n        /&gt;\n\n        &lt;select value={filtroRol} onChange={(e) =&gt; setFiltroRol(e.target.value)}&gt;\n          &lt;option value=\"todos\"&gt;Todos los roles&lt;/option&gt;\n          &lt;option value=\"admin\"&gt;Admin&lt;/option&gt;\n          &lt;option value=\"user\"&gt;Usuario&lt;/option&gt;\n        &lt;/select&gt;\n\n        &lt;label&gt;\n          &lt;input\n            type=\"checkbox\"\n            checked={soloActivos}\n            onChange={(e) =&gt; setSoloActivos(e.target.checked)}\n          /&gt;\n          Solo activos\n        &lt;/label&gt;\n      &lt;/div&gt;\n\n      &lt;div className=\"estadisticas\"&gt;\n        &lt;p&gt;Mostrando {estadisticas.mostrados} de {estadisticas.total} usuarios&lt;/p&gt;\n        &lt;p&gt;Activos: {estadisticas.activos} | Inactivos: {estadisticas.inactivos}&lt;/p&gt;\n      &lt;/div&gt;\n\n      &lt;ul&gt;\n        {usuariosFiltrados.map(usuario =&gt; (\n          &lt;li key={usuario.id}&gt;\n            {usuario.nombre} - {usuario.rol} \n            {usuario.activo ? '\u2705' : '\u274c'}\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_08/#2-validacion-y-estado-del-formulario","title":"2. Validaci\u00f3n y estado del formulario","text":"<pre><code>function FormularioAvanzado() {\n  const [campos, setCampos] = useState({\n    nombre: '',\n    email: '',\n    telefono: '',\n    mensaje: ''\n  })\n\n  // Estados derivados de validaci\u00f3n\n  const errores = {\n    nombre: campos.nombre.length &lt; 3 ? 'M\u00ednimo 3 caracteres' : '',\n    email: !campos.email.includes('@') ? 'Email inv\u00e1lido' : '',\n    telefono: campos.telefono &amp;&amp; !/^\\d{10}$/.test(campos.telefono) ? 'Debe ser 10 d\u00edgitos' : '',\n    mensaje: campos.mensaje.length &lt; 10 ? 'M\u00ednimo 10 caracteres' : ''\n  }\n\n  // Estado derivado: \u00bfEl formulario es v\u00e1lido?\n  const formularioValido = Object.values(errores).every(error =&gt; error === '')\n\n  // Estado derivado: \u00bfQu\u00e9 campos est\u00e1n completos?\n  const camposCompletos = Object.entries(campos)\n    .filter(([_, valor]) =&gt; valor !== '')\n    .map(([campo]) =&gt; campo)\n\n  // Estado derivado: Progreso del formulario\n  const progreso = (camposCompletos.length / Object.keys(campos).length) * 100\n\n  return (\n    &lt;form&gt;\n      {/* Barra de progreso */}\n      &lt;div className=\"progreso\"&gt;\n        &lt;div \n          className=\"progreso-barra\" \n          style={{ width: `${progreso}%` }}\n        /&gt;\n        &lt;span&gt;{progreso.toFixed(0)}% completado&lt;/span&gt;\n      &lt;/div&gt;\n\n      {/* Campos del formulario */}\n      {Object.keys(campos).map(campo =&gt; (\n        &lt;div key={campo}&gt;\n          &lt;input\n            name={campo}\n            placeholder={campo}\n            value={campos[campo]}\n            onChange={(e) =&gt; setCampos({\n              ...campos,\n              [e.target.name]: e.target.value\n            })}\n          /&gt;\n          {errores[campo] &amp;&amp; &lt;span className=\"error\"&gt;{errores[campo]}&lt;/span&gt;}\n        &lt;/div&gt;\n      ))}\n\n      &lt;button disabled={!formularioValido}&gt;\n        Enviar\n      &lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/","title":"\ud83d\ude80 Enrutamiento con React Router DOM","text":""},{"location":"sesion_09/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ol> <li>\u00bfQu\u00e9 es React Router y por qu\u00e9 lo necesitamos?</li> <li>Instalaci\u00f3n y configuraci\u00f3n b\u00e1sica</li> <li>Componentes principales de React Router</li> <li>Navegaci\u00f3n entre rutas</li> <li>Rutas din\u00e1micas y par\u00e1metros</li> <li>Rutas anidadas</li> <li>Protecci\u00f3n de rutas</li> <li>Manejo de errores y 404</li> <li>Hooks de React Router</li> <li>Mejores pr\u00e1cticas</li> </ol>"},{"location":"sesion_09/#que-es-react-router-y-por-que-lo-necesitamos","title":"\ud83e\udd14 \u00bfQu\u00e9 es React Router y por qu\u00e9 lo necesitamos?","text":""},{"location":"sesion_09/#el-problema","title":"El problema","text":"<p>React es una SPA (Single Page Application) - toda la aplicaci\u00f3n vive en una sola p\u00e1gina HTML. Pero los usuarios esperan: - URLs diferentes para diferentes p\u00e1ginas - Bot\u00f3n atr\u00e1s/adelante funcional - Poder compartir enlaces - Marcar p\u00e1ginas como favoritos</p>"},{"location":"sesion_09/#la-solucion-react-router","title":"La soluci\u00f3n: React Router","text":"<p>React Router permite crear la ilusi\u00f3n de m\u00faltiples p\u00e1ginas en tu SPA:</p> <pre><code>Sin React Router:               Con React Router:\nmisitioweb.com                  misitioweb.com/\n(Todo en una p\u00e1gina)            misitioweb.com/productos\n                                misitioweb.com/productos/123\n                                misitioweb.com/contacto\n</code></pre>"},{"location":"sesion_09/#conceptos-clave","title":"Conceptos clave","text":"<pre><code>// Navegaci\u00f3n tradicional (recarga toda la p\u00e1gina)\n&lt;a href=\"/productos\"&gt;Productos&lt;/a&gt;  // \u274c Recarga completa\n\n// Navegaci\u00f3n con React Router (solo cambia componentes)\n&lt;Link to=\"/productos\"&gt;Productos&lt;/Link&gt;  // \u2705 Sin recarga\n</code></pre>"},{"location":"sesion_09/#instalacion-y-configuracion-basica","title":"\ud83d\udce6 Instalaci\u00f3n y Configuraci\u00f3n B\u00e1sica","text":""},{"location":"sesion_09/#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>npm install react-router-dom\n</code></pre>"},{"location":"sesion_09/#configuracion-basica-en-mainjsx-o-indexjs","title":"Configuraci\u00f3n b\u00e1sica en main.jsx o index.js","text":"<pre><code>import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  &lt;React.StrictMode&gt;\n    &lt;BrowserRouter&gt;\n      &lt;App /&gt;\n    &lt;/BrowserRouter&gt;\n  &lt;/React.StrictMode&gt;\n)\n</code></pre>"},{"location":"sesion_09/#primera-aplicacion-con-rutas","title":"Primera aplicaci\u00f3n con rutas","text":"<pre><code>// App.jsx\nimport { Routes, Route } from 'react-router-dom'\nimport Home from './pages/Home'\nimport About from './pages/About'\nimport Contact from './pages/Contact'\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n        &lt;Route path=\"/contact\" element={&lt;Contact /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#estructura-de-carpetas-recomendada","title":"Estructura de carpetas recomendada","text":"<pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 Layout.jsx\n\u2502   \u251c\u2500\u2500 Navbar.jsx\n\u2502   \u2514\u2500\u2500 Footer.jsx\n\u251c\u2500\u2500 pages/\n\u2502   \u251c\u2500\u2500 Home.jsx\n\u2502   \u251c\u2500\u2500 About.jsx\n\u2502   \u251c\u2500\u2500 Products.jsx\n\u2502   \u2514\u2500\u2500 ProductDetail.jsx\n\u251c\u2500\u2500 App.jsx\n\u2514\u2500\u2500 main.jsx\n</code></pre>"},{"location":"sesion_09/#componentes-principales-de-react-router","title":"\ud83e\udde9 Componentes Principales de React Router","text":""},{"location":"sesion_09/#1-browserrouter","title":"1. BrowserRouter","text":"<p>Envuelve toda tu aplicaci\u00f3n y habilita el enrutamiento:</p> <pre><code>&lt;BrowserRouter&gt;\n  &lt;App /&gt;\n&lt;/BrowserRouter&gt;\n</code></pre> <p>Alternativas: - <code>HashRouter</code>: Usa # en las URLs (ejemplo.com/#/productos) - <code>MemoryRouter</code>: Para testing o apps sin URL</p>"},{"location":"sesion_09/#2-routes-y-route","title":"2. Routes y Route","text":"<p>Define qu\u00e9 componente mostrar para cada ruta:</p> <pre><code>&lt;Routes&gt;\n  &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n  &lt;Route path=\"/productos\" element={&lt;Productos /&gt;} /&gt;\n  &lt;Route path=\"/productos/:id\" element={&lt;ProductoDetalle /&gt;} /&gt;\n  &lt;Route path=\"*\" element={&lt;NotFound /&gt;} /&gt;\n&lt;/Routes&gt;\n</code></pre>"},{"location":"sesion_09/#3-link-y-navlink","title":"3. Link y NavLink","text":"<p>Para navegaci\u00f3n sin recargar la p\u00e1gina:</p> <pre><code>import { Link, NavLink } from 'react-router-dom'\n\nfunction Navbar() {\n  return (\n    &lt;nav&gt;\n      {/* Link b\u00e1sico */}\n      &lt;Link to=\"/\"&gt;Inicio&lt;/Link&gt;\n\n      {/* NavLink con clase activa */}\n      &lt;NavLink \n        to=\"/productos\"\n        className={({ isActive }) =&gt; isActive ? 'active' : ''}\n      &gt;\n        Productos\n      &lt;/NavLink&gt;\n\n      {/* NavLink con estilos inline */}\n      &lt;NavLink\n        to=\"/contacto\"\n        style={({ isActive }) =&gt; ({\n          color: isActive ? '#3498db' : '#333',\n          fontWeight: isActive ? 'bold' : 'normal'\n        })}\n      &gt;\n        Contacto\n      &lt;/NavLink&gt;\n    &lt;/nav&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#4-outlet-para-layouts","title":"4. Outlet (para layouts)","text":"<p>Permite crear layouts que envuelven m\u00faltiples p\u00e1ginas:</p> <pre><code>// Layout.jsx\nimport { Outlet, Link } from 'react-router-dom'\n\nfunction Layout() {\n  return (\n    &lt;div&gt;\n      &lt;header&gt;\n        &lt;nav&gt;\n          &lt;Link to=\"/\"&gt;Inicio&lt;/Link&gt;\n          &lt;Link to=\"/productos\"&gt;Productos&lt;/Link&gt;\n          &lt;Link to=\"/contacto\"&gt;Contacto&lt;/Link&gt;\n        &lt;/nav&gt;\n      &lt;/header&gt;\n\n      &lt;main&gt;\n        &lt;Outlet /&gt; {/* Aqu\u00ed se renderiza la ruta actual */}\n      &lt;/main&gt;\n\n      &lt;footer&gt;\n        &lt;p&gt;\u00a9 2024 Mi Tienda&lt;/p&gt;\n      &lt;/footer&gt;\n    &lt;/div&gt;\n  )\n}\n\n// App.jsx\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\n        &lt;Route index element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"productos\" element={&lt;Productos /&gt;} /&gt;\n        &lt;Route path=\"contacto\" element={&lt;Contacto /&gt;} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#navegacion-entre-rutas","title":"\ud83e\udded Navegaci\u00f3n entre Rutas","text":""},{"location":"sesion_09/#1-navegacion-declarativa-con-link","title":"1. Navegaci\u00f3n declarativa con Link","text":"<pre><code>// Navegaci\u00f3n simple\n&lt;Link to=\"/productos\"&gt;Ver productos&lt;/Link&gt;\n\n// Con estado\n&lt;Link \n  to=\"/checkout\"\n  state={{ from: 'carrito' }}\n&gt;\n  Proceder al pago\n&lt;/Link&gt;\n\n// Link con query params\n&lt;Link to=\"/buscar?q=zapatos&amp;categoria=deportes\"&gt;\n  Buscar zapatos deportivos\n&lt;/Link&gt;\n\n// Link relativo\n&lt;Link to=\"editar\"&gt;Editar&lt;/Link&gt;  // Si est\u00e1s en /productos/123 \u2192 /productos/123/editar\n\n// Link absoluto\n&lt;Link to=\"/productos/nuevo\"&gt;Nuevo producto&lt;/Link&gt;\n</code></pre>"},{"location":"sesion_09/#2-navegacion-programatica-con-usenavigate","title":"2. Navegaci\u00f3n program\u00e1tica con useNavigate","text":"<pre><code>import { useNavigate } from 'react-router-dom'\n\nfunction LoginForm() {\n  const navigate = useNavigate()\n\n  const handleSubmit = async (e) =&gt; {\n    e.preventDefault()\n\n    try {\n      await loginAPI()\n\n      // Navegar despu\u00e9s del login exitoso\n      navigate('/dashboard')\n\n      // Navegar con reemplazo (no agrega al historial)\n      navigate('/dashboard', { replace: true })\n\n      // Navegar con estado\n      navigate('/perfil', { \n        state: { mensaje: 'Login exitoso' }\n      })\n\n    } catch (error) {\n      // Manejar error\n    }\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      {/* Campos del formulario */}\n\n      {/* Navegaci\u00f3n en el historial */}\n      &lt;button type=\"button\" onClick={() =&gt; navigate(-1)}&gt;\n        Volver\n      &lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#3-navigate-componente","title":"3. Navigate (componente)","text":"<p>Para redirecciones condicionales:</p> <pre><code>import { Navigate } from 'react-router-dom'\n\nfunction PrivatePage() {\n  const isAuthenticated = useAuth()\n\n  if (!isAuthenticated) {\n    return &lt;Navigate to=\"/login\" replace /&gt;\n  }\n\n  return &lt;div&gt;Contenido privado&lt;/div&gt;\n}\n</code></pre>"},{"location":"sesion_09/#rutas-dinamicas-y-parametros","title":"\ud83d\udd27 Rutas Din\u00e1micas y Par\u00e1metros","text":""},{"location":"sesion_09/#1-parametros-de-ruta-useparams","title":"1. Par\u00e1metros de ruta (useParams)","text":"<pre><code>// Definir ruta con par\u00e1metro\n&lt;Route path=\"/productos/:id\" element={&lt;ProductoDetalle /&gt;} /&gt;\n&lt;Route path=\"/usuarios/:userId/posts/:postId\" element={&lt;Post /&gt;} /&gt;\n\n// Componente que usa los par\u00e1metros\nimport { useParams } from 'react-router-dom'\n\nfunction ProductoDetalle() {\n  const { id } = useParams()\n  const [producto, setProducto] = useState(null)\n\n  useEffect(() =&gt; {\n    // Cargar producto usando el ID\n    fetch(`/api/productos/${id}`)\n      .then(res =&gt; res.json())\n      .then(setProducto)\n  }, [id])\n\n  if (!producto) return &lt;div&gt;Cargando...&lt;/div&gt;\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{producto.nombre}&lt;/h1&gt;\n      &lt;p&gt;ID del producto: {id}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#2-query-parameters-usesearchparams","title":"2. Query Parameters (useSearchParams)","text":"<pre><code>// URL: /buscar?q=laptop&amp;categoria=tecnologia&amp;precio=1000-2000\nimport { useSearchParams } from 'react-router-dom'\n\nfunction BuscarProductos() {\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  // Leer par\u00e1metros\n  const query = searchParams.get('q') || ''\n  const categoria = searchParams.get('categoria') || 'todas'\n  const precio = searchParams.get('precio') || ''\n\n  // Actualizar par\u00e1metros\n  const handleFiltroCategoria = (nuevaCategoria) =&gt; {\n    setSearchParams(prev =&gt; {\n      prev.set('categoria', nuevaCategoria)\n      return prev\n    })\n  }\n\n  // Eliminar par\u00e1metro\n  const limpiarFiltros = () =&gt; {\n    setSearchParams({})\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Resultados para: {query}&lt;/h1&gt;\n\n      &lt;div className=\"filtros\"&gt;\n        &lt;select \n          value={categoria}\n          onChange={(e) =&gt; handleFiltroCategoria(e.target.value)}\n        &gt;\n          &lt;option value=\"todas\"&gt;Todas las categor\u00edas&lt;/option&gt;\n          &lt;option value=\"tecnologia\"&gt;Tecnolog\u00eda&lt;/option&gt;\n          &lt;option value=\"ropa\"&gt;Ropa&lt;/option&gt;\n        &lt;/select&gt;\n\n        &lt;button onClick={limpiarFiltros}&gt;\n          Limpiar filtros\n        &lt;/button&gt;\n      &lt;/div&gt;\n\n      {/* Mostrar productos filtrados */}\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#3-rutas-opcionales-y-comodines","title":"3. Rutas opcionales y comodines","text":"<pre><code>// Par\u00e1metro opcional\n&lt;Route path=\"/blog/:year?/:month?\" element={&lt;Blog /&gt;} /&gt;\n\n// M\u00faltiples segmentos (catch-all)\n&lt;Route path=\"/docs/*\" element={&lt;Documentation /&gt;} /&gt;\n\n// En el componente Documentation\nfunction Documentation() {\n  const location = useLocation()\n  // location.pathname podr\u00eda ser /docs/react/hooks/useState\n\n  const segments = location.pathname.split('/').slice(2)\n  // ['react', 'hooks', 'useState']\n}\n</code></pre>"},{"location":"sesion_09/#rutas-anidadas","title":"\ud83c\udfd7\ufe0f Rutas Anidadas","text":""},{"location":"sesion_09/#configuracion-de-rutas-anidadas","title":"Configuraci\u00f3n de rutas anidadas","text":"<pre><code>// App.jsx\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\n        &lt;Route index element={&lt;Home /&gt;} /&gt;\n\n        {/* Rutas anidadas de productos */}\n        &lt;Route path=\"productos\" element={&lt;ProductosLayout /&gt;}&gt;\n          &lt;Route index element={&lt;ProductosLista /&gt;} /&gt;\n          &lt;Route path=\"nuevo\" element={&lt;ProductoNuevo /&gt;} /&gt;\n          &lt;Route path=\":id\" element={&lt;ProductoDetalle /&gt;} /&gt;\n          &lt;Route path=\":id/editar\" element={&lt;ProductoEditar /&gt;} /&gt;\n        &lt;/Route&gt;\n\n        {/* Rutas anidadas de usuario */}\n        &lt;Route path=\"cuenta\" element={&lt;CuentaLayout /&gt;}&gt;\n          &lt;Route index element={&lt;Perfil /&gt;} /&gt;\n          &lt;Route path=\"pedidos\" element={&lt;Pedidos /&gt;} /&gt;\n          &lt;Route path=\"configuracion\" element={&lt;Configuracion /&gt;} /&gt;\n        &lt;/Route&gt;\n      &lt;/Route&gt;\n\n      {/* Ruta fuera del layout principal */}\n      &lt;Route path=\"/login\" element={&lt;Login /&gt;} /&gt;\n      &lt;Route path=\"*\" element={&lt;NotFound /&gt;} /&gt;\n    &lt;/Routes&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#layout-para-seccion-de-productos","title":"Layout para secci\u00f3n de productos","text":"<pre><code>// ProductosLayout.jsx\nimport { Outlet, NavLink } from 'react-router-dom'\n\nfunction ProductosLayout() {\n  return (\n    &lt;div className=\"productos-container\"&gt;\n      &lt;aside className=\"productos-sidebar\"&gt;\n        &lt;h2&gt;Productos&lt;/h2&gt;\n        &lt;nav&gt;\n          &lt;NavLink to=\"/productos\" end&gt;\n            Todos los productos\n          &lt;/NavLink&gt;\n          &lt;NavLink to=\"/productos/nuevo\"&gt;\n            Agregar producto\n          &lt;/NavLink&gt;\n        &lt;/nav&gt;\n      &lt;/aside&gt;\n\n      &lt;div className=\"productos-content\"&gt;\n        &lt;Outlet /&gt; {/* Aqu\u00ed se renderizan las sub-rutas */}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#breadcrumbs-dinamicos","title":"Breadcrumbs din\u00e1micos","text":"<pre><code>import { useLocation, Link } from 'react-router-dom'\n\nfunction Breadcrumbs() {\n  const location = useLocation()\n\n  const pathnames = location.pathname.split('/').filter(x =&gt; x)\n\n  return (\n    &lt;nav aria-label=\"breadcrumb\"&gt;\n      &lt;ol className=\"breadcrumb\"&gt;\n        &lt;li&gt;\n          &lt;Link to=\"/\"&gt;Inicio&lt;/Link&gt;\n        &lt;/li&gt;\n\n        {pathnames.map((name, index) =&gt; {\n          const routeTo = `/${pathnames.slice(0, index + 1).join('/')}`\n          const isLast = index === pathnames.length - 1\n\n          return (\n            &lt;li key={name}&gt;\n              {isLast ? (\n                &lt;span&gt;{name}&lt;/span&gt;\n              ) : (\n                &lt;Link to={routeTo}&gt;{name}&lt;/Link&gt;\n              )}\n            &lt;/li&gt;\n          )\n        })}\n      &lt;/ol&gt;\n    &lt;/nav&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#proteccion-de-rutas","title":"\ud83d\udd12 Protecci\u00f3n de Rutas","text":""},{"location":"sesion_09/#1-componente-de-ruta-protegida","title":"1. Componente de ruta protegida","text":"<pre><code>import { Navigate, useLocation } from 'react-router-dom'\nimport { useAuth } from '../hooks/useAuth'\n\nfunction RutaProtegida({ children }) {\n  const { usuario, cargando } = useAuth()\n  const location = useLocation()\n\n  if (cargando) {\n    return &lt;div&gt;Verificando autenticaci\u00f3n...&lt;/div&gt;\n  }\n\n  if (!usuario) {\n    // Redirigir al login guardando la ubicaci\u00f3n actual\n    return &lt;Navigate to=\"/login\" state={{ from: location }} replace /&gt;\n  }\n\n  return children\n}\n\n// Uso\n&lt;Route \n  path=\"/dashboard\" \n  element={\n    &lt;RutaProtegida&gt;\n      &lt;Dashboard /&gt;\n    &lt;/RutaProtegida&gt;\n  } \n/&gt;\n</code></pre>"},{"location":"sesion_09/#2-rutas-con-roles","title":"2. Rutas con roles","text":"<pre><code>function RutaConRol({ children, rolesPermitidos }) {\n  const { usuario } = useAuth()\n\n  if (!rolesPermitidos.includes(usuario?.rol)) {\n    return &lt;Navigate to=\"/sin-permisos\" replace /&gt;\n  }\n\n  return children\n}\n\n// Uso\n&lt;Route \n  path=\"/admin\" \n  element={\n    &lt;RutaConRol rolesPermitidos={['admin', 'moderador']}&gt;\n      &lt;PanelAdmin /&gt;\n    &lt;/RutaConRol&gt;\n  } \n/&gt;\n</code></pre>"},{"location":"sesion_09/#3-redireccion-despues-del-login","title":"3. Redirecci\u00f3n despu\u00e9s del login","text":"<pre><code>function Login() {\n  const navigate = useNavigate()\n  const location = useLocation()\n  const { login } = useAuth()\n\n  const from = location.state?.from?.pathname || '/'\n\n  const handleSubmit = async (e) =&gt; {\n    e.preventDefault()\n\n    try {\n      await login(email, password)\n      // Volver a donde estaba el usuario\n      navigate(from, { replace: true })\n    } catch (error) {\n      // Manejar error\n    }\n  }\n}\n</code></pre>"},{"location":"sesion_09/#manejo-de-errores-y-404","title":"\u274c Manejo de Errores y 404","text":""},{"location":"sesion_09/#1-pagina-404","title":"1. P\u00e1gina 404","text":"<pre><code>// NotFound.jsx\nimport { Link, useNavigate } from 'react-router-dom'\n\nfunction NotFound() {\n  const navigate = useNavigate()\n\n  return (\n    &lt;div className=\"not-found\"&gt;\n      &lt;h1&gt;404&lt;/h1&gt;\n      &lt;h2&gt;P\u00e1gina no encontrada&lt;/h2&gt;\n      &lt;p&gt;La p\u00e1gina que buscas no existe.&lt;/p&gt;\n\n      &lt;div className=\"actions\"&gt;\n        &lt;Link to=\"/\"&gt;Ir al inicio&lt;/Link&gt;\n        &lt;button onClick={() =&gt; navigate(-1)}&gt;\n          Volver atr\u00e1s\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\n// En App.jsx\n&lt;Route path=\"*\" element={&lt;NotFound /&gt;} /&gt;\n</code></pre>"},{"location":"sesion_09/#2-error-boundaries-para-rutas","title":"2. Error Boundaries para rutas","text":"<pre><code>import { useRouteError } from 'react-router-dom'\n\nfunction ErrorPage() {\n  const error = useRouteError()\n\n  return (\n    &lt;div className=\"error-page\"&gt;\n      &lt;h1&gt;\u00a1Oops!&lt;/h1&gt;\n      &lt;p&gt;Ha ocurrido un error inesperado.&lt;/p&gt;\n      &lt;p&gt;\n        &lt;i&gt;{error.statusText || error.message}&lt;/i&gt;\n      &lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\n// Configurar en la ruta\n&lt;Route \n  path=\"/productos/:id\" \n  element={&lt;ProductoDetalle /&gt;}\n  errorElement={&lt;ErrorPage /&gt;}\n/&gt;\n</code></pre>"},{"location":"sesion_09/#3-manejo-de-rutas-no-autorizadas","title":"3. Manejo de rutas no autorizadas","text":"<pre><code>function SinPermisos() {\n  const navigate = useNavigate()\n  const { usuario } = useAuth()\n\n  return (\n    &lt;div className=\"sin-permisos\"&gt;\n      &lt;h1&gt;Acceso Denegado&lt;/h1&gt;\n      &lt;p&gt;No tienes permisos para ver esta p\u00e1gina.&lt;/p&gt;\n\n      {usuario ? (\n        &lt;p&gt;Tu rol actual es: {usuario.rol}&lt;/p&gt;\n      ) : (\n        &lt;Link to=\"/login\"&gt;Iniciar sesi\u00f3n&lt;/Link&gt;\n      )}\n\n      &lt;button onClick={() =&gt; navigate('/')}&gt;\n        Volver al inicio\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#hooks-de-react-router","title":"\ud83e\ude9d Hooks de React Router","text":""},{"location":"sesion_09/#1-uselocation","title":"1. useLocation","text":"<p>Obtiene informaci\u00f3n sobre la ubicaci\u00f3n actual:</p> <pre><code>import { useLocation } from 'react-router-dom'\n\nfunction Analytics() {\n  const location = useLocation()\n\n  useEffect(() =&gt; {\n    // Enviar evento de p\u00e1gina vista\n    analytics.pageview(location.pathname)\n  }, [location])\n\n  return null\n}\n\n// Propiedades de location\n{\n  pathname: \"/productos/123\",\n  search: \"?categoria=electronica\",\n  hash: \"#reviews\",\n  state: { from: \"/carrito\" }\n}\n</code></pre>"},{"location":"sesion_09/#2-usenavigate","title":"2. useNavigate","text":"<p>Navegaci\u00f3n program\u00e1tica:</p> <pre><code>const navigate = useNavigate()\n\n// Navegar a ruta\nnavigate('/productos')\n\n// Navegar con estado\nnavigate('/checkout', { state: { items: carrito } })\n\n// Navegar en el historial\nnavigate(-1)  // Atr\u00e1s\nnavigate(1)   // Adelante\n\n// Reemplazar en lugar de agregar al historial\nnavigate('/login', { replace: true })\n</code></pre>"},{"location":"sesion_09/#3-useparams","title":"3. useParams","text":"<p>Acceder a par\u00e1metros de ruta:</p> <pre><code>// Ruta: /usuarios/:id/posts/:postId\nconst { id, postId } = useParams()\n</code></pre>"},{"location":"sesion_09/#4-usesearchparams","title":"4. useSearchParams","text":"<p>Manejar query parameters:</p> <pre><code>const [searchParams, setSearchParams] = useSearchParams()\n\n// Leer\nconst page = searchParams.get('page') || 1\n\n// Escribir\nsetSearchParams({ page: 2, sort: 'name' })\n</code></pre>"},{"location":"sesion_09/#5-usematch","title":"5. useMatch","text":"<p>Verificar si una ruta coincide:</p> <pre><code>function NavItem({ to, children }) {\n  const match = useMatch(to)\n\n  return (\n    &lt;li className={match ? 'active' : ''}&gt;\n      &lt;Link to={to}&gt;{children}&lt;/Link&gt;\n    &lt;/li&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#6-useroutes","title":"6. useRoutes","text":"<p>Configuraci\u00f3n de rutas con hooks:</p> <pre><code>function App() {\n  const element = useRoutes([\n    {\n      path: '/',\n      element: &lt;Layout /&gt;,\n      children: [\n        { index: true, element: &lt;Home /&gt; },\n        { path: 'productos', element: &lt;Productos /&gt; },\n        { path: 'productos/:id', element: &lt;ProductoDetalle /&gt; }\n      ]\n    },\n    { path: '/login', element: &lt;Login /&gt; },\n    { path: '*', element: &lt;NotFound /&gt; }\n  ])\n\n  return element\n}\n</code></pre>"},{"location":"sesion_09/#mejores-practicas","title":"\ud83d\udcda Mejores Pr\u00e1cticas","text":""},{"location":"sesion_09/#1-organizacion-de-rutas","title":"1. Organizaci\u00f3n de rutas","text":"<pre><code>// routes/index.jsx\nexport const routes = {\n  home: '/',\n  productos: {\n    lista: '/productos',\n    detalle: (id) =&gt; `/productos/${id}`,\n    nuevo: '/productos/nuevo',\n    editar: (id) =&gt; `/productos/${id}/editar`\n  },\n  auth: {\n    login: '/login',\n    registro: '/registro',\n    recuperar: '/recuperar-password'\n  }\n}\n\n// Uso\nimport { routes } from './routes'\n\n&lt;Link to={routes.productos.detalle(123)}&gt;Ver producto&lt;/Link&gt;\n</code></pre>"},{"location":"sesion_09/#2-lazy-loading-de-rutas","title":"2. Lazy loading de rutas","text":"<pre><code>import { lazy, Suspense } from 'react'\n\n// Cargar componentes de forma perezosa\nconst Dashboard = lazy(() =&gt; import('./pages/Dashboard'))\nconst Productos = lazy(() =&gt; import('./pages/Productos'))\nconst Configuracion = lazy(() =&gt; import('./pages/Configuracion'))\n\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\n        &lt;Route index element={&lt;Home /&gt;} /&gt;\n\n        &lt;Route \n          path=\"dashboard\" \n          element={\n            &lt;Suspense fallback={&lt;Loading /&gt;}&gt;\n              &lt;Dashboard /&gt;\n            &lt;/Suspense&gt;\n          } \n        /&gt;\n\n        &lt;Route \n          path=\"productos/*\" \n          element={\n            &lt;Suspense fallback={&lt;Loading /&gt;}&gt;\n              &lt;Productos /&gt;\n            &lt;/Suspense&gt;\n          } \n        /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#3-scroll-restoration","title":"3. Scroll restoration","text":"<pre><code>import { useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nfunction ScrollToTop() {\n  const { pathname } = useLocation()\n\n  useEffect(() =&gt; {\n    window.scrollTo(0, 0)\n  }, [pathname])\n\n  return null\n}\n\n// En App.jsx\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;ScrollToTop /&gt;\n      &lt;Routes&gt;\n        {/* Tus rutas */}\n      &lt;/Routes&gt;\n    &lt;/&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#4-manejo-de-transiciones","title":"4. Manejo de transiciones","text":"<pre><code>import { useLocation, useOutlet } from 'react-router-dom'\nimport { CSSTransition, SwitchTransition } from 'react-transition-group'\n\nfunction AnimatedOutlet() {\n  const location = useLocation()\n  const currentOutlet = useOutlet()\n\n  return (\n    &lt;SwitchTransition&gt;\n      &lt;CSSTransition\n        key={location.pathname}\n        timeout={300}\n        classNames=\"page\"\n        unmountOnExit\n      &gt;\n        {currentOutlet || &lt;div /&gt;}\n      &lt;/CSSTransition&gt;\n    &lt;/SwitchTransition&gt;\n  )\n}\n\n// CSS\n.page-enter {\n  opacity: 0;\n  transform: translateX(100%);\n}\n\n.page-enter-active {\n  opacity: 1;\n  transform: translateX(0);\n  transition: all 300ms;\n}\n\n.page-exit {\n  opacity: 1;\n}\n\n.page-exit-active {\n  opacity: 0;\n  transition: opacity 300ms;\n}\n</code></pre>"},{"location":"sesion_09/#5-seo-y-meta-tags","title":"5. SEO y meta tags","text":"<pre><code>import { Helmet } from 'react-helmet-async'\n\nfunction ProductoDetalle() {\n  const { id } = useParams()\n  const [producto, setProducto] = useState(null)\n\n  return (\n    &lt;&gt;\n      &lt;Helmet&gt;\n        &lt;title&gt;{producto?.nombre || 'Cargando...'} - Mi Tienda&lt;/title&gt;\n        &lt;meta name=\"description\" content={producto?.descripcion} /&gt;\n        &lt;meta property=\"og:title\" content={producto?.nombre} /&gt;\n        &lt;meta property=\"og:image\" content={producto?.imagen} /&gt;\n      &lt;/Helmet&gt;\n\n      &lt;div&gt;\n        {/* Contenido del producto */}\n      &lt;/div&gt;\n    &lt;/&gt;\n  )\n}\n</code></pre>"},{"location":"sesion_09/#resumen","title":"\ud83c\udfaf Resumen","text":""},{"location":"sesion_09/#conceptos-clave-aprendidos","title":"Conceptos clave aprendidos:","text":"<ol> <li>Configuraci\u00f3n: BrowserRouter envuelve la app</li> <li>Definici\u00f3n de rutas: Routes y Route</li> <li>Navegaci\u00f3n: Link, NavLink, useNavigate</li> <li>Par\u00e1metros: useParams, useSearchParams</li> <li>Layouts: Outlet para rutas anidadas</li> <li>Protecci\u00f3n: Componentes wrapper para auth</li> <li>Hooks \u00fatiles: useLocation, useMatch</li> <li>Optimizaci\u00f3n: Lazy loading y code splitting</li> </ol>"},{"location":"sesion_10/","title":"\ud83d\uddd3\ufe0f Workshop: Cat\u00e1logo de Productos en React","text":""},{"location":"sesion_10/#objetivo","title":"\ud83d\ude80 Objetivo","text":"<p>En este taller aprender\u00e1s a construir una aplicaci\u00f3n web en React que consume datos desde una API p\u00fablica para mostrar un cat\u00e1logo de productos. Adem\u00e1s, exploraremos buenas pr\u00e1cticas como la creaci\u00f3n de componentes reutilizables, organizaci\u00f3n del c\u00f3digo en capas (servicios, hooks y vistas), y c\u00f3mo escribir pruebas automatizadas para asegurar que todo funciona correctamente.</p> <p>Este workshop est\u00e1 pensado para personas que est\u00e1n comenzando en el mundo de React y desean adquirir una base s\u00f3lida trabajando con datos externos y estructura de proyecto real.</p>"},{"location":"sesion_10/#requisitos-previos","title":"\u2705 Requisitos Previos","text":"<ul> <li>Tener instalado Node.js (versi\u00f3n 16 o superior)</li> <li>Conocimientos b\u00e1sicos de HTML, JavaScript y React</li> <li>Conocimientos b\u00e1sicos de la terminal (comandos npm y navegaci\u00f3n de carpetas)</li> </ul>"},{"location":"sesion_10/#paso-1-crear-el-proyecto-con-vite","title":"\u26a1 Paso 1: Crear el proyecto con Vite","text":"<p>Vite es una herramienta moderna para crear proyectos frontend r\u00e1pidamente. Mucho m\u00e1s r\u00e1pido que <code>create-react-app</code> y optimizado para desarrollo moderno.</p> <pre><code>npm create vite@latest react-products-app -- --template react\ncd react-products-app\nnpm install\n</code></pre> <p>Este comando crea una estructura b\u00e1sica de React con soporte de m\u00f3dulos ES, y luego instala las dependencias necesarias.</p>"},{"location":"sesion_10/#paso-2-instalar-herramientas-adicionales","title":"\u26a1 Paso 2: Instalar herramientas adicionales","text":"<ul> <li><code>axios</code>: herramienta para hacer peticiones HTTP de forma m\u00e1s amigable y con manejo autom\u00e1tico de errores, cancelaciones, headers, etc.</li> <li><code>vitest</code>: herramienta de testing r\u00e1pida y moderna similar a Jest, pero pensada para proyectos con Vite.</li> <li><code>jsdom</code>: simula un entorno de navegador para poder hacer pruebas de componentes que interact\u00faan con el DOM.</li> <li><code>@testing-library/react</code>: librer\u00eda para testear componentes de React como si fueran usados por un usuario real.</li> </ul> <pre><code>npm install axios\nnpm install -D vitest jsdom @testing-library/react @testing-library/jest-dom @testing-library/user-event\n</code></pre> <p>\ud83d\udccc Nota: Aunque instalamos <code>axios</code>, en este proyecto usaremos <code>fetch</code> nativo para que los participantes principiantes aprendan c\u00f3mo funciona el navegador al hacer peticiones HTTP. Pero al final del workshop podr\u00e1s adaptar f\u00e1cilmente tu c\u00f3digo a <code>axios</code> si deseas usarlo.</p>"},{"location":"sesion_10/#que-es-fetch","title":"\u00bfQu\u00e9 es <code>fetch</code>?","text":"<p><code>fetch()</code> es una funci\u00f3n nativa de JavaScript que permite hacer peticiones HTTP a servidores. Devuelve una <code>Promise</code>, por eso normalmente la usamos con <code>async/await</code> para manejar la respuesta de manera m\u00e1s clara.</p>"},{"location":"sesion_10/#paso-3-configurar-vitest-para-pruebas","title":"\ud83d\udee0\ufe0f Paso 3: Configurar Vitest para pruebas","text":"<p>Vitest es una herramienta de pruebas moderna pensada para proyectos construidos con Vite. Para que nuestras pruebas funcionen correctamente con React y simulen el entorno del navegador, debemos configurar algunas opciones b\u00e1sicas.</p>"},{"location":"sesion_10/#viteconfigjs","title":"<code>vite.config.js</code>","text":"<p>Este archivo configura Vite y Vitest para incluir el entorno de pruebas y un archivo de setup para preparar Testing Library.</p> <pre><code>import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    globals: true,             // Permite usar 'describe', 'it', 'expect' sin importar cada uno\n    environment: 'jsdom',      // Simula el DOM del navegador en las pruebas\n    setupFiles: './src/test/setup.js', // Archivo que se ejecuta antes de cada test\n  },\n});\n</code></pre>"},{"location":"sesion_10/#srctestsetupjs","title":"<code>src/test/setup.js</code>","text":"<p>Este archivo importa <code>@testing-library/jest-dom</code>, que agrega matchers adicionales a Jest (como <code>toBeInTheDocument</code>).</p> <pre><code>import '@testing-library/jest-dom';\n</code></pre>"},{"location":"sesion_10/#agregar-scripts-en-packagejson","title":"Agregar scripts en <code>package.json</code>","text":"<p>Esto nos permitir\u00e1 correr las pruebas f\u00e1cilmente desde la terminal:</p> <pre><code>\"scripts\": {\n  \"dev\": \"vite\",\n  \"build\": \"vite build\",\n  \"preview\": \"vite preview\",\n  \"test\": \"vitest\",\n  \"test:ui\": \"vitest --ui\",\n  \"test:coverage\": \"vitest --coverage\"\n}\n</code></pre> <p>Con esto ya puedes correr:</p> <pre><code>npm test\n</code></pre> <p>Y ejecutar\u00e1s todas las pruebas del proyecto usando <code>Vitest</code>.</p>"},{"location":"sesion_10/#paso-5-crear-funciones-para-consumir-la-api","title":"\ud83c\udf10 Paso 5: Crear funciones para consumir la API","text":"<p>La API que usaremos es p\u00fablica: https://dummyjson.com</p> <p>Creamos un m\u00f3dulo llamado <code>productsAPI</code> que contiene funciones reutilizables para comunicarse con esta API. Cada funci\u00f3n hace uso de <code>fetch</code> para obtener los datos y maneja posibles errores lanzando mensajes adecuados. Estas funciones se utilizar\u00e1n m\u00e1s adelante en los hooks y componentes.</p>"},{"location":"sesion_10/#srcservicesapijs","title":"<code>src/services/api.js</code>","text":"<pre><code>const BASE_URL = 'https://dummyjson.com';\n\nexport const productsAPI = {\n  async getAllProducts(limit = 10, skip = 0) {\n    try {\n      const response = await fetch(`${BASE_URL}/products?limit=${limit}&amp;skip=${skip}`);\n      if (!response.ok) throw new Error('Error al obtener productos');\n      return await response.json();\n    } catch (error) {\n      throw new Error(`Error al obtener productos: ${error.message}`);\n    }\n  },\n\n  async getProductById(id) {\n    try {\n      const response = await fetch(`${BASE_URL}/products/${id}`);\n      if (!response.ok) throw new Error('Producto no encontrado');\n      return await response.json();\n    } catch (error) {\n      throw new Error(`Error al obtener producto: ${error.message}`);\n    }\n  },\n\n  async searchProducts(query) {\n    try {\n      const response = await fetch(`${BASE_URL}/products/search?q=${query}`);\n      if (!response.ok) throw new Error('Error al buscar productos');\n      return await response.json();\n    } catch (error) {\n      throw new Error(`Error en b\u00fasqueda: ${error.message}`);\n    }\n  }\n};\n</code></pre>"},{"location":"sesion_10/#explicacion-del-codigo","title":"Explicaci\u00f3n del c\u00f3digo:","text":"<ul> <li><code>BASE_URL</code>: se define como constante para evitar repetir la direcci\u00f3n base de la API en cada funci\u00f3n.</li> <li>Las funciones est\u00e1n marcadas como <code>async</code> porque devuelven promesas. <code>async</code> permite usar <code>await</code>, que pausa la ejecuci\u00f3n hasta que se resuelva la promesa.</li> <li><code>await fetch(...)</code>: hace una solicitud HTTP a la API.</li> <li><code>if (!response.ok) throw ...</code>: verifica que la respuesta fue exitosa (c\u00f3digos 200\u2013299), si no, lanza un error.</li> <li><code>await response.json()</code>: convierte el cuerpo de la respuesta en un objeto JavaScript.</li> <li><code>limit = 10, skip = 0</code>: son valores por defecto en los par\u00e1metros. Si no se env\u00edan desde fuera, se usar\u00e1n 10 productos y comenzar\u00e1 desde el primero.</li> <li><code>try/catch</code>: se usa para manejar cualquier error que ocurra en la petici\u00f3n y lanzar un mensaje entendible.</li> </ul> <p>Esto nos permite separar la l\u00f3gica de red del resto del c\u00f3digo, para poder reutilizarla o testearla m\u00e1s f\u00e1cilmente.</p>"},{"location":"sesion_10/#paso-6-crear-un-hook-personalizado-useproducts","title":"\ud83e\udde0 Paso 6: Crear un hook personalizado: <code>useProducts</code>","text":"<p>Ahora encapsulamos toda la l\u00f3gica de carga y b\u00fasqueda de productos en un hook llamado <code>useProducts</code>. Este hook podr\u00e1 ser reutilizado por cualquier componente que necesite interactuar con la lista de productos.</p>"},{"location":"sesion_10/#srchooksuseproductsjs","title":"<code>src/hooks/useProducts.js</code>","text":"<pre><code>import { useState, useEffect } from 'react';\nimport { productsAPI } from '../services/api';\n\nexport function useProducts() {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  async function loadProducts() {\n    setLoading(true);\n    try {\n      const data = await productsAPI.getAllProducts();\n      setProducts(data.products);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n      setProducts([]);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function searchProducts(query) {\n    setLoading(true);\n    try {\n      const data = await productsAPI.searchProducts(query);\n      setProducts(data.products);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n      setProducts([]);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() =&gt; {\n    loadProducts();\n  }, []);\n\n  return { products, loading, error, searchProducts };\n}\n</code></pre>"},{"location":"sesion_10/#explicacion-del-codigo_1","title":"Explicaci\u00f3n del c\u00f3digo:","text":"<ul> <li><code>useState</code> se usa para guardar el estado de los productos, si est\u00e1 cargando (<code>loading</code>) y si hay errores (<code>error</code>).</li> <li><code>loadProducts</code> carga productos desde la API y actualiza el estado.</li> <li><code>searchProducts</code> permite hacer b\u00fasquedas personalizadas a trav\u00e9s de la API.</li> <li><code>useEffect(() =&gt; loadProducts(), [])</code> asegura que los productos se cargan autom\u00e1ticamente cuando se monta el componente.</li> <li>Finalmente, se retorna un objeto con todo lo necesario para que un componente pueda usar este hook: productos, loading, error y funci\u00f3n de b\u00fasqueda.</li> </ul>"},{"location":"sesion_11_Final/","title":"Workshop: Creando una Tienda de Productos con React y Testing","text":""},{"location":"sesion_11_Final/#objetivos-del-workshop","title":"\ud83d\udccb Objetivos del Workshop","text":"<p>Al finalizar este workshop podr\u00e1s:</p> <ul> <li>Crear una aplicaci\u00f3n React desde cero usando Vite</li> <li>Consumir APIs externas para mostrar datos</li> <li>Escribir tests unitarios para tus componentes</li> <li>Entender conceptos b\u00e1sicos de testing en React</li> </ul>"},{"location":"sesion_11_Final/#prerrequisitos","title":"\ud83d\udee0\ufe0f Prerrequisitos","text":"<ul> <li>Node.js instalado (versi\u00f3n 16 o superior)</li> <li>Editor de c\u00f3digo (VS Code recomendado)</li> <li>Conocimientos b\u00e1sicos de JavaScript</li> <li>Nociones b\u00e1sicas de HTML y CSS</li> </ul>"},{"location":"sesion_11_Final/#fase-1-configuracion-inicial","title":"Fase 1: Configuraci\u00f3n Inicial","text":""},{"location":"sesion_11_Final/#11-crear-el-proyecto-base","title":"1.1 Crear el Proyecto Base","text":"<p>Primero vamos a crear nuestro proyecto usando Vite, que es una herramienta moderna para crear aplicaciones React de forma r\u00e1pida.</p> <pre><code># Crear el proyecto (seleccionar React cuando pregunte)\nnpm create vite@latest tienda-productos -- --template react\n\n# Navegar al directorio del proyecto\ncd tienda-productos\n\n# Instalar las dependencias b\u00e1sicas\nnpm install\n</code></pre> <p>\u00bfQu\u00e9 acabamos de hacer?</p> <ul> <li><code>npm create vite@latest</code> crea un nuevo proyecto con Vite</li> <li><code>--template react</code> especifica que queremos un template de React</li> <li><code>npm install</code> instala todas las dependencias necesarias</li> </ul>"},{"location":"sesion_11_Final/#12-instalar-dependencias-adicionales","title":"1.2 Instalar Dependencias Adicionales","text":"<p>Ahora instalamos las librer\u00edas que necesitaremos para el workshop:</p> <pre><code># Para hacer peticiones HTTP\nnpm install axios\n\n# Para testing (herramientas de desarrollo)\nnpm install -D @testing-library/react @testing-library/jest-dom @testing-library/user-event\n\n# Framework de testing\nnpm install -D vitest jsdom\n</code></pre> <p>\ud83d\udcd8 \u00bfPara qu\u00e9 sirve cada librer\u00eda?</p> <ul> <li><code>axios</code>: Para hacer peticiones HTTP de forma sencilla (aunque en este workshop usaremos <code>fetch</code> que es nativo)</li> <li><code>@testing-library/react</code>: Para testear componentes React simulando c\u00f3mo los usuarios interact\u00faan con ellos</li> <li><code>@testing-library/jest-dom</code>: Agrega funciones especiales para verificar elementos del DOM (como <code>toBeInTheDocument()</code>)</li> <li><code>@testing-library/user-event</code>: Para simular clicks, escritura y otras interacciones del usuario</li> <li><code>vitest</code>: Framework de testing moderno y r\u00e1pido, como Jest pero optimizado para Vite</li> <li><code>jsdom</code>: Simula el DOM del navegador en Node.js para que los tests puedan \"ver\" elementos HTML</li> </ul> <p>\ud83d\udca1 \u00bfQu\u00e9 significa <code>-D</code>? La bandera <code>-D</code> instala las dependencias como \"desarrollo\" (devDependencies). Esto significa que solo se usan mientras desarrollamos, no en producci\u00f3n.</p>"},{"location":"sesion_11_Final/#13-configurar-el-entorno-de-testing","title":"1.3 Configurar el Entorno de Testing","text":""},{"location":"sesion_11_Final/#paso-1-modificar-viteconfigjs","title":"Paso 1: Modificar <code>vite.config.js</code>","text":"<p>Reemplaza el contenido del archivo <code>vite.config.js</code> con:</p> <pre><code>import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    globals: true,\n    environment: 'jsdom',\n    setupFiles: './src/test/setup.js',\n  },\n})\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace cada configuraci\u00f3n?</p> <ul> <li><code>plugins: [react()]</code>: Habilita el soporte para React en Vite</li> <li><code>test.globals: true</code>: Permite usar funciones como <code>describe</code>, <code>it</code>, <code>expect</code> sin importarlas</li> <li><code>test.environment: 'jsdom'</code>: Simula un navegador para que los tests puedan \"ver\" elementos HTML</li> <li><code>test.setupFiles</code>: Archivo que se ejecuta antes de cada test para configurar cosas comunes</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 necesitamos jsdom? Los tests se ejecutan en Node.js, que no tiene DOM (elementos HTML). jsdom simula un navegador para que podamos testear componentes React.</p>"},{"location":"sesion_11_Final/#paso-2-crear-archivo-de-setup-para-tests","title":"Paso 2: Crear archivo de setup para tests","text":"<p>Crea la carpeta <code>src/test/</code> y dentro el archivo <code>setup.js</code>:</p> <pre><code>import '@testing-library/jest-dom'\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace este archivo? Este archivo se ejecuta autom\u00e1ticamente antes de cada test y importa funciones especiales para verificar elementos del DOM, como:</p> <ul> <li><code>toBeInTheDocument()</code>: Verifica que un elemento existe en la p\u00e1gina</li> <li><code>toHaveAttribute()</code>: Verifica que un elemento tiene cierto atributo</li> <li><code>toHaveClass()</code>: Verifica que un elemento tiene cierta clase CSS</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 en una carpeta separada? Es una buena pr\u00e1ctica mantener los archivos de configuraci\u00f3n de tests separados del c\u00f3digo principal.</p>"},{"location":"sesion_11_Final/#paso-3-agregar-scripts-de-testing-al-packagejson","title":"Paso 3: Agregar scripts de testing al <code>package.json</code>","text":"<p>Agrega estos scripts en la secci\u00f3n <code>\"scripts\"</code> de tu <code>package.json</code>:</p> <pre><code>\"scripts\": {\n  \"dev\": \"vite\",\n  \"build\": \"vite build\",\n  \"lint\": \"eslint .\",\n  \"preview\": \"vite preview\",\n  \"test\": \"vitest\",\n  \"test:ui\": \"vitest --ui\",\n  \"test:coverage\": \"vitest --coverage\"\n}\n</code></pre>"},{"location":"sesion_11_Final/#fase-2-desarrollo-de-la-aplicacion","title":"Fase 2: Desarrollo de la Aplicaci\u00f3n","text":""},{"location":"sesion_11_Final/#21-crear-la-estructura-de-carpetas","title":"2.1 Crear la Estructura de Carpetas","text":"<p>Crea esta estructura dentro de <code>src/</code>:</p> <pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 ProductCard.jsx\n\u2502   \u2514\u2500\u2500 ProductList.jsx\n\u251c\u2500\u2500 test/\n\u2502   \u2514\u2500\u2500 setup.js\n\u2514\u2500\u2500 App.jsx\n</code></pre>"},{"location":"sesion_11_Final/#22-desarrollar-el-componente-principal-appjsx","title":"2.2 Desarrollar el Componente Principal (App.jsx)","text":"<p>Reemplaza el contenido de <code>src/App.jsx</code>:</p> <pre><code>import ProductList from './components/ProductList';\n\nfunction App() {\n  return (\n    &lt;div style={{ padding: '2rem', fontFamily: 'Arial, sans-serif' }}&gt;\n      &lt;h1&gt;\ud83d\uded2 Cat\u00e1logo de Productos&lt;/h1&gt;\n      &lt;ProductList /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace este componente?</p> <ul> <li><code>import ProductList</code>: Trae el componente ProductList desde la carpeta components</li> <li><code>function App()</code>: Define un componente funcional (la forma moderna de crear componentes)</li> <li><code>return (...)</code>: Devuelve el JSX que se va a mostrar en pantalla</li> <li><code>&lt;ProductList /&gt;</code>: Renderiza el componente ProductList dentro de App</li> <li><code>export default App</code>: Permite que otros archivos puedan importar este componente</li> </ul> <p>\ud83d\udca1 \u00bfQu\u00e9 es JSX? JSX es una extensi\u00f3n de JavaScript que permite escribir HTML dentro de JavaScript. React lo convierte a JavaScript normal.</p>"},{"location":"sesion_11_Final/#23-crear-el-componente-productcard","title":"2.3 Crear el Componente ProductCard","text":"<p>Crea <code>src/components/ProductCard.jsx</code>:</p> <pre><code>function ProductCard({ product }) {\n  return (\n    &lt;div style={{\n      border: '1px solid #ccc',\n      padding: '1rem',\n      borderRadius: '5px',\n      backgroundColor: '#fff',\n      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n    }}&gt;\n      &lt;img \n        src={product.thumbnail} \n        alt={product.title}\n        style={{ \n          width: '100%', \n          height: '200px', \n          objectFit: 'cover',\n          borderRadius: '3px'\n        }} \n      /&gt;\n      &lt;h3 style={{ margin: '0.5rem 0', color: '#333' }}&gt;\n        {product.title}\n      &lt;/h3&gt;\n      &lt;p style={{ color: '#666', fontSize: '0.9rem' }}&gt;\n        {product.description}\n      &lt;/p&gt;\n      &lt;strong style={{ color: '#e74c3c', fontSize: '1.2rem' }}&gt;\n        \ud83d\udcb2 {product.price}\n      &lt;/strong&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ProductCard;\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace este componente?</p> <ul> <li><code>{ product }</code>: Recibe un objeto <code>product</code> como prop (propiedad) desde el componente padre</li> <li><code>product.thumbnail</code>: Accede a la propiedad <code>thumbnail</code> del objeto product</li> <li><code>{product.title}</code>: Las llaves <code>{}</code> permiten escribir JavaScript dentro de JSX</li> <li><code>alt={product.title}</code>: Atributo alt de la imagen para accesibilidad (lectores de pantalla)</li> <li><code>objectFit: 'cover'</code>: Hace que la imagen mantenga sus proporciones y llene el contenedor</li> </ul> <p>\ud83d\udca1 \u00bfQu\u00e9 son las props? Las props son la forma de pasar datos de un componente padre a un componente hijo. Es como pasar argumentos a una funci\u00f3n.</p> <p>\u2705 \u00bfPor qu\u00e9 estilos inline? Para simplicidad en este workshop usamos estilos inline. En proyectos reales es mejor usar CSS modules o styled-components.</p>"},{"location":"sesion_11_Final/#24-crear-el-componente-productlist","title":"2.4 Crear el Componente ProductList","text":"<p>Crea <code>src/components/ProductList.jsx</code>:</p> <pre><code>import { useEffect, useState } from 'react';\nimport ProductCard from './ProductCard';\n\nfunction ProductList() {\n  // Estados para manejar los datos y el estado de la aplicaci\u00f3n\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // useEffect se ejecuta cuando el componente se monta\n  useEffect(() =&gt; {\n    // Funci\u00f3n para obtener los productos de la API\n    fetch('https://dummyjson.com/products?limit=10')\n      .then((response) =&gt; {\n        // Verificar si la respuesta es exitosa\n        if (!response.ok) {\n          throw new Error('Error al cargar productos');\n        }\n        return response.json();\n      })\n      .then((data) =&gt; {\n        // Guardar los productos en el estado\n        setProducts(data.products);\n      })\n      .catch((err) =&gt; {\n        // Manejar errores\n        setError(err.message);\n      })\n      .finally(() =&gt; {\n        // Siempre ejecutar esto al final\n        setLoading(false);\n      });\n  }, []); // El array vac\u00edo significa que solo se ejecuta una vez\n\n  // Mostrar mensaje de carga\n  if (loading) {\n    return (\n      &lt;div style={{ textAlign: 'center', padding: '2rem' }}&gt;\n        &lt;p&gt;\ud83d\udd04 Cargando productos...&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  // Mostrar mensaje de error\n  if (error) {\n    return (\n      &lt;div style={{ textAlign: 'center', padding: '2rem', color: 'red' }}&gt;\n        &lt;p&gt;\u274c Error: {error}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  // Mostrar la lista de productos\n  return (\n    &lt;div style={{\n      display: 'grid',\n      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\n      gap: '1rem',\n      padding: '1rem 0'\n    }}&gt;\n      {products.map((product) =&gt; (\n        &lt;ProductCard key={product.id} product={product} /&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\nexport default ProductList;\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>useState</code>?</p> <ul> <li><code>useState([])</code>: Crea una variable de estado <code>products</code> que empieza como array vac\u00edo</li> <li><code>setProducts</code>: Funci\u00f3n para cambiar el valor de <code>products</code></li> <li>Cuando cambia el estado, React vuelve a renderizar el componente autom\u00e1ticamente</li> </ul> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>useEffect</code>?</p> <ul> <li>Se ejecuta despu\u00e9s de que el componente se renderiza por primera vez</li> <li>El array vac\u00edo <code>[]</code> significa \"ejecutar solo una vez cuando el componente se monta\"</li> <li>Es perfecto para hacer peticiones HTTP al cargar la p\u00e1gina</li> </ul> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>fetch</code>?</p> <ul> <li><code>fetch()</code>: Funci\u00f3n nativa de JavaScript para hacer peticiones HTTP</li> <li><code>response.ok</code>: Verifica si la respuesta fue exitosa (status 200-299)</li> <li><code>response.json()</code>: Convierte la respuesta a un objeto JavaScript</li> <li><code>.then()</code>: Se ejecuta cuando la promesa se resuelve exitosamente</li> <li><code>.catch()</code>: Se ejecuta si hay alg\u00fan error</li> <li><code>.finally()</code>: Se ejecuta siempre, haya error o no</li> </ul> <p>\ud83d\udca1 \u00bfQu\u00e9 significa <code>limit=10</code>? Es un par\u00e1metro de la API que limita a 10 productos. Sin esto, traer\u00eda todos los productos de la base de datos.</p> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>.map()</code>?</p> <ul> <li>Recorre cada producto del array</li> <li>Por cada producto, crea un componente <code>&lt;ProductCard&gt;</code></li> <li><code>key={product.id}</code>: React necesita una key \u00fanica para cada elemento de una lista</li> <li>Devuelve un nuevo array con todos los componentes ProductCard</li> </ul> <p>\u2705 \u00bfPor qu\u00e9 tres estados diferentes?</p> <ul> <li><code>loading</code>: Para mostrar un spinner mientras carga</li> <li><code>error</code>: Para mostrar mensajes de error si algo falla</li> <li><code>products</code>: Para almacenar los datos cuando llegan exitosamente</li> </ul> <p>Esta es la forma est\u00e1ndar de manejar peticiones HTTP en React.</p>"},{"location":"sesion_11_Final/#25-probar-la-aplicacion","title":"2.5 Probar la Aplicaci\u00f3n","text":"<p>Ejecuta el servidor de desarrollo:</p> <pre><code>npm run dev\n</code></pre> <p>Deber\u00edas ver tu aplicaci\u00f3n funcionando en <code>http://localhost:5173</code></p>"},{"location":"sesion_11_Final/#fase-3-testing-de-componentes","title":"Fase 3: Testing de Componentes","text":""},{"location":"sesion_11_Final/#31-por-que-testing","title":"3.1 \u00bfPor qu\u00e9 Testing?","text":"<p>Los tests nos ayudan a:</p> <ul> <li>Verificar que nuestros componentes funcionan correctamente</li> <li>Prevenir errores cuando hacemos cambios</li> <li>Documentar c\u00f3mo deben comportarse nuestros componentes</li> <li>Tener confianza al hacer refactoring</li> </ul>"},{"location":"sesion_11_Final/#32-test-del-componente-productcard","title":"3.2 Test del Componente ProductCard","text":"<p>Crea <code>src/components/ProductCard.test.jsx</code>:</p> <pre><code>import { render, screen } from '@testing-library/react';\nimport ProductCard from './ProductCard';\n\ndescribe('ProductCard', () =&gt; {\n  // Datos de prueba\n  const mockProduct = {\n    id: 1,\n    title: 'Producto de prueba',\n    price: 150,\n    description: 'Una descripci\u00f3n de prueba para el producto',\n    thumbnail: 'https://dummyimage.com/300x300/cccccc/969696.png&amp;text=Producto',\n  };\n\n  it('deber\u00eda renderizar todos los elementos del producto', () =&gt; {\n    // Renderizar el componente con datos de prueba\n    render(&lt;ProductCard product={mockProduct} /&gt;);\n\n    // Verificar que todos los elementos est\u00e9n presentes\n    expect(screen.getByText('Producto de prueba')).toBeInTheDocument();\n    expect(screen.getByText('Una descripci\u00f3n de prueba para el producto')).toBeInTheDocument();\n    expect(screen.getByText(/150/)).toBeInTheDocument();\n\n    // Verificar que la imagen tenga los atributos correctos\n    const image = screen.getByRole('img');\n    expect(image).toHaveAttribute('src', mockProduct.thumbnail);\n    expect(image).toHaveAttribute('alt', mockProduct.title);\n  });\n\n  it('deber\u00eda mostrar el precio con el s\u00edmbolo de dinero', () =&gt; {\n    render(&lt;ProductCard product={mockProduct} /&gt;);\n\n    // Verificar que el precio se muestre con el formato correcto\n    expect(screen.getByText('\ud83d\udcb2 150')).toBeInTheDocument();\n  });\n});\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>describe</code>?</p> <ul> <li>Agrupa tests relacionados bajo un nombre descriptivo</li> <li>Es como crear una \"suite\" o familia de tests para un componente</li> <li>Ayuda a organizar y leer los resultados de los tests</li> </ul> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>it</code> (o <code>test</code>)?</p> <ul> <li>Define un test individual con una descripci\u00f3n espec\u00edfica</li> <li><code>it('deber\u00eda hacer algo')</code> se lee como \"deber\u00eda hacer algo\"</li> <li>Cada <code>it</code> prueba un comportamiento espec\u00edfico del componente</li> </ul> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>render</code>?</p> <ul> <li>Renderiza el componente React en un DOM virtual para testing</li> <li>Es como \"montar\" el componente en una p\u00e1gina invisible</li> <li>Despu\u00e9s podemos buscar elementos y verificar que est\u00e9n ah\u00ed</li> </ul> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>screen.getByText</code>?</p> <ul> <li>Busca un elemento que contenga el texto especificado</li> <li><code>getByText('Producto de prueba')</code>: Busca exactamente ese texto</li> <li><code>getByText(/150/)</code>: Busca texto que contenga \"150\" (usando regex)</li> <li>Si no encuentra el elemento, el test falla autom\u00e1ticamente</li> </ul> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>expect</code>?</p> <ul> <li>Define lo que esperamos que sea verdad</li> <li><code>toBeInTheDocument()</code>: Verifica que el elemento existe en el DOM</li> <li><code>toHaveAttribute('src', url)</code>: Verifica que un elemento tiene cierto atributo con cierto valor</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 datos mock? Usamos datos falsos pero realistas para no depender de APIs externas en los tests. Esto hace los tests m\u00e1s r\u00e1pidos y confiables.</p>"},{"location":"sesion_11_Final/#33-test-del-componente-productlist","title":"3.3 Test del Componente ProductList","text":"<p>Crea <code>src/components/ProductList.test.jsx</code>:</p> <pre><code>import { render, screen, waitFor } from '@testing-library/react';\nimport ProductList from './ProductList';\nimport { vi } from 'vitest';\n\n// Mock de la funci\u00f3n fetch global\nconst mockFetch = vi.fn();\nvi.stubGlobal('fetch', mockFetch);\n\ndescribe('ProductList', () =&gt; {\n  // Datos de prueba\n  const mockProducts = [\n    {\n      id: 1,\n      title: 'Producto 1',\n      description: 'Descripci\u00f3n del producto 1',\n      price: 100,\n      thumbnail: 'https://ejemplo.com/imagen1.jpg'\n    },\n    {\n      id: 2,\n      title: 'Producto 2',\n      description: 'Descripci\u00f3n del producto 2',\n      price: 200,\n      thumbnail: 'https://ejemplo.com/imagen2.jpg'\n    }\n  ];\n\n  beforeEach(() =&gt; {\n    // Limpiar mocks antes de cada test\n    mockFetch.mockClear();\n  });\n\n  it('deber\u00eda mostrar mensaje de carga inicialmente', () =&gt; {\n    // Simular una petici\u00f3n que nunca se resuelve\n    mockFetch.mockImplementation(() =&gt; new Promise(() =&gt; {}));\n\n    render(&lt;ProductList /&gt;);\n\n    // Verificar que se muestre el mensaje de carga\n    expect(screen.getByText(/Cargando productos/)).toBeInTheDocument();\n  });\n\n  it('deber\u00eda renderizar productos despu\u00e9s de cargarlos exitosamente', async () =&gt; {\n    // Simular una respuesta exitosa de la API\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: () =&gt; Promise.resolve({\n        products: mockProducts\n      })\n    });\n\n    render(&lt;ProductList /&gt;);\n\n    // Verificar que inicialmente se muestre el mensaje de carga\n    expect(screen.getByText(/Cargando productos/)).toBeInTheDocument();\n\n    // Esperar a que los productos se carguen\n    await waitFor(() =&gt; {\n      expect(screen.getByText('Producto 1')).toBeInTheDocument();\n      expect(screen.getByText('Producto 2')).toBeInTheDocument();\n    });\n\n    // Verificar que el mensaje de carga desaparezca\n    expect(screen.queryByText(/Cargando productos/)).not.toBeInTheDocument();\n  });\n\n  it('deber\u00eda mostrar mensaje de error si la petici\u00f3n falla', async () =&gt; {\n    // Simular una respuesta de error\n    mockFetch.mockResolvedValue({\n      ok: false\n    });\n\n    render(&lt;ProductList /&gt;);\n\n    // Esperar a que se muestre el mensaje de error\n    await waitFor(() =&gt; {\n      expect(screen.getByText(/Error/)).toBeInTheDocument();\n    });\n\n    // Verificar que no se muestren productos\n    expect(screen.queryByText('Producto 1')).not.toBeInTheDocument();\n  });\n\n  it('deber\u00eda hacer la petici\u00f3n a la URL correcta', () =&gt; {\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: () =&gt; Promise.resolve({ products: [] })\n    });\n\n    render(&lt;ProductList /&gt;);\n\n    // Verificar que se haga la petici\u00f3n a la URL correcta\n    expect(mockFetch).toHaveBeenCalledWith('https://dummyjson.com/products?limit=10');\n  });\n});\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 es un Mock?</p> <ul> <li>Un \"mock\" es una imitaci\u00f3n de algo real (como la funci\u00f3n <code>fetch</code>)</li> <li><code>vi.fn()</code>: Crea una funci\u00f3n falsa que podemos controlar en los tests</li> <li><code>vi.stubGlobal('fetch', mockFetch)</code>: Reemplaza la funci\u00f3n <code>fetch</code> real con nuestra versi\u00f3n falsa</li> <li>Esto nos permite simular diferentes respuestas de la API sin hacer peticiones reales</li> </ul> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>mockResolvedValue</code>?</p> <ul> <li>Hace que nuestra funci\u00f3n falsa <code>fetch</code> devuelva una promesa que se resuelve con el valor que especificamos</li> <li>Es como decir: \"cuando llamen a fetch, responde con esto\"</li> <li><code>mockImplementation</code>: Permite definir exactamente qu\u00e9 hace la funci\u00f3n falsa</li> </ul> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>waitFor</code>?</p> <ul> <li>Espera a que algo aparezca en el DOM de forma as\u00edncrona</li> <li>Como <code>fetch</code> es as\u00edncrono, los productos no aparecen inmediatamente</li> <li><code>waitFor</code> revisa repetidamente hasta que la condici\u00f3n se cumple o se agota el tiempo</li> </ul> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>beforeEach</code>?</p> <ul> <li>Se ejecuta antes de cada test individual</li> <li><code>mockClear()</code>: Borra el historial de llamadas de la funci\u00f3n mock</li> <li>Esto asegura que cada test empiece \"limpio\" sin afectar a otros tests</li> </ul> <p>\ud83d\udcd8 \u00bfDiferencia entre <code>getByText</code> y <code>queryByText</code>?</p> <ul> <li><code>getByText</code>: Falla el test si no encuentra el elemento (bueno para verificar que algo est\u00e1)</li> <li><code>queryByText</code>: Devuelve <code>null</code> si no encuentra el elemento (bueno para verificar que algo NO est\u00e1)</li> <li><code>.not.toBeInTheDocument()</code>: Verifica que el elemento no existe</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 testear errores? Es importante probar que nuestra aplicaci\u00f3n maneja correctamente los casos de error, no solo los casos exitosos.</p> <p>\u2705 \u00bfPor qu\u00e9 estos tests son importantes?</p> <ul> <li>Verifican que el componente maneja correctamente los estados de carga, \u00e9xito y error</li> <li>Aseguran que las peticiones HTTP se hacen correctamente</li> <li>Garantizan que la interfaz se actualiza apropiadamente seg\u00fan la respuesta de la API</li> </ul> <p>\u00bfQu\u00e9 estamos probando?</p> <ul> <li>El estado de carga inicial</li> <li>La carga exitosa de productos</li> <li>El manejo de errores</li> <li>Que se haga la petici\u00f3n a la URL correcta</li> </ul>"},{"location":"sesion_11_Final/#34-ejecutar-los-tests","title":"3.4 Ejecutar los Tests","text":"<pre><code># Ejecutar todos los tests\nnpm test\n\n# Ejecutar tests con interfaz gr\u00e1fica\nnpm run test:ui\n\n# Ejecutar tests con reporte de cobertura\nnpm run test:coverage\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace cada comando?</p> <ul> <li><code>npm test</code>: Ejecuta todos los tests en modo \"watch\" (se re-ejecutan autom\u00e1ticamente cuando cambias c\u00f3digo)</li> <li><code>npm run test:ui</code>: Abre una interfaz web donde puedes ver los tests de forma visual y interactiva</li> <li><code>npm run test:coverage</code>: Muestra qu\u00e9 porcentaje de tu c\u00f3digo est\u00e1 cubierto por tests</li> </ul> <p>\ud83d\udca1 \u00bfQu\u00e9 significa \"coverage\" (cobertura)? La cobertura te dice qu\u00e9 l\u00edneas de c\u00f3digo han sido ejecutadas por los tests. Un 100% significa que todos los tests pasan por todas las l\u00edneas de c\u00f3digo.</p> <p>\u2705 Consejos para interpretar los resultados:</p> <ul> <li>\u2705 Verde: Test pas\u00f3 correctamente</li> <li>\u274c Rojo: Test fall\u00f3, necesita correcci\u00f3n</li> <li>\u26a0\ufe0f Amarillo: Test se salt\u00f3 o hay advertencias</li> </ul> <p>\ud83d\udcd8 \u00bfC\u00f3mo leer los mensajes de error? Cuando un test falla, Vitest te muestra:</p> <ul> <li>Qu\u00e9 esperabas que pasara (<code>Expected</code>)</li> <li>Qu\u00e9 realmente pas\u00f3 (<code>Received</code>)</li> <li>En qu\u00e9 l\u00ednea del test ocurri\u00f3 el error</li> <li>Una \"diff\" que muestra las diferencias</li> </ul>"},{"location":"sesion_11_Final/#comandos-utiles","title":"Comandos \u00datiles","text":""},{"location":"sesion_11_Final/#desarrollo","title":"Desarrollo","text":"<pre><code>npm run dev          # Iniciar servidor de desarrollo\nnpm run build        # Crear build de producci\u00f3n\nnpm run preview      # Preview del build de producci\u00f3n\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace cada comando de desarrollo?</p> <ul> <li><code>npm run dev</code>: Inicia un servidor local en <code>http://localhost:5173</code> con hot reload (se actualiza autom\u00e1ticamente cuando cambias c\u00f3digo)</li> <li><code>npm run build</code>: Crea una versi\u00f3n optimizada de tu aplicaci\u00f3n para producci\u00f3n (archivos minificados y optimizados)</li> <li><code>npm run preview</code>: Te permite ver c\u00f3mo se ver\u00eda tu aplicaci\u00f3n en producci\u00f3n sin subirla a un servidor</li> </ul>"},{"location":"sesion_11_Final/#testing","title":"Testing","text":"<pre><code>npm test             # Ejecutar tests en modo watch\nnpm run test:ui      # Interfaz gr\u00e1fica para tests\nnpm run test:coverage # Reporte de cobertura de c\u00f3digo\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 significa \"modo watch\"? En modo watch, los tests se ejecutan autom\u00e1ticamente cada vez que guardas un archivo. Es s\u00faper \u00fatil para desarrollo porque ves inmediatamente si algo se rompi\u00f3.</p>"},{"location":"sesion_11_Final/#otros-comandos-utiles","title":"Otros comandos \u00fatiles","text":"<pre><code>npm run lint         # Verificar c\u00f3digo con ESLint\nnpm install [paquete] # Instalar nueva dependencia\nnpm install -D [paquete] # Instalar dependencia de desarrollo\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace ESLint? ESLint revisa tu c\u00f3digo en busca de errores comunes y problemas de estilo. Es como un corrector ortogr\u00e1fico pero para c\u00f3digo JavaScript.</p> <p>\ud83d\udca1 Comandos adicionales \u00fatiles: <pre><code>npm list             # Ver todas las dependencias instaladas\nnpm outdated         # Ver qu\u00e9 paquetes tienen actualizaciones disponibles\nnpm run dev -- --port 3000  # Cambiar el puerto del servidor de desarrollo\n</code></pre></p>"},{"location":"sesion_11_Final/#conceptos-clave-aprendidos","title":"\ud83c\udfaf Conceptos Clave Aprendidos","text":""},{"location":"sesion_11_Final/#react","title":"React","text":"<p>\ud83d\udcd8 Componentes funcionales</p> <ul> <li>Son funciones que devuelven JSX (HTML dentro de JavaScript)</li> <li><code>function MiComponente() { return &lt;div&gt;Hola&lt;/div&gt;; }</code></li> <li>Son la forma moderna y recomendada de crear componentes</li> </ul> <p>\ud83d\udcd8 Props (propiedades)</p> <ul> <li>Forma de pasar datos de un componente padre a un hijo</li> <li><code>&lt;ProductCard product={miProducto} /&gt;</code> pasa <code>miProducto</code> como prop</li> <li>Se reciben como par\u00e1metros: <code>function ProductCard({ product })</code></li> </ul> <p>\ud83d\udcd8 useState (estado local)</p> <ul> <li>Hook para manejar datos que pueden cambiar en el componente</li> <li><code>const [productos, setProductos] = useState([])</code> crea estado</li> <li>Cuando cambias el estado con <code>setProductos()</code>, React re-renderiza autom\u00e1ticamente</li> </ul> <p>\ud83d\udcd8 useEffect (efectos secundarios)</p> <ul> <li>Hook para ejecutar c\u00f3digo cuando el componente se monta o actualiza</li> <li><code>useEffect(() =&gt; { /* c\u00f3digo */ }, [])</code> se ejecuta una sola vez al montar</li> <li>Perfecto para peticiones HTTP, suscripciones, timers, etc.</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 hooks? Los hooks permiten usar estado y efectos en componentes funcionales, que antes solo estaban disponibles en componentes de clase.</p>"},{"location":"sesion_11_Final/#testing_1","title":"Testing","text":"<p>\ud83d\udcd8 describe/it (estructura de tests)</p> <ul> <li><code>describe</code>: Agrupa tests relacionados bajo un nombre</li> <li><code>it</code> o <code>test</code>: Define un test individual con descripci\u00f3n espec\u00edfica</li> <li>Ayuda a organizar y entender qu\u00e9 est\u00e1 siendo probado</li> </ul> <p>\ud83d\udcd8 render (renderizar para testing)</p> <ul> <li><code>render(&lt;MiComponente /&gt;)</code> monta el componente en un DOM virtual</li> <li>Permite interactuar con el componente como si estuviera en el navegador</li> <li>Es el primer paso de casi todos los tests de React</li> </ul> <p>\ud83d\udcd8 screen (buscar elementos)</p> <ul> <li><code>screen.getByText()</code>: Busca elementos por su texto visible</li> <li><code>screen.getByRole()</code>: Busca por rol de accesibilidad (img, button, etc.)</li> <li><code>screen.queryByText()</code>: Como getByText pero no falla si no encuentra</li> </ul> <p>\ud83d\udcd8 waitFor (operaciones as\u00edncronas)</p> <ul> <li>Espera a que algo aparezca o cambie en el DOM</li> <li>Esencial para probar componentes que hacen peticiones HTTP</li> <li><code>await waitFor(() =&gt; expect(algo).toBeInTheDocument())</code></li> </ul> <p>\ud83d\udcd8 Mocking (simulaci\u00f3n)</p> <ul> <li>Crear versiones falsas de funciones o APIs para testing</li> <li><code>vi.fn()</code> crea una funci\u00f3n mock</li> <li>Permite controlar exactamente qu\u00e9 respuestas devuelve una funci\u00f3n</li> </ul> <p>\ud83d\udcd8 expect (verificaciones)</p> <ul> <li>Define qu\u00e9 esperamos que sea verdad</li> <li><code>expect(elemento).toBeInTheDocument()</code>: verifica que existe</li> <li><code>expect(funcion).toHaveBeenCalledWith(parametros)</code>: verifica llamadas</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 testear?</p> <ul> <li>Previene errores cuando cambias c\u00f3digo</li> <li>Documenta c\u00f3mo debe comportarse tu aplicaci\u00f3n</li> <li>Te da confianza para hacer cambios grandes</li> <li>Facilita el trabajo en equipo</li> </ul>"},{"location":"sesion_11_Final/#herramientas","title":"Herramientas","text":"<p>\ud83d\udcd8 Vite (herramienta de build)</p> <ul> <li>Herramienta moderna para crear aplicaciones web</li> <li>Mucho m\u00e1s r\u00e1pida que Create React App</li> <li>Hot reload s\u00faper r\u00e1pido durante desarrollo</li> <li>Optimizaciones autom\u00e1ticas para producci\u00f3n</li> </ul> <p>\ud83d\udcd8 Vitest (framework de testing)</p> <ul> <li>Framework de testing moderno y r\u00e1pido</li> <li>Integrado perfectamente con Vite</li> <li>Compatible con Jest pero m\u00e1s r\u00e1pido</li> <li>Incluye interfaz gr\u00e1fica para ver tests</li> </ul> <p>\ud83d\udcd8 Testing Library (librer\u00eda de testing)</p> <ul> <li>Enfoque centrado en el usuario (prueba c\u00f3mo el usuario interact\u00faa)</li> <li>Busca elementos como los ver\u00eda un usuario real</li> <li>Mejores pr\u00e1cticas para testing de React</li> <li>Hace que los tests sean m\u00e1s mantenibles</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 estas herramientas? Son el stack moderno recomendado para React: r\u00e1pidas, bien mantenidas y con gran comunidad.</p>"},{"location":"sesion_11_Final/#fase-4-hooks-personalizados-y-api","title":"Fase 4: Hooks Personalizados y API","text":""},{"location":"sesion_11_Final/#41-que-son-los-hooks-personalizados","title":"4.1 \u00bfQu\u00e9 son los Hooks Personalizados?","text":"<p>\ud83d\udcd8 \u00bfQu\u00e9 es un hook personalizado?</p> <ul> <li>Un hook personalizado es una funci\u00f3n que usa otros hooks de React</li> <li>Permite reutilizar l\u00f3gica entre diferentes componentes</li> <li>Siempre debe empezar con la palabra \"use\" (como <code>useProducts</code>, <code>useAuth</code>, etc.)</li> <li>Es una forma de extraer l\u00f3gica compleja y reutilizarla</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 crear hooks personalizados?</p> <ul> <li>Reutilizaci\u00f3n: La misma l\u00f3gica puede usarse en m\u00faltiples componentes</li> <li>Organizaci\u00f3n: Separa la l\u00f3gica de negocio de la presentaci\u00f3n</li> <li>Testing: Es m\u00e1s f\u00e1cil testear la l\u00f3gica por separado</li> <li>Mantenimiento: Cambios en un solo lugar afectan todos los usos</li> </ul>"},{"location":"sesion_11_Final/#42-crear-el-archivo-de-api","title":"4.2 Crear el Archivo de API","text":"<p>Crea <code>src/api/products.js</code>:</p> <pre><code>// Configuraci\u00f3n base de la API\nconst API_BASE_URL = 'https://dummyjson.com';\n\n/**\n * Obtiene productos de la API\n * @param {number} limit - N\u00famero de productos a obtener (por defecto 10)\n * @param {number} skip - N\u00famero de productos a saltar (para paginaci\u00f3n)\n * @returns {Promise} Promesa que resuelve con los datos de productos\n */\nexport async function getProducts(limit = 10, skip = 0) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products?limit=${limit}&amp;skip=${skip}`);\n\n    if (!response.ok) {\n      throw new Error(`Error HTTP: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error al obtener productos:', error);\n    throw error;\n  }\n}\n\n/**\n * Busca productos por t\u00e9rmino de b\u00fasqueda\n * @param {string} query - T\u00e9rmino de b\u00fasqueda\n * @param {number} limit - N\u00famero de productos a obtener\n * @returns {Promise} Promesa que resuelve con los productos encontrados\n */\nexport async function searchProducts(query, limit = 10) {\n  try {\n    if (!query || query.trim() === '') {\n      // Si no hay t\u00e9rmino de b\u00fasqueda, devolver productos normales\n      return getProducts(limit);\n    }\n\n    const response = await fetch(`${API_BASE_URL}/products/search?q=${encodeURIComponent(query)}&amp;limit=${limit}`);\n\n    if (!response.ok) {\n      throw new Error(`Error HTTP: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error al buscar productos:', error);\n    throw error;\n  }\n}\n\n/**\n * Obtiene un producto espec\u00edfico por ID\n * @param {number} id - ID del producto\n * @returns {Promise} Promesa que resuelve con el producto\n */\nexport async function getProductById(id) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products/${id}`);\n\n    if (!response.ok) {\n      throw new Error(`Error HTTP: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error al obtener producto:', error);\n    throw error;\n  }\n}\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace cada funci\u00f3n?</p> <ul> <li><code>getProducts()</code>: Obtiene una lista de productos con paginaci\u00f3n</li> <li><code>searchProducts()</code>: Busca productos por un t\u00e9rmino espec\u00edfico</li> <li><code>getProductById()</code>: Obtiene un producto espec\u00edfico por su ID</li> <li>Todas manejan errores y usan <code>async/await</code> para c\u00f3digo m\u00e1s limpio</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 separar la API?</p> <ul> <li>Centralizaci\u00f3n: Todas las llamadas a la API est\u00e1n en un lugar</li> <li>Reutilizaci\u00f3n: Diferentes componentes pueden usar las mismas funciones</li> <li>Mantenimiento: Cambiar la URL base o l\u00f3gica de error se hace una sola vez</li> <li>Testing: Es m\u00e1s f\u00e1cil hacer mock de funciones espec\u00edficas</li> </ul>"},{"location":"sesion_11_Final/#43-crear-el-hook-personalizado","title":"4.3 Crear el Hook Personalizado","text":"<p>Crea <code>src/hooks/useProducts.js</code>:</p> <pre><code>import { useState, useEffect, useCallback } from 'react';\nimport { getProducts, searchProducts } from '../api/products';\n\n/**\n * Hook personalizado para manejar productos\n * @param {string} searchTerm - T\u00e9rmino de b\u00fasqueda (opcional)\n * @param {number} limit - N\u00famero de productos a cargar\n * @returns {Object} Estado y funciones para manejar productos\n */\nexport function useProducts(searchTerm = '', limit = 10) {\n  // Estados para manejar los datos\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Funci\u00f3n para cargar productos (memoizada para evitar re-creaciones innecesarias)\n  const loadProducts = useCallback(async (term = '', productLimit = limit) =&gt; {\n    try {\n      setLoading(true);\n      setError(null);\n\n      let data;\n      if (term &amp;&amp; term.trim() !== '') {\n        // Si hay t\u00e9rmino de b\u00fasqueda, buscar productos\n        data = await searchProducts(term, productLimit);\n      } else {\n        // Si no hay t\u00e9rmino, obtener productos normales\n        data = await getProducts(productLimit);\n      }\n\n      setProducts(data.products || []);\n    } catch (err) {\n      setError(err.message);\n      setProducts([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [limit]);\n\n  // Efecto para cargar productos cuando cambia el t\u00e9rmino de b\u00fasqueda\n  useEffect(() =&gt; {\n    loadProducts(searchTerm);\n  }, [searchTerm, loadProducts]);\n\n  // Funci\u00f3n para recargar productos manualmente\n  const refetch = useCallback(() =&gt; {\n    loadProducts(searchTerm);\n  }, [loadProducts, searchTerm]);\n\n  // Funci\u00f3n para limpiar b\u00fasqueda\n  const clearSearch = useCallback(() =&gt; {\n    loadProducts('');\n  }, [loadProducts]);\n\n  // Devolver estado y funciones \u00fatiles\n  return {\n    products,\n    loading,\n    error,\n    refetch,\n    clearSearch,\n    // Meta informaci\u00f3n \u00fatil\n    hasProducts: products.length &gt; 0,\n    isEmpty: !loading &amp;&amp; products.length === 0,\n  };\n}\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace este hook?</p> <ul> <li>Encapsula l\u00f3gica: Toda la l\u00f3gica de cargar productos est\u00e1 en un lugar</li> <li>Maneja estados: loading, error, y productos de forma autom\u00e1tica</li> <li>B\u00fasqueda autom\u00e1tica: Cuando cambia <code>searchTerm</code>, busca autom\u00e1ticamente</li> <li>Funciones \u00fatiles: <code>refetch</code> para recargar, <code>clearSearch</code> para limpiar</li> <li>useCallback: Evita que las funciones se recreen en cada render</li> </ul> <p>\ud83d\udca1 \u00bfQu\u00e9 es useCallback? <code>useCallback</code> memoriza una funci\u00f3n para que no se recree en cada render, lo que mejora la performance y evita efectos infinitos.</p>"},{"location":"sesion_11_Final/#44-actualizar-productlist-con-el-hook","title":"4.4 Actualizar ProductList con el Hook","text":"<p>Actualiza <code>src/components/ProductList.jsx</code>:</p> <pre><code>import { useState } from 'react';\nimport ProductCard from './ProductCard';\nimport { useProducts } from '../hooks/useProducts';\n\nfunction ProductList() {\n  // Estado para el t\u00e9rmino de b\u00fasqueda\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Usar nuestro hook personalizado\n  const { products, loading, error, hasProducts, isEmpty } = useProducts(searchTerm);\n\n  // Manejar cambios en el input de b\u00fasqueda\n  const handleSearchChange = (event) =&gt; {\n    setSearchTerm(event.target.value);\n  };\n\n  // Limpiar b\u00fasqueda\n  const handleClearSearch = () =&gt; {\n    setSearchTerm('');\n  };\n\n  return (\n    &lt;div&gt;\n      {/* Secci\u00f3n de b\u00fasqueda */}\n      &lt;div style={{\n        marginBottom: '2rem',\n        padding: '1rem',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '8px'\n      }}&gt;\n        &lt;div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}&gt;\n          &lt;input\n            type=\"text\"\n            placeholder=\"Buscar productos...\"\n            value={searchTerm}\n            onChange={handleSearchChange}\n            style={{\n              flex: 1,\n              padding: '0.5rem',\n              border: '1px solid #ddd',\n              borderRadius: '4px',\n              fontSize: '1rem'\n            }}\n          /&gt;\n          {searchTerm &amp;&amp; (\n            &lt;button\n              onClick={handleClearSearch}\n              style={{\n                padding: '0.5rem 1rem',\n                backgroundColor: '#6c757d',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            &gt;\n              Limpiar\n            &lt;/button&gt;\n          )}\n        &lt;/div&gt;\n\n        {/* Mostrar qu\u00e9 se est\u00e1 buscando */}\n        {searchTerm &amp;&amp; (\n          &lt;p style={{ marginTop: '0.5rem', color: '#666', fontSize: '0.9rem' }}&gt;\n            {loading ? 'Buscando...' : `Resultados para: \"${searchTerm}\"`}\n          &lt;/p&gt;\n        )}\n      &lt;/div&gt;\n\n      {/* Estados de carga y error */}\n      {loading &amp;&amp; (\n        &lt;div style={{ textAlign: 'center', padding: '2rem' }}&gt;\n          &lt;p&gt;\ud83d\udd04 {searchTerm ? 'Buscando productos...' : 'Cargando productos...'}&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n\n      {error &amp;&amp; (\n        &lt;div style={{ textAlign: 'center', padding: '2rem', color: 'red' }}&gt;\n          &lt;p&gt;\u274c Error: {error}&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n\n      {/* Mensaje cuando no hay productos */}\n      {isEmpty &amp;&amp; !error &amp;&amp; (\n        &lt;div style={{ textAlign: 'center', padding: '2rem', color: '#666' }}&gt;\n          &lt;p&gt;\n            {searchTerm \n              ? `No se encontraron productos para \"${searchTerm}\"` \n              : 'No hay productos disponibles'}\n          &lt;/p&gt;\n        &lt;/div&gt;\n      )}\n\n      {/* Lista de productos */}\n      {hasProducts &amp;&amp; (\n        &lt;div style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\n          gap: '1rem',\n          padding: '1rem 0'\n        }}&gt;\n          {products.map((product) =&gt; (\n            &lt;ProductCard key={product.id} product={product} /&gt;\n          ))}\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n\nexport default ProductList;\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 cambi\u00f3 en ProductList?</p> <ul> <li>Hook personalizado: Usa <code>useProducts</code> en lugar de <code>useEffect</code> + <code>fetch</code></li> <li>B\u00fasqueda en tiempo real: El input actualiza <code>searchTerm</code> y autom\u00e1ticamente busca</li> <li>Mejor UX: Bot\u00f3n para limpiar b\u00fasqueda y mensajes m\u00e1s descriptivos</li> <li>C\u00f3digo m\u00e1s limpio: La l\u00f3gica compleja est\u00e1 en el hook, el componente solo se enfoca en UI</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 es mejor esta aproximaci\u00f3n?</p> <ul> <li>Separaci\u00f3n de responsabilidades: El hook maneja datos, el componente maneja UI</li> <li>Reutilizaci\u00f3n: El hook se puede usar en otros componentes</li> <li>Testing: Puedes testear el hook y el componente por separado</li> </ul>"},{"location":"sesion_11_Final/#45-tests-para-el-hook-personalizado","title":"4.5 Tests para el Hook Personalizado","text":"<p>Crea <code>src/hooks/useProducts.test.js</code>:</p> <pre><code>import { renderHook, waitFor } from '@testing-library/react';\nimport { useProducts } from './useProducts';\nimport * as api from '../api/products';\nimport { vi } from 'vitest';\n\n// Mock de las funciones de la API\nvi.mock('../api/products');\n\ndescribe('useProducts', () =&gt; {\n  const mockProducts = [\n    { id: 1, title: 'Producto 1', price: 100, description: 'Desc 1', thumbnail: 'img1.jpg' },\n    { id: 2, title: 'Producto 2', price: 200, description: 'Desc 2', thumbnail: 'img2.jpg' }\n  ];\n\n  beforeEach(() =&gt; {\n    vi.clearAllMocks();\n  });\n\n  it('deber\u00eda cargar productos inicialmente', async () =&gt; {\n    // Simular respuesta exitosa de la API\n    api.getProducts.mockResolvedValue({ products: mockProducts });\n\n    const { result } = renderHook(() =&gt; useProducts());\n\n    // Verificar estado inicial\n    expect(result.current.loading).toBe(true);\n    expect(result.current.products).toEqual([]);\n\n    // Esperar a que carguen los productos\n    await waitFor(() =&gt; {\n      expect(result.current.loading).toBe(false);\n      expect(result.current.products).toEqual(mockProducts);\n      expect(result.current.hasProducts).toBe(true);\n    });\n  });\n\n  it('deber\u00eda buscar productos cuando se proporciona searchTerm', async () =&gt; {\n    api.searchProducts.mockResolvedValue({ products: [mockProducts[0]] });\n\n    const { result } = renderHook(() =&gt; useProducts('laptop'));\n\n    await waitFor(() =&gt; {\n      expect(result.current.loading).toBe(false);\n      expect(api.searchProducts).toHaveBeenCalledWith('laptop', 10);\n      expect(result.current.products).toEqual([mockProducts[0]]);\n    });\n  });\n\n  it('deber\u00eda manejar errores correctamente', async () =&gt; {\n    const errorMessage = 'Error de red';\n    api.getProducts.mockRejectedValue(new Error(errorMessage));\n\n    const { result } = renderHook(() =&gt; useProducts());\n\n    await waitFor(() =&gt; {\n      expect(result.current.loading).toBe(false);\n      expect(result.current.error).toBe(errorMessage);\n      expect(result.current.products).toEqual([]);\n      expect(result.current.isEmpty).toBe(true);\n    });\n  });\n\n  it('deber\u00eda poder recargar productos con refetch', async () =&gt; {\n    api.getProducts.mockResolvedValue({ products: mockProducts });\n\n    const { result } = renderHook(() =&gt; useProducts());\n\n    // Esperar carga inicial\n    await waitFor(() =&gt; {\n      expect(result.current.loading).toBe(false);\n    });\n\n    // Limpiar mocks para verificar nueva llamada\n    vi.clearAllMocks();\n    api.getProducts.mockResolvedValue({ products: [mockProducts[0]] });\n\n    // Llamar refetch\n    result.current.refetch();\n\n    await waitFor(() =&gt; {\n      expect(api.getProducts).toHaveBeenCalledTimes(1);\n      expect(result.current.products).toEqual([mockProducts[0]]);\n    });\n  });\n});\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>renderHook</code>?</p> <ul> <li>Es una funci\u00f3n especial de Testing Library para testear hooks</li> <li><code>renderHook(() =&gt; useProducts())</code> \"ejecuta\" el hook en un entorno de testing</li> <li><code>result.current</code> contiene el valor actual que devuelve el hook</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 testear hooks por separado?</p> <ul> <li>Aislamiento: Pruebas m\u00e1s espec\u00edficas y f\u00e1ciles de debuggear</li> <li>Reutilizaci\u00f3n: Si el hook se usa en m\u00faltiples componentes, solo necesitas testearlo una vez</li> <li>L\u00f3gica compleja: Puedes probar todos los casos edge sin preocuparte por UI</li> </ul>"},{"location":"sesion_11_Final/#46-tests-actualizados-para-productlist","title":"4.6 Tests Actualizados para ProductList","text":"<p>Actualiza <code>src/components/ProductList.test.jsx</code>:</p> <pre><code>import { render, screen, waitFor, fireEvent } from '@testing-library/react';\nimport ProductList from './ProductList';\nimport * as api from '../api/products';\nimport { vi } from 'vitest';\n\n// Mock de las funciones de la API\nvi.mock('../api/products');\n\ndescribe('ProductList con b\u00fasqueda', () =&gt; {\n  const mockProducts = [\n    { id: 1, title: 'iPhone 15', description: 'Smartphone Apple', price: 999, thumbnail: 'iphone.jpg' },\n    { id: 2, title: 'Samsung Galaxy', description: 'Smartphone Samsung', price: 899, thumbnail: 'samsung.jpg' }\n  ];\n\n  beforeEach(() =&gt; {\n    vi.clearAllMocks();\n  });\n\n  it('deber\u00eda mostrar productos inicialmente', async () =&gt; {\n    api.getProducts.mockResolvedValue({ products: mockProducts });\n\n    render(&lt;ProductList /&gt;);\n\n    // Verificar que se muestre el input de b\u00fasqueda\n    expect(screen.getByPlaceholderText('Buscar productos...')).toBeInTheDocument();\n\n    // Esperar a que carguen los productos\n    await waitFor(() =&gt; {\n      expect(screen.getByText('iPhone 15')).toBeInTheDocument();\n      expect(screen.getByText('Samsung Galaxy')).toBeInTheDocument();\n    });\n  });\n\n  it('deber\u00eda buscar productos cuando se escribe en el input', async () =&gt; {\n    // Mock para carga inicial\n    api.getProducts.mockResolvedValue({ products: mockProducts });\n    // Mock para b\u00fasqueda\n    api.searchProducts.mockResolvedValue({ products: [mockProducts[0]] });\n\n    render(&lt;ProductList /&gt;);\n\n    // Esperar carga inicial\n    await waitFor(() =&gt; {\n      expect(screen.getByText('iPhone 15')).toBeInTheDocument();\n    });\n\n    // Buscar en el input\n    const searchInput = screen.getByPlaceholderText('Buscar productos...');\n    fireEvent.change(searchInput, { target: { value: 'iPhone' } });\n\n    // Verificar que se muestre el indicador de b\u00fasqueda\n    await waitFor(() =&gt; {\n      expect(screen.getByText('Resultados para: \"iPhone\"')).toBeInTheDocument();\n      expect(api.searchProducts).toHaveBeenCalledWith('iPhone', 10);\n    });\n  });\n\n  it('deber\u00eda mostrar bot\u00f3n de limpiar cuando hay b\u00fasqueda', async () =&gt; {\n    api.getProducts.mockResolvedValue({ products: mockProducts });\n\n    render(&lt;ProductList /&gt;);\n\n    const searchInput = screen.getByPlaceholderText('Buscar productos...');\n\n    // Escribir en el input\n    fireEvent.change(searchInput, { target: { value: 'test' } });\n\n    // Verificar que aparezca el bot\u00f3n de limpiar\n    expect(screen.getByText('Limpiar')).toBeInTheDocument();\n  });\n\n  it('deber\u00eda limpiar b\u00fasqueda al hacer click en limpiar', async () =&gt; {\n    api.getProducts.mockResolvedValue({ products: mockProducts });\n    api.searchProducts.mockResolvedValue({ products: [mockProducts[0]] });\n\n    render(&lt;ProductList /&gt;);\n\n    const searchInput = screen.getByPlaceholderText('Buscar productos...');\n\n    // Escribir en el input\n    fireEvent.change(searchInput, { target: { value: 'test' } });\n\n    // Click en limpiar\n    fireEvent.click(screen.getByText('Limpiar'));\n\n    // Verificar que el input se limpie\n    expect(searchInput.value).toBe('');\n\n    // Verificar que se carguen todos los productos nuevamente\n    await waitFor(() =&gt; {\n      expect(api.getProducts).toHaveBeenCalled();\n    });\n  });\n});\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace <code>fireEvent</code>?</p> <ul> <li>Simula eventos del usuario como clicks, cambios en inputs, etc.</li> <li><code>fireEvent.change(input, { target: { value: 'texto' } })</code> simula escribir en un input</li> <li><code>fireEvent.click(button)</code> simula hacer click en un bot\u00f3n</li> </ul> <p>\u2705 \u00bfQu\u00e9 estamos testeando ahora?</p> <ul> <li>Que la b\u00fasqueda funcione correctamente</li> <li>Que el bot\u00f3n de limpiar aparezca y funcione</li> <li>Que los indicadores de b\u00fasqueda se muestren apropiadamente</li> <li>Que se hagan las llamadas correctas a la API</li> </ul>"},{"location":"sesion_11_Final/#workshop-react-paso-6-build-y-deploy-con-netlify","title":"Workshop React - Paso 6: Build y Deploy con Netlify","text":""},{"location":"sesion_11_Final/#llevando-tu-aplicacion-a-produccion","title":"\ud83d\ude80 Llevando tu Aplicaci\u00f3n a Producci\u00f3n","text":"<p>En este paso final, aprender\u00e1s a publicar tu aplicaci\u00f3n React en internet para que cualquiera pueda acceder a ella. Usaremos Netlify, una plataforma gratuita y f\u00e1cil de usar para principiantes.</p>"},{"location":"sesion_11_Final/#61-preparar-el-proyecto-para-produccion","title":"6.1 Preparar el Proyecto para Producci\u00f3n","text":""},{"location":"sesion_11_Final/#verificar-que-todo-funciona-localmente","title":"Verificar que Todo Funciona Localmente","text":"<p>Antes de hacer deploy, aseg\u00farate de que todo funcione correctamente:</p> <pre><code># Ejecutar tests para verificar que todo est\u00e9 bien\nnpm test\n\n# Probar el build de producci\u00f3n\nnpm run build\n\n# Ver el build localmente\nnpm run preview\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace cada comando?</p> <ul> <li><code>npm test</code>: Ejecuta todos los tests para verificar que no hay errores</li> <li><code>npm run build</code>: Crea una versi\u00f3n optimizada para producci\u00f3n</li> <li><code>npm run preview</code>: Te permite ver c\u00f3mo se ver\u00e1 en producci\u00f3n</li> </ul> <p>\ud83d\udca1 \u00bfPor qu\u00e9 es importante probar el build? A veces el c\u00f3digo funciona en desarrollo pero falla en producci\u00f3n debido a optimizaciones y configuraciones diferentes.</p>"},{"location":"sesion_11_Final/#verificar-variables-de-entorno","title":"Verificar Variables de Entorno","text":"<p>Si tu aplicaci\u00f3n usa variables de entorno, verifica que est\u00e9n configuradas:</p> <pre><code>// src/config/environment.js\nexport const config = {\n  apiUrl: import.meta.env.VITE_API_URL || 'https://dummyjson.com',\n  environment: import.meta.env.MODE,\n  isDevelopment: import.meta.env.DEV,\n  isProduction: import.meta.env.PROD,\n};\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 son las variables de entorno?</p> <ul> <li>Valores que pueden cambiar seg\u00fan donde est\u00e9 ejecut\u00e1ndose la app (desarrollo, testing, producci\u00f3n)</li> <li>En Vite, las variables deben empezar con <code>VITE_</code></li> <li>Se definen en archivos <code>.env</code>, <code>.env.local</code>, <code>.env.production</code></li> </ul> <p>\ud83d\udca1 Ejemplo de .env.production: <pre><code>VITE_API_URL=https://api.mitienda.com\nVITE_GOOGLE_ANALYTICS_ID=UA-123456789-1\n</code></pre></p>"},{"location":"sesion_11_Final/#62-subir-el-proyecto-a-github","title":"6.2 Subir el Proyecto a GitHub","text":""},{"location":"sesion_11_Final/#paso-1-inicializar-git-si-no-lo-has-hecho","title":"Paso 1: Inicializar Git (si no lo has hecho)","text":"<pre><code># Inicializar repositorio git\ngit init\n\n# Agregar todos los archivos\ngit add .\n\n# Hacer primer commit\ngit commit -m \"feat: aplicaci\u00f3n React completa con routing y carrito\"\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 es Git?</p> <ul> <li>Sistema de control de versiones que guarda el historial de cambios de tu c\u00f3digo</li> <li>Te permite colaborar con otros desarrolladores</li> <li>GitHub es una plataforma que aloja repositorios Git en la nube</li> </ul>"},{"location":"sesion_11_Final/#paso-2-crear-repositorio-en-github","title":"Paso 2: Crear Repositorio en GitHub","text":"<ol> <li>Ve a github.com y crea una cuenta si no tienes</li> <li>Haz click en \"New repository\" (bot\u00f3n verde)</li> <li>Nombra tu repositorio (ej: <code>mi-tienda-react</code>)</li> <li>Selecciona \"Public\" para que sea gratuito</li> <li>NO selecciones \"Initialize with README\" (ya tienes c\u00f3digo)</li> <li>Haz click en \"Create repository\"</li> </ol>"},{"location":"sesion_11_Final/#paso-3-conectar-tu-proyecto-local-con-github","title":"Paso 3: Conectar tu Proyecto Local con GitHub","text":"<pre><code># Agregar el repositorio remoto (reemplaza con tu URL)\ngit remote add origin https://github.com/TU_USUARIO/mi-tienda-react.git\n\n# Cambiar a la rama main (GitHub usa main por defecto)\ngit branch -M main\n\n# Subir el c\u00f3digo\ngit push -u origin main\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace cada comando?</p> <ul> <li><code>git remote add origin</code>: Conecta tu proyecto local con el repositorio en GitHub</li> <li><code>git branch -M main</code>: Cambia el nombre de la rama principal a \"main\"</li> <li><code>git push -u origin main</code>: Sube tu c\u00f3digo a GitHub por primera vez</li> </ul> <p>\ud83d\udca1 \u00bfProblemas con autenticaci\u00f3n? GitHub requiere autenticaci\u00f3n. Opciones:</p> <ul> <li>HTTPS con token: Genera un Personal Access Token en GitHub Settings</li> <li>SSH: Configura llaves SSH (m\u00e1s seguro)</li> <li>GitHub CLI: <code>gh auth login</code> para autenticaci\u00f3n f\u00e1cil</li> </ul>"},{"location":"sesion_11_Final/#paso-4-verificar-que-se-subio-correctamente","title":"Paso 4: Verificar que se Subi\u00f3 Correctamente","text":"<p>Ve a tu repositorio en GitHub y verifica que todos los archivos est\u00e9n ah\u00ed:</p> <ul> <li><code>src/</code> con todos tus componentes</li> <li><code>package.json</code> con las dependencias</li> <li><code>vite.config.js</code> con la configuraci\u00f3n</li> <li>Tests y otros archivos</li> </ul>"},{"location":"sesion_11_Final/#63-deploy-automatico-con-netlify","title":"6.3 Deploy Autom\u00e1tico con Netlify","text":""},{"location":"sesion_11_Final/#paso-1-crear-cuenta-en-netlify","title":"Paso 1: Crear Cuenta en Netlify","text":"<ol> <li>Ve a netlify.com</li> <li>Haz click en \"Sign up\"</li> <li>Selecciona \"GitHub\" para registrarte con tu cuenta de GitHub</li> <li>Autoriza a Netlify para acceder a tus repositorios</li> </ol> <p>\ud83d\udcd8 \u00bfPor qu\u00e9 usar Netlify?</p> <ul> <li>Gratuito: Plan free generoso para proyectos personales</li> <li>F\u00e1cil: Deploy autom\u00e1tico desde GitHub</li> <li>R\u00e1pido: CDN global para cargar tu app r\u00e1pidamente</li> <li>HTTPS: Certificados SSL gratuitos</li> <li>Builds autom\u00e1ticos: Se actualiza cuando haces push a GitHub</li> </ul>"},{"location":"sesion_11_Final/#paso-2-crear-nuevo-sitio","title":"Paso 2: Crear Nuevo Sitio","text":"<ol> <li>En el dashboard de Netlify, haz click en \"New site from Git\"</li> <li>Selecciona \"GitHub\"</li> <li>Autoriza a Netlify (si no lo hiciste antes)</li> <li>Busca y selecciona tu repositorio <code>mi-tienda-react</code></li> </ol>"},{"location":"sesion_11_Final/#paso-3-configurar-build-settings","title":"Paso 3: Configurar Build Settings","text":"<p>En la pantalla de configuraci\u00f3n:</p> <pre><code># Build command (comando para crear el build)\nnpm run build\n\n# Publish directory (carpeta donde est\u00e1 el build)\ndist\n\n# Branch to deploy (rama a desplegar)\nmain\n</code></pre> <p>\u26a0\ufe0f IMPORTANTE: Aunque configures esto manualmente, es MUY recomendable crear tambi\u00e9n el archivo <code>netlify.toml</code> (explicado m\u00e1s abajo) para evitar errores comunes.</p> <p>\ud83d\udcd8 \u00bfPor qu\u00e9 estas configuraciones?</p> <ul> <li><code>npm run build</code>: Le dice a Netlify c\u00f3mo crear la versi\u00f3n de producci\u00f3n</li> <li><code>dist</code>: Vite genera el build en la carpeta <code>dist</code> (no <code>build</code> como Create React App)</li> <li><code>main</code>: La rama principal que se desplegar\u00e1 autom\u00e1ticamente</li> </ul> <p>\ud83d\udca1 Para otros frameworks:</p> <ul> <li>Create React App: Build command <code>npm run build</code>, publish directory <code>build</code></li> <li>Next.js: Build command <code>npm run build</code>, publish directory <code>out</code> (con export)</li> <li>Nuxt.js: Build command <code>npm run generate</code>, publish directory <code>dist</code></li> </ul>"},{"location":"sesion_11_Final/#paso-4-deploy","title":"Paso 4: Deploy!","text":"<ol> <li>Haz click en \"Deploy site\"</li> <li>Netlify comenzar\u00e1 a:</li> <li>Clonar tu repositorio</li> <li>Instalar dependencias (<code>npm install</code>)</li> <li>Ejecutar el build (<code>npm run build</code>)</li> <li>Publicar los archivos</li> <li>En unos minutos tendr\u00e1s un enlace como <code>https://amazing-fermat-123456.netlify.app</code></li> </ol>"},{"location":"sesion_11_Final/#paso-5-configurar-dominio-personalizado-opcional","title":"Paso 5: Configurar Dominio Personalizado (Opcional)","text":"<ol> <li>En el dashboard del sitio, ve a \"Domain settings\"</li> <li>Haz click en \"Add custom domain\"</li> <li>Ingresa tu dominio (ej: <code>mitienda.com</code>)</li> <li>Sigue las instrucciones para configurar DNS</li> </ol> <p>\ud83d\udcd8 \u00bfC\u00f3mo conseguir un dominio?</p> <ul> <li>Gratuitos: <code>.tk</code>, <code>.ml</code>, <code>.ga</code> en Freenom</li> <li>Baratos: Namecheap, GoDaddy, Google Domains</li> <li>Para estudiantes: GitHub Student Pack incluye dominios gratis</li> </ul>"},{"location":"sesion_11_Final/#64-configuracion-avanzada-de-deploy","title":"6.4 Configuraci\u00f3n Avanzada de Deploy","text":""},{"location":"sesion_11_Final/#variables-de-entorno-en-netlify","title":"Variables de Entorno en Netlify","text":"<ol> <li>En tu sitio de Netlify, ve a \"Site settings\"</li> <li>En el men\u00fa lateral, selecciona \"Environment variables\"</li> <li>Haz click en \"Add variable\"</li> <li>Agrega tus variables:    <pre><code>Key: VITE_API_URL\nValue: https://api.mitienda.com\n</code></pre></li> </ol> <p>\ud83d\udcd8 \u00bfPor qu\u00e9 variables de entorno en producci\u00f3n?</p> <ul> <li>Seguridad: No exponer datos sensibles en el c\u00f3digo</li> <li>Flexibilidad: Diferentes configuraciones para desarrollo/producci\u00f3n</li> <li>APIs: URLs diferentes para development y production</li> </ul>"},{"location":"sesion_11_Final/#configuracion-de-netlify-con-netlifytoml-importante","title":"Configuraci\u00f3n de Netlify con netlify.toml (IMPORTANTE)","text":"<p>Crea <code>netlify.toml</code> en la ra\u00edz de tu proyecto (no en <code>public/</code>):</p> <pre><code>[build]\n  command = \"npm run build\"\n  publish = \"dist\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n</code></pre> <p>\ud83d\udcd8 \u00bfPor qu\u00e9 usar netlify.toml en lugar de _redirects?</p> <ul> <li>M\u00e1s confiable: Netlify lo detecta autom\u00e1ticamente</li> <li>Configuraci\u00f3n centralizada: Build settings y redirects en un archivo</li> <li>Menos errores: Evita problemas de configuraci\u00f3n manual en el dashboard</li> <li>Versionado: Se guarda en Git junto con tu c\u00f3digo</li> </ul> <p>\ud83d\udca1 Estructura correcta del proyecto: <pre><code>/mi-tienda-react\n\u251c\u2500\u2500 dist/              \u2b05\ufe0f carpeta generada por Vite\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 public/\n\u251c\u2500\u2500 netlify.toml       \u2b05\ufe0f \ud83d\udd25 DEBE estar en la ra\u00edz\n\u251c\u2500\u2500 vite.config.js\n\u251c\u2500\u2500 package.json\n</code></pre></p>"},{"location":"sesion_11_Final/#aplicar-la-configuracion","title":"Aplicar la Configuraci\u00f3n","text":"<pre><code># Agregar el archivo de configuraci\u00f3n\ngit add netlify.toml\ngit commit -m \"fix: add Netlify config to serve dist correctly\"\ngit push\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace cada configuraci\u00f3n?</p> <ul> <li><code>command = \"npm run build\"</code>: Le dice a Netlify c\u00f3mo construir tu app</li> <li><code>publish = \"dist\"</code>: Especifica que los archivos finales est\u00e1n en la carpeta <code>dist</code></li> <li><code>redirects</code>: Todas las rutas van a <code>index.html</code> para que React Router funcione</li> </ul>"},{"location":"sesion_11_Final/#optimizaciones-de-performance","title":"Optimizaciones de Performance","text":"<p>Crea <code>public/_headers</code>:</p> <pre><code># Cachear archivos est\u00e1ticos por 1 a\u00f1o\n/static/*\n  Cache-Control: public, max-age=31536000, immutable\n\n# Cachear assets de Vite\n/assets/*\n  Cache-Control: public, max-age=31536000, immutable\n\n# No cachear el HTML principal\n/\n  Cache-Control: public, max-age=0, must-revalidate\n\n/*.html\n  Cache-Control: public, max-age=0, must-revalidate\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hacen estos headers?</p> <ul> <li>Cache-Control: Define cu\u00e1nto tiempo el navegador guarda archivos en cach\u00e9</li> <li>max-age=31536000: 1 a\u00f1o en segundos</li> <li>immutable: El archivo nunca cambia (perfecto para assets con hash)</li> <li>must-revalidate: Verificar con el servidor antes de usar cach\u00e9</li> </ul>"},{"location":"sesion_11_Final/#65-deploy-automatico-con-github-actions-avanzado","title":"6.5 Deploy Autom\u00e1tico con GitHub Actions (Avanzado)","text":"<p>Para mayor control, puedes usar GitHub Actions:</p> <p>Crea <code>.github/workflows/deploy.yml</code>:</p> <pre><code>name: Deploy to Netlify\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Run tests\n      run: npm test\n\n    - name: Build\n      run: npm run build\n      env:\n        VITE_API_URL: ${{ secrets.VITE_API_URL }}\n\n    - name: Deploy to Netlify\n      uses: nwtgck/actions-netlify@v2.0\n      with:\n        publish-dir: './dist'\n        production-branch: main\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        deploy-message: \"Deploy from GitHub Actions\"\n      env:\n        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}\n        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}\n</code></pre> <p>\ud83d\udcd8 \u00bfQu\u00e9 hace GitHub Actions?</p> <ul> <li>CI/CD: Integraci\u00f3n y deploy continuo</li> <li>Autom\u00e1tico: Se ejecuta en cada push a la rama main</li> <li>Tests: Ejecuta tests antes de hacer deploy</li> <li>Secrets: Variables seguras para tokens y configuraciones</li> </ul>"},{"location":"sesion_11_Final/#66-monitoreo-y-analytics","title":"6.6 Monitoreo y Analytics","text":""},{"location":"sesion_11_Final/#google-analytics-opcional","title":"Google Analytics (Opcional)","text":"<p>Instala analytics:</p> <pre><code>npm install gtag\n</code></pre> <p>Configura en <code>src/main.jsx</code>:</p> <pre><code>import { gtag } from 'gtag';\n\n// Configurar Google Analytics\nif (import.meta.env.PROD &amp;&amp; import.meta.env.VITE_GA_ID) {\n  gtag('config', import.meta.env.VITE_GA_ID, {\n    page_title: document.title,\n    page_location: window.location.href\n  });\n}\n</code></pre>"},{"location":"sesion_11_Final/#netlify-analytics","title":"Netlify Analytics","text":"<ol> <li>En tu sitio de Netlify, ve a \"Analytics\"</li> <li>Habilita \"Netlify Analytics\" (plan paid, pero hay trial gratuito)</li> <li>Ve m\u00e9tricas de:</li> <li>Visitantes \u00fanicos</li> <li>Page views</li> <li>Referrers</li> <li>Geolocalizaci\u00f3n</li> </ol> <p>\ud83d\udcd8 \u00bfQu\u00e9 m\u00e9tricas son importantes?</p> <ul> <li>Page views: Qu\u00e9 p\u00e1ginas visitan m\u00e1s</li> <li>Bounce rate: % que sale inmediatamente</li> <li>Load time: Qu\u00e9 tan r\u00e1pido carga tu app</li> <li>Mobile vs Desktop: Dispositivos de tus usuarios</li> </ul>"},{"location":"sesion_11_Final/#67-alternativas-de-deploy","title":"6.7 Alternativas de Deploy","text":""},{"location":"sesion_11_Final/#github-pages-gratuito","title":"GitHub Pages (Gratuito)","text":"<pre><code># Instalar gh-pages\nnpm install --save-dev gh-pages\n\n# Agregar script en package.json\n\"scripts\": {\n  \"deploy\": \"gh-pages -d dist\"\n}\n\n# Hacer deploy\nnpm run build\nnpm run deploy\n</code></pre> <p>\ud83d\udcd8 GitHub Pages vs Netlify:</p> <ul> <li>GitHub Pages: Gratuito, pero solo sitios est\u00e1ticos</li> <li>Netlify: M\u00e1s funciones (redirects, forms, functions)</li> <li>Ambos: Perfectos para React apps</li> </ul>"},{"location":"sesion_11_Final/#vercel-alternativa-premium","title":"Vercel (Alternativa Premium)","text":"<pre><code># Instalar Vercel CLI\nnpm install -g vercel\n\n# Deploy\nvercel\n\n# Deploy a producci\u00f3n\nvercel --prod\n</code></pre> <p>\ud83d\udcd8 \u00bfCu\u00e1ndo usar Vercel?</p> <ul> <li>Creado por el equipo de Next.js</li> <li>Excelente para React/Next.js</li> <li>Funciones serverless f\u00e1ciles</li> <li>Analytics y performance insights</li> </ul>"},{"location":"sesion_11_Final/#railway-para-full-stack","title":"Railway (Para Full-Stack)","text":"<p>Si tu app necesita backend:</p> <pre><code># Instalar Railway CLI\nnpm install -g @railway/cli\n\n# Login y deploy\nrailway login\nrailway deploy\n</code></pre> <p>\ud83d\udcd8 \u00bfCu\u00e1ndo usar Railway? - Cuando necesitas base de datos - Apps full-stack (frontend + backend) - Variables de entorno m\u00e1s complejas - Servicios adicionales (Redis, PostgreSQL)</p>"},{"location":"sesion_11_Final/#68-solucion-de-problemas-comunes","title":"6.8 Soluci\u00f3n de Problemas Comunes","text":""},{"location":"sesion_11_Final/#error-page-not-found-en-rutas-solucion-confirmada","title":"Error: \"Page Not Found\" en Rutas (SOLUCI\u00d3N CONFIRMADA)","text":"<p>Problema: <code>/product/123</code> funciona localmente pero da 404 en producci\u00f3n.</p> <p>\u274c M\u00e9todo anterior (menos confiable): <pre><code># public/_redirects\n/*    /index.html   200\n</code></pre></p> <p>\u2705 Soluci\u00f3n confirmada que SIEMPRE funciona:</p> <ol> <li>Crea <code>netlify.toml</code> en la ra\u00edz del proyecto (no en <code>public/</code>):</li> </ol> <pre><code>[build]\n  command = \"npm run build\"\n  publish = \"dist\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n</code></pre> <ol> <li>Verifica la estructura de tu repositorio:</li> </ol> <pre><code>/mi-tienda-react\n\u251c\u2500\u2500 dist/              \u2b05\ufe0f carpeta generada por Vite\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 public/\n\u251c\u2500\u2500 netlify.toml       \u2b05\ufe0f \ud83d\udd25 DEBE estar aqu\u00ed\n\u251c\u2500\u2500 vite.config.js\n\u251c\u2500\u2500 package.json\n</code></pre> <ol> <li>Commit y push para que Netlify lo detecte:</li> </ol> <pre><code>git add netlify.toml\ngit commit -m \"fix: add Netlify config to serve dist correctly\"\ngit push\n</code></pre> <ol> <li> <p>Verifica en Netlify Dashboard:</p> </li> <li> <p>Ve a tu sitio \u2192 \"Site settings\" \u2192 \"Build &amp; deploy\"</p> </li> <li>Confirma que aparezca:<ul> <li>Build command: <code>npm run build</code></li> <li>Publish directory: <code>dist</code></li> </ul> </li> </ol> <p>\ud83d\udcd8 \u00bfPor qu\u00e9 esta soluci\u00f3n es mejor?</p> <ul> <li>M\u00e1s confiable: Netlify lee autom\u00e1ticamente <code>netlify.toml</code></li> <li>Versionado: El archivo se guarda en Git con tu c\u00f3digo</li> <li>Menos errores: No depende de configuraci\u00f3n manual del dashboard</li> <li>Centralizado: Build settings y redirects en un solo lugar</li> </ul>"},{"location":"sesion_11_Final/#error-variables-de-entorno-no-funcionan","title":"Error: Variables de Entorno No Funcionan","text":"<p>Problema: <code>import.meta.env.VITE_API_URL</code> es <code>undefined</code>.</p> <p>Soluciones:</p> <ol> <li>Variables deben empezar con <code>VITE_</code></li> <li>Definir en Netlify environment variables</li> <li>Verificar que est\u00e9n en <code>.env.production</code></li> </ol>"},{"location":"sesion_11_Final/#build-falla-por-errores-de-linting","title":"Build Falla por Errores de Linting","text":"<p>Problema: Build falla por warnings de ESLint.</p> <p>Soluci\u00f3n: Configurar Vite para no fallar por warnings:</p> <pre><code>// vite.config.js\nexport default defineConfig({\n  plugins: [react()],\n  build: {\n    rollupOptions: {\n      onwarn(warning, warn) {\n        // Ignorar warnings espec\u00edficos\n        if (warning.code === 'UNUSED_EXTERNAL_IMPORT') return;\n        warn(warning);\n      }\n    }\n  }\n});\n</code></pre>"},{"location":"sesion_11_Final/#app-carga-lento","title":"App Carga Lento","text":"<p>Problemas comunes:</p> <ul> <li>Im\u00e1genes muy grandes</li> <li>Muchas dependencias</li> <li>Sin lazy loading</li> </ul> <p>Soluciones:</p> <pre><code>// 1. Lazy loading de p\u00e1ginas\nconst ProductDetail = lazy(() =&gt; import('./pages/ProductDetail'));\n\n// 2. Optimizar im\u00e1genes\n&lt;img \n  src={product.thumbnail} \n  loading=\"lazy\"\n  width=\"300\" \n  height=\"200\"\n/&gt;\n\n// 3. Analizar bundle\nnpm run build -- --analyze\n</code></pre>"},{"location":"sesion_11_Final/#69-mantenimiento-post-deploy","title":"6.9 Mantenimiento Post-Deploy","text":""},{"location":"sesion_11_Final/#actualizaciones-automaticas","title":"Actualizaciones Autom\u00e1ticas","text":"<p>Una vez configurado, tu flujo ser\u00e1:</p> <pre><code># 1. Hacer cambios localmente\ngit add .\ngit commit -m \"feat: nueva funcionalidad\"\ngit push origin main\n\n# 2. Netlify autom\u00e1ticamente:\n# - Detecta el push\n# - Ejecuta tests\n# - Hace build\n# - Despliega si todo est\u00e1 bien\n</code></pre>"},{"location":"sesion_11_Final/#monitoreo-de-errores","title":"Monitoreo de Errores","text":"<p>Considera usar servicios como:</p> <ul> <li>Sentry: Para tracking de errores en producci\u00f3n</li> <li>LogRocket: Para reproducir sesiones de usuario</li> <li>Hotjar: Para heatmaps y an\u00e1lisis de UX</li> </ul>"},{"location":"sesion_11_Final/#backups-y-rollbacks","title":"Backups y Rollbacks","text":"<pre><code># Ver deploys anteriores en Netlify\n# Hacer rollback desde el dashboard\n\n# O con CLI\nnetlify sites:list\nnetlify rollback\n</code></pre>"},{"location":"sesion_11_Final/#610-optimizaciones-de-performance","title":"6.10 Optimizaciones de Performance","text":""},{"location":"sesion_11_Final/#analisis-de-bundle","title":"An\u00e1lisis de Bundle","text":"<pre><code># Ver qu\u00e9 librer\u00edas ocupan m\u00e1s espacio\nnpm run build -- --analyze\n\n# Alternativa con webpack-bundle-analyzer\nnpm install -g webpack-bundle-analyzer\nnpx webpack-bundle-analyzer dist\n</code></pre>"},{"location":"sesion_11_Final/#code-splitting","title":"Code Splitting","text":"<pre><code>// Lazy loading de p\u00e1ginas\nimport { lazy, Suspense } from 'react';\n\nconst ProductDetail = lazy(() =&gt; import('./pages/ProductDetail'));\nconst Cart = lazy(() =&gt; import('./pages/Cart'));\n\nfunction App() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Cargando...&lt;/div&gt;}&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/product/:id\" element={&lt;ProductDetail /&gt;} /&gt;\n        &lt;Route path=\"/cart\" element={&lt;Cart /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/Suspense&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_11_Final/#optimizacion-de-imagenes","title":"Optimizaci\u00f3n de Im\u00e1genes","text":"<pre><code>// Componente de imagen optimizada\nfunction OptimizedImage({ src, alt, ...props }) {\n  return (\n    &lt;img\n      src={src}\n      alt={alt}\n      loading=\"lazy\"\n      decoding=\"async\"\n      {...props}\n      style={{\n        ...props.style,\n        maxWidth: '100%',\n        height: 'auto'\n      }}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"sesion_11_Final/#resumen-del-deploy","title":"\ud83c\udfaf Resumen del Deploy","text":""},{"location":"sesion_11_Final/#lo-que-hemos-logrado","title":"\u2705 Lo que hemos logrado:","text":"<p>Preparaci\u00f3n:</p> <ul> <li>\u2705 Verificar que todo funciona localmente</li> <li>\u2705 Configurar variables de entorno</li> <li>\u2705 Optimizar para producci\u00f3n</li> </ul> <p>GitHub:</p> <ul> <li>\u2705 Subir c\u00f3digo a repositorio</li> <li>\u2705 Configurar Git correctamente</li> <li>\u2705 Mantener historial de cambios</li> </ul> <p>Netlify Deploy:</p> <ul> <li>\u2705 Deploy autom\u00e1tico desde GitHub</li> <li>\u2705 Configuraci\u00f3n de build correcto</li> <li>\u2705 URL p\u00fablica funcionando</li> <li>\u2705 HTTPS autom\u00e1tico</li> </ul> <p>Optimizaciones:</p> <ul> <li>\u2705 Redirects para React Router</li> <li>\u2705 Headers de performance</li> <li>\u2705 Variables de entorno seguras</li> </ul>"},{"location":"sesion_11_Final/#tu-aplicacion-ahora-esta-en-linea","title":"\ud83d\ude80 Tu aplicaci\u00f3n ahora est\u00e1 en l\u00ednea!","text":"<p>URLs de ejemplo:</p> <ul> <li>Staging: <code>https://gilded-praline-e439e2.netlify.app/</code></li> <li>Custom domain: <code>https://mitienda.com</code> (si configuraste)</li> </ul>"}]}